{"meta":{"title":"Sun's Blog","subtitle":"CodeSun","description":"这是一段关于这个网站的描述文字","author":"Code Sun","url":"https://sun-j-y.github.io","root":"/"},"pages":[{"title":"","date":"2020-12-05T09:51:05.524Z","updated":"2020-12-05T09:51:05.524Z","comments":true,"path":"404-v.html","permalink":"https://sun-j-y.github.io/404-v.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误该地址已被删除"},{"title":"","date":"2020-11-06T11:17:47.132Z","updated":"2020-11-06T11:17:47.132Z","comments":true,"path":"404.html","permalink":"https://sun-j-y.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-11-06T11:13:48.917Z","updated":"2020-11-06T11:13:48.917Z","comments":true,"path":"about/index.html","permalink":"https://sun-j-y.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有分类","date":"2020-11-23T04:40:33.962Z","updated":"2020-11-23T04:40:33.962Z","comments":true,"path":"categories/index.html","permalink":"https://sun-j-y.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.824Z","updated":"2020-11-09T04:27:34.824Z","comments":true,"path":"contributors/index.html","permalink":"https://sun-j-y.github.io/contributors/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.827Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"examples/index.html","permalink":"https://sun-j-y.github.io/examples/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-11-23T11:07:01.767Z","updated":"2020-11-23T11:07:01.767Z","comments":true,"path":"friends/index.html","permalink":"https://sun-j-y.github.io/friends/index.html","excerpt":"这是这个页面的简介","text":"这是这个页面的简介 交换双方的链接, 请通过邮箱联系请提供: 名称、头像、链接、截图、关键词、描述"},{"title":"","date":"2020-11-09T04:27:36.679Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"faqs/index.html","permalink":"https://sun-j-y.github.io/faqs/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-06T11:15:08.448Z","updated":"2020-11-06T11:15:08.448Z","comments":true,"path":"mylist/index.html","permalink":"https://sun-j-y.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-23T04:49:26.672Z","updated":"2020-11-23T04:49:26.672Z","comments":true,"path":"tags/index.html","permalink":"https://sun-j-y.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL中添加唯一约束和联合唯一约束","slug":"MySQL/MySQL中添加唯一约束和联合唯一约束","date":"2020-12-07T12:56:14.000Z","updated":"2020-12-07T12:56:29.363Z","comments":true,"path":"2020/12/07/MySQL/MySQL中添加唯一约束和联合唯一约束/","link":"","permalink":"https://sun-j-y.github.io/2020/12/07/MySQL/MySQL%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F%E5%92%8C%E8%81%94%E5%90%88%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F/","excerpt":"","text":"在MySQL数据库中，经常会碰到由于业务需要添加唯一键约束，唯一键约束，可以在一个列上添加约束，也可以在多个列上添加唯一约束。 一、单列唯一约束在一列上添加唯一约束，主要是让该列在表中只能有唯一的一行，例如注册邮箱时的邮箱名、手机号等信息，相关操作如下： -- 1.建表时加上唯一性约束： CREATE TABLE `t_user` ( `Id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(18) NOT NULL unique, `password` varchar(18) NOT NULL, PRIMARY KEY (`Id`) ) ENGINE=InnoDB AUTO_INCREMENT=1018 DEFAULT CHARSET=gbk; 2.给已经建好的表加上唯一性约束： ALTER TABLE `t_user` ADD unique(`username`); 或者： create unique index UserNameIndex on 't_user' ('username'); 二、多列联合唯一约束如果业务中要求两个字符联合起了是唯一的，比如“地址”+“名称”是唯一的，这就需要对两列，甚至多列添加联合唯一约束，具体命令如下： 1.确认表结构 mysql> show create table jw_resource; FIELD TYPE COLLATION NULL KEY DEFAULT Extra PRIVILEGES COMMENT ------------- ------------ -------------- ------ ------ ------- -------------- -------------------- ------- id BIGINT(20) (NULL) NO PRI (NULL) AUTO_INCREMENT SELECT,INSERT,UPDATE resource_name VARCHAR(128) gbk_chinese_ci YES (NULL) SELECT,INSERT,UPDATE resource_type TINYINT(4) (NULL) YES (NULL) SELECT,INSERT,UPDATE 2.给resource_name和resource_type添加联合唯一约束： mysql> show index from jw_resource; mysql> ALTER TABLE jw_resource ADD UNIQUE KEY(resource_name, resource_type); 3.确认表结构添加约束后结果： mysql> show create table jw_resource; CREATE TABLE `jw_resource` ( `id` BIGINT(20) NOT NULL AUTO_INCREMENT, `resource_name` VARCHAR(128) DEFAULT NULL, `resource_type` TINYINT(4) DEFAULT NULL, PRIMARY KEY (`id`), **UNIQUE KEY `resource_name` (`resource_name`,`resource_type`)** ) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=gbk; mysql> show index from jw_resource; \\注意：**唯一键约束添加后，在建表的元数据中，默认的唯一键约束名称为第一列的名称。 4.添加约束后，进行插入测试效果： msyql> INSERT INTO `jw_resource`(`resource_name`,'resource_type') values('aa','11'); msyql> INSERT INTO `jw_resource`(`resource_name`,'resource_type') values('aa','22'); msyql> INSERT INTO `jw_resource`(`resource_name`,'resource_type') values('bb','11'); msyql> INSERT INTO `jw_resource`(`resource_name`,'resource_type') values('aa','11'); 5.删除唯一约束 mysql> **ALTER TABLE jw_resource DROP INDEX `resource_name`; mysql> show index from jw_resource; \\注意：**唯一键约束添加后，实际上建立了一个索引，将该索引删除后，就等于删除了联合唯一约束。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/tags/MySQL/"},{"name":"MySQL入门","slug":"MySQL入门","permalink":"https://sun-j-y.github.io/tags/MySQL%E5%85%A5%E9%97%A8/"}]},{"title":"MySQL修改表结构","slug":"MySQL/MySQL修改表结构","date":"2020-12-07T12:54:17.000Z","updated":"2020-12-07T12:55:47.081Z","comments":true,"path":"2020/12/07/MySQL/MySQL修改表结构/","link":"","permalink":"https://sun-j-y.github.io/2020/12/07/MySQL/MySQL%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"使用ALTER TABLE修改表结构 1) 修改表名称ALTER TABLE &lt;表名&gt; RENAME &lt;新表名&gt; mysql&gt; ALTER TABLE game_account RENAME account: 2) 修改表的存储引擎mysql&gt; ALTER TABLE account ENGINE=MyISAM; 3) 添加字段ALTER TABLE &lt;表名&gt; ADD &lt;字段名称&gt; &lt;字段定义&gt; mysql&gt; ALTER TABLE account ADD Account_gender ENUM(“M”,”F”) NOT NULL; mysql&gt; ALTER TABLE account ADD Game_zone VARCHAR(20) NOT NULL DEFAULT “HuaBei” FIRST; mysql&gt; ALTER TABLE account ADD Account_money BIGINT AFTER Account_level; 4) 删除字段ALTER TABLE &lt;表名&gt; DROP &lt;字段名称&gt; mysql&gt; ALTER TABLE account DROP Account_role ; 5) 修改字段名称及字段定义ALTER TABLE &lt;表名&gt; CHANGE &lt;旧字段名称&gt; &lt;新字段名称&gt; &lt;字段定义&gt; mysql&gt; ALTER TABLE account CHANGE Account_password password CHAR(25) NOT NULL; mysql&gt; ALTER TABLE account CHANGE password password VARCHAR(60) ; 6) 修改字段定义ALTER TABLE &lt;表名&gt; MODIFY &lt;字段名称&gt; &lt;字段定义&gt; mysql&gt; ALTER TABLE account MODIFY Account_name VARCHAR(20) NOT NULL;","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/tags/MySQL/"},{"name":"MySQL入门","slug":"MySQL入门","permalink":"https://sun-j-y.github.io/tags/MySQL%E5%85%A5%E9%97%A8/"}]},{"title":"MySQL创建用户与授权","slug":"MySQL/MySQL创建用户与授权","date":"2020-12-07T12:53:04.000Z","updated":"2020-12-07T12:53:45.085Z","comments":true,"path":"2020/12/07/MySQL/MySQL创建用户与授权/","link":"","permalink":"https://sun-j-y.github.io/2020/12/07/MySQL/MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/","excerpt":"","text":"MySQL创建用户与授权一. 创建用户**命令: ** CREATE USER 'username'@'host' IDENTIFIED BY 'password'; **说明: ** username：你将创建的用户名 host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符% password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器 **例子: ** CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456'; CREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456'; CREATE USER 'pig'@'%' IDENTIFIED BY '123456'; CREATE USER 'pig'@'%' IDENTIFIED BY ''; CREATE USER 'pig'@'%'; 二. 授权:命令:GRANT privileges ON databasename.tablename TO 'username'@'host' 说明: privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL databasename：数据库名 tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.* 例子:GRANT SELECT, INSERT ON test.user TO 'pig'@'%'; GRANT ALL ON *.* TO 'pig'@'%'; 注意:用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令: GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION; 三.设置与更改用户密码命令:SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword'); 如果是当前登陆用户用: SET PASSWORD = PASSWORD(\"newpassword\"); 例子:SET PASSWORD FOR 'pig'@'%' = PASSWORD(\"123456\"); 四. 撤销用户权限命令:REVOKE privilege ON databasename.tablename FROM 'username'@'host'; 说明:privilege, databasename, tablename：同授权部分 例子:REVOKE SELECT ON *.* FROM 'pig'@'%'; 注意:假如你在给用户&#39;pig&#39;@&#39;%&#39;授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO &#39;pig&#39;@&#39;%&#39;，则在使用REVOKE SELECT ON *.* FROM &#39;pig&#39;@&#39;%&#39;;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON *.* TO &#39;pig&#39;@&#39;%&#39;;则REVOKE SELECT ON test.user FROM &#39;pig&#39;@&#39;%&#39;;命令也不能撤销该用户对test数据库中user表的Select权限。 具体信息可以用命令SHOW GRANTS FOR &#39;pig&#39;@&#39;%&#39;; 查看。 五.删除用户命令:DROP USER 'username'@'host';","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/categories/MySQL/"},{"name":"用户管理","slug":"MySQL/用户管理","permalink":"https://sun-j-y.github.io/categories/MySQL/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/tags/MySQL/"},{"name":"用户管理","slug":"用户管理","permalink":"https://sun-j-y.github.io/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"}]},{"title":"Linux常用命令","slug":"Linux/Linux基础/Linux常用命令","date":"2020-12-07T12:14:23.000Z","updated":"2020-12-07T12:14:32.247Z","comments":true,"path":"2020/12/07/Linux/Linux基础/Linux常用命令/","link":"","permalink":"https://sun-j-y.github.io/2020/12/07/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"本篇内容是对[Linux入门系列]中未涉及到的部分常用命令的补充 网络相关wgetwget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。 语法： wget(选项)(参数) 选项： -a&lt;日志文件&gt;：在指定的日志文件中记录资料的执行过程；-A&lt;后缀名&gt;：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；-b：进行后台的方式运行wget；-B&lt;连接地址&gt;：设置参考的连接地址的基地地址；-c：继续执行上次终端的任务；-C&lt;标志&gt;：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；-d：调试模式运行指令；-D&lt;域名列表&gt;：设置顺着的域名列表，域名之间用“，”分隔；-e&lt;指令&gt;：作为文件“.wgetrc”中的一部分执行指定的指令；-h：显示指令帮助信息；-i&lt;文件&gt;：从指定文件获取要下载的URL地址；-l&lt;目录列表&gt;：设置顺着的目录列表，多个目录用“，”分隔；-L：仅顺着关联的连接；-r：递归下载方式；-nc：文件存在时，下载文件不覆盖原有文件；-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；-q：不显示指令执行过程；-nh：不查询主机名称；-v：显示详细执行过程；-V：显示版本信息；–passive-ftp：使用被动模式PASV连接FTP服务器；–follow-ftp：从HTML文件中下载FTP连接文件。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"}]},{"title":"Linux入门 进程管理","slug":"Linux/Linux基础/Linux入门 进程管理","date":"2020-12-05T09:01:46.000Z","updated":"2020-12-07T12:11:20.053Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux入门 进程管理/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/","excerpt":"","text":"进程管理什么是进程 在Linux中，每个程序都有一个进程，每一个进程都有一个id号 每一个进程都会有一个父进程 进程可以有两种存在方式（前台/后台） 一般的话，服务都是在后台运行，基本的程序都是在前台运行 常用命令ps 查看正在运行的进程语法： ps [-...] 选项： -a：向是所有正在运行的进程 -u：以用户分组 -x：显示后台运行进程的参数 例: # ps -aux 查看所有的进程 ps -aux | grep # | 在Linux中叫做管道符 A|B 将A命令的结果作为B命令的参数(输入) # grep 查早文件中符合条件的字符串 # 还有另一个命令比较常见 ps -ef | grep [字符串] # 这个命令可以查看到父进程的信息 # 不过还是ps -aux更常见一些 # 查看父进程一般可以通过目录树结构 pstree -p 显示父id kill 杀掉进程kill -9 [进程id] # -9 为固定参数,表示强制杀掉进程","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"},{"name":"进程管理","slug":"进程管理","permalink":"https://sun-j-y.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"}]},{"title":"Linux入门 磁盘管理","slug":"Linux/Linux基础/Linux入门 磁盘管理","date":"2020-12-05T08:16:08.000Z","updated":"2020-12-07T12:11:16.008Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux入门 磁盘管理/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/","excerpt":"","text":"磁盘管理 概述 Linux磁盘管理好坏直接关系到整个系统的性能问题。 Linux磁盘管理常用命令为 df、du。 df ：列出文件系统的整体磁盘使用量 du：检查磁盘空间使用量 df 列出文件系统整体的磁盘使用量df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 语法： df [-ahikHTm] [目录或文件名] 选项与参数： -a：列出所有的文件系统，包括系统特有的 /proc 等文件系统； -k：以 KBytes 的容量显示各文件系统； -m：以 MBytes 的容量显示各文件系统； -h：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示； -H：以 M=1000K 取代 M=1024K 的进位方式； -T：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出； -i：不用硬盘容量，而以 inode 的数量来显示 测试： # 将系统内所有的文件系统列出来！ # 在 Linux 底下如果 df 没有加任何选项 # 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！ [root@kuangshen /]# df Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 889100 0 889100 0% /dev tmpfs 899460 704 898756 1% /dev/shm tmpfs 899460 496 898964 1% /run tmpfs 899460 0 899460 0% /sys/fs/cgroup /dev/vda1 41152812 6586736 32662368 17% / tmpfs 179896 0 179896 0% /run/user/0 # 将容量结果以易读的容量格式显示出来 [root@kuangshen /]# df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 869M 0 869M 0% /dev tmpfs 879M 708K 878M 1% /dev/shm tmpfs 879M 496K 878M 1% /run tmpfs 879M 0 879M 0% /sys/fs/cgroup /dev/vda1 40G 6.3G 32G 17% / tmpfs 176M 0 176M 0% /run/user/0 # 将系统内的所有特殊文件格式及名称都列出来 [root@kuangshen /]# df -aT Filesystem Type 1K-blocks Used Available Use% Mounted on sysfs sysfs 0 0 0 - /sys proc proc 0 0 0 - /proc devtmpfs devtmpfs 889100 0 889100 0% /dev securityfs securityfs 0 0 0 - /sys/kernel/security tmpfs tmpfs 899460 708 898752 1% /dev/shm devpts devpts 0 0 0 - /dev/pts tmpfs tmpfs 899460 496 898964 1% /run tmpfs tmpfs 899460 0 899460 0% /sys/fs/cgroup cgroup cgroup 0 0 0 -/sys/fs/cgroup/systemd pstore pstore 0 0 0 - /sys/fs/pstore cgroup cgroup 0 0 0 -/sys/fs/cgroup/freezer cgroup cgroup 0 0 0 -/sys/fs/cgroup/cpuset cgroup cgroup 0 0 0 -/sys/fs/cgroup/hugetlb cgroup cgroup 0 0 0 - /sys/fs/cgroup/blkio cgroup cgroup 0 0 0 -/sys/fs/cgroup/net_cls,net_prio cgroup cgroup 0 0 0 -/sys/fs/cgroup/memory cgroup cgroup 0 0 0 - /sys/fs/cgroup/pids cgroup cgroup 0 0 0 -/sys/fs/cgroup/cpu,cpuacct cgroup cgroup 0 0 0 -/sys/fs/cgroup/devices cgroup cgroup 0 0 0 -/sys/fs/cgroup/perf_event configfs configfs 0 0 0 - /sys/kernel/config /dev/vda1 ext4 41152812 6586748 32662356 17% / systemd-1 - - - - -/proc/sys/fs/binfmt_misc mqueue mqueue 0 0 0 - /dev/mqueue debugfs debugfs 0 0 0 - /sys/kernel/debug hugetlbfs hugetlbfs 0 0 0 - /dev/hugepages tmpfs tmpfs 179896 0 179896 0% /run/user/0 binfmt_misc binfmt_misc 0 0 0 -/proc/sys/fs/binfmt_misc # 将 /etc 底下的可用的磁盘容量以易读的容量格式显示 [root@kuangshen /]# df -h /etc Filesystem Size Used Avail Use% Mounted on /dev/vda1 40G 6.3G 32G 17% / du 检查磁盘空间使用量Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。 语法： du [-ahskm] 文件或目录名称 选项与参数： -a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。 -h ：以人们较易读的容量格式 (G/M) 显示； -s ：列出总量而已，而不列出每个各别的目录占用容量； -S ：不包括子目录下的总计，与 -s 有点差别。 -k ：以 KBytes 列出容量显示； -m ：以 MBytes 列出容量显示； 测试： # 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）: # 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。 [root@kuangshen home]# du 16./redis 8./www/.oracle_jre_usage # 包括隐藏文件的目录 24./www 48. # 这个目录(.)所占用的总量 # 将文件的容量也列出来 [root@kuangshen home]# du -a 4./redis/.bash_profile 4./redis/.bash_logout ....中间省略.... 4./kuangstudy.txt # 有文件的列表了 48. # 检查根目录底下每个目录所占用的容量 [root@kuangshen home]# du -sm /* 0/bin 146/boot .....中间省略.... 0/proc .....中间省略.... 1/tmp 3026/usr # 系统初期最大就是他了啦！ 513/var 2666/www 通配符 * 来代表每个目录。 与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。 mount 磁盘挂载与卸除根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载” Linux 的磁盘挂载使用mount命令，卸载使用umount命令。 磁盘挂载语法： mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 一般外部设备都在/dev目录下，挂载到/mnt目录 例： # 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！ [root@www ~]# mkdir /mnt/hdc6 [root@www ~]# mount /dev/hdc6 /mnt/hdc6 [root@www ~]# df Filesystem 1K-blocks Used Available Use% Mounted on /dev/hdc6 1976312 42072 1833836 3% /mnt/hdc6 磁盘卸载命令 umount 语法： umount [-fn] 装置文件名或挂载点 选项与参数： -f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下； -n ：不升级 /etc/mtab 情况下卸除。 卸载/dev/hdc6 [root@www ~]# umount /dev/hdc6","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"},{"name":"磁盘管理","slug":"磁盘管理","permalink":"https://sun-j-y.github.io/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"}]},{"title":"Linux更新源","slug":"Linux/Linux基础/Linux更新源","date":"2020-12-05T08:15:35.000Z","updated":"2020-12-05T08:15:47.344Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux更新源/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E6%9B%B4%E6%96%B0%E6%BA%90/","excerpt":"","text":"为什么要换源 大多数官方源的服务器都在国外so… 设置更新源镜像Ubuntu配置文件位置： /etc/apt # 修改配置文件前建议先备份文件 CentOSyum包管理器的配置文件位置 /etc/yum.repos.d/CentOS-Base.repo 通过安装脚本cd /etc/yum.repos.d/ # 修改配置文件前建议先备份文件 cp CentOS-Base.repo CentOS-Base.repo.bar # 下载163镜像源配置文件 wget http://mirrors.163.com/.help/CentOS7-Base-163.repo # 重新生成缓存 yum clean all yum makecache 各大系统常见更新源Ubuntu 18.04阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 中科大源deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse 163源deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse 清华源deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse CentOS 7并没有…123","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"}]},{"title":"Vim配置","slug":"Linux/Vim/Vim配置","date":"2020-12-05T07:55:55.000Z","updated":"2020-12-05T07:57:27.869Z","comments":true,"path":"2020/12/05/Linux/Vim/Vim配置/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Vim/Vim%E9%85%8D%E7%BD%AE/","excerpt":"","text":"vim配置vim配置文件 ~/.vimrc 注释格式为 ：” 注释内容 vimrc可用参数:显示相关\"set shortmess=atI \" 启动的时候不显示那个援助乌干达儿童的提示 \"winpos 5 5 \" 设定窗口位置 \"set lines=40 columns=155 \" 设定窗口大小 \"set nu \" 显示行号 set go= \" 不要图形按钮 \"color asmanian2 \" 设置背景主题 set guifont=Courier_New:h10:cANSI \" 设置字体 \"syntax on \" 语法高亮 autocmd InsertLeave * se nocul \" 用浅色高亮当前行 autocmd InsertEnter * se cul \" 用浅色高亮当前行 \"set ruler \" 显示标尺 set showcmd \" 输入的命令显示出来，看的清楚些 \"set cmdheight=1 \" 命令行（在状态行下）的高度，设置为1 \"set whichwrap+=&lt;,>,h,l \" 允许backspace和光标键跨越行边界(不建议) \"set scrolloff=3 \" 光标移动到buffer的顶部和底部时保持3行距离 set novisualbell \" 不要闪烁(不明白) set statusline=%F%m%r%h%w\\ [FORMAT=%&#123;&amp;ff&#125;]\\ [TYPE=%Y]\\ [POS=%l,%v][%p%%]\\ %&#123;strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")&#125; \"状态行显示的内容 set laststatus=1 \" 启动显示状态行(1),总是显示状态行(2) set foldenable \" 允许折叠 set foldmethod=manual \" 手动折叠 \"set background=dark \"背景使用黑色 set nocompatible \"去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 \" 显示中文帮助 if version >= 603 set helplang=cn set encoding=utf-8 endif \" 设置配色方案 \"colorscheme murphy \"字体 \"if (has(\"gui_running\")) \" set guifont=Bitstream\\ Vera\\ Sans\\ Mono\\ 10 \"endif set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936 set termencoding=utf-8 set encoding=utf-8 set fileencodings=ucs-bom,utf-8,cp936 set fileencoding=utf-8 新文件标题\"新建.c,.h,.sh,.java文件，自动插入文件头 autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \"\"定义函数SetTitle，自动插入文件头 func SetTitle() \"如果文件类型为.sh文件 if &amp;filetype == 'sh' call setline(1,\"\\#########################################################################\") call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) call append(line(\".\")+1, \"\\# Author: ma6174\") call append(line(\".\")+2, \"\\# mail: ma6174@163.com\") call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\")) call append(line(\".\")+4, \"\\#########################################################################\") call append(line(\".\")+5, \"\\#!/bin/bash\") call append(line(\".\")+6, \"\") else call setline(1, \"/*************************************************************************\") call append(line(\".\"), \" > File Name: \".expand(\"%\")) call append(line(\".\")+1, \" > Author: ma6174\") call append(line(\".\")+2, \" > Mail: ma6174@163.com \") call append(line(\".\")+3, \" > Created Time: \".strftime(\"%c\")) call append(line(\".\")+4, \" ***********************************************************************/\") call append(line(\".\")+5, \"\") endif if &amp;filetype == 'cpp' call append(line(\".\")+6, \"#include&lt;iostream>\") call append(line(\".\")+7, \"using namespace std;\") call append(line(\".\")+8, \"\") endif if &amp;filetype == 'c' call append(line(\".\")+6, \"#include&lt;stdio.h>\") call append(line(\".\")+7, \"\") endif \"新建文件后，自动定位到文件末尾 autocmd BufNewFile * normal G endfunc 键盘命令nmap &lt;leader>w :w!&lt;cr> nmap &lt;leader>f :find&lt;cr> \" 映射全选+复制 ctrl+a map &lt;C-A> ggVGY map! &lt;C-A> &lt;Esc>ggVGY map &lt;F12> gg=G \" 选中状态下 Ctrl+c 复制 vmap &lt;C-c> \"+y \" 去空行 nnoremap &lt;F2> :g/^\\s*$/d&lt;CR> \" 比较文件 nnoremap &lt;C-F2> :vert diffsplit \" 新建标签 map &lt;M-F2> :tabnew&lt;CR> \"列出当前目录文件 map &lt;F3> :tabnew .&lt;CR> \"打开树状文件目录 map &lt;C-F3> \\be \"C，C++ 按F5编译运行 map &lt;F5> :call CompileRunGcc()&lt;CR> func! CompileRunGcc() exec \"w\" if &amp;filetype == 'c' exec \"!g++ % -o %&lt;\" exec \"! ./%&lt;\" elseif &amp;filetype == 'cpp' exec \"!g++ % -o %&lt;\" exec \"! ./%&lt;\" elseif &amp;filetype == 'java' exec \"!javac %\" exec \"!java %&lt;\" elseif &amp;filetype == 'sh' :!./% endif endfunc \"C,C++的调试 map &lt;F8> :call Rungdb()&lt;CR> func! Rungdb() exec \"w\" exec \"!g++ % -g -o %&lt;\" exec \"!gdb ./%&lt;\" endfunc 实用设置\" 设置当文件被改动时自动载入 set autoread \" quickfix模式 autocmd FileType c,cpp map &lt;buffer> &lt;leader>&lt;space> :w&lt;cr>:make&lt;cr> \"代码补全 set completeopt=preview,menu \"允许插件 filetype plugin on \"共享剪贴板 set clipboard+=unnamed \"从不备份 set nobackup \"make 运行 :set makeprg=g++\\ -Wall\\ \\ % \"自动保存 set autowrite set ruler \" 打开状态栏标尺 set cursorline \" 突出显示当前行 set magic \" 设置魔术 set guioptions-=T \" 隐藏工具栏 set guioptions-=m \" 隐藏菜单栏 \"set statusline=\\ %&lt;%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%&#123;&amp;fileformat&#125;\\ %&#123;&amp;encoding&#125;\\ %c:%l/%L%)\\ \" 设置在状态行显示的信息 set foldcolumn=0 set foldmethod=indent set foldlevel=3 set foldenable \" 开始折叠 \" 不要使用vi的键盘模式，而是vim自己的 set nocompatible \" 语法高亮 set syntax=on \" 去掉输入错误的提示声音 set noeb \" 在处理未保存或只读文件的时候，弹出确认 set confirm \" 自动缩进 set autoindent set cindent \" Tab键的宽度 set tabstop=4 \" 统一缩进为4 set softtabstop=4 set shiftwidth=4 \" 不要用空格代替制表符 set noexpandtab \" 在行和段开始处使用制表符 set smarttab \" 显示行号 set number \" 历史记录数 set history=1000 \"禁止生成临时文件 set nobackup set noswapfile \"搜索忽略大小写 set ignorecase \"搜索逐字符高亮 set hlsearch set incsearch \"行内替换 set gdefault \"编码设置 set enc=utf-8 set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936 \"语言设置 set langmenu=zh_CN.UTF-8 set helplang=cn \" 我的状态行显示的内容（包括文件类型和解码） \"set statusline=%F%m%r%h%w\\ [FORMAT=%&#123;&amp;ff&#125;]\\ [TYPE=%Y]\\ [POS=%l,%v][%p%%]\\ %&#123;strftime(\\\"%d/%m/%y\\ -\\ %H:%M\\\")&#125; \"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%] \" 总是显示状态行 set laststatus=2 \" 命令行（在状态行下）的高度，默认为1，这里是2 set cmdheight=2 \" 侦测文件类型 filetype on \" 载入文件类型插件 filetype plugin on \" 为特定文件类型载入相关缩进文件 filetype indent on \" 保存全局变量 set viminfo+=! \" 带有如下符号的单词不要被换行分割 set iskeyword+=_,$,@,%,#,- \" 字符间插入的像素行数目 set linespace=0 \" 增强模式中的命令行自动完成操作 set wildmenu \" 使回格键（backspace）正常处理indent, eol, start等 set backspace=2 \" 允许backspace和光标键跨越行边界 set whichwrap+=&lt;,>,h,l \" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） set mouse=a set selection=exclusive set selectmode=mouse,key \" 通过使用: commands命令，告诉我们文件的哪一行被改变过 set report=0 \" 在被分割的窗口间显示空白，便于阅读 set fillchars=vert:\\ ,stl:\\ ,stlnc:\\ \" 高亮显示匹配的括号 set showmatch \" 匹配括号高亮的时间（单位是十分之一秒） set matchtime=1 \" 光标移动到buffer的顶部和底部时保持3行距离 set scrolloff=3 \" 为C程序提供自动缩进 set smartindent \" 高亮显示普通txt文件（需要txt.vim脚本） au BufRead,BufNewFile * setfiletype txt \"自动补全 :inoremap ( ()&lt;ESC>i :inoremap ) &lt;c-r>=ClosePair(')')&lt;CR> :inoremap &#123; &#123;&lt;CR>&#125;&lt;ESC>O :inoremap &#125; &lt;c-r>=ClosePair('&#125;')&lt;CR> :inoremap [ []&lt;ESC>i :inoremap ] &lt;c-r>=ClosePair(']')&lt;CR> :inoremap \" \"\"&lt;ESC>i :inoremap ' ''&lt;ESC>i function! ClosePair(char) if getline('.')[col('.') - 1] == a:char return \"\\&lt;Right>\" else return a:char endif endfunction filetype plugin indent on \"打开文件类型检测, 加了这句才可以用智能补全 set completeopt=longest,menu CTags的设定let Tlist_Sort_Type = \"name\" \" 按照名称排序 let Tlist_Use_Right_Window = 1 \" 在右侧显示窗口 let Tlist_Compart_Format = 1 \" 压缩方式 let Tlist_Exist_OnlyWindow = 1 \" 如果只有一个buffer，kill窗口也kill掉buffer let Tlist_File_Fold_Auto_Close = 0 \" 不要关闭其他文件的tags let Tlist_Enable_Fold_Column = 0 \" 不要显示折叠树 autocmd FileType java set tags+=D:\\tools\\java\\tags \"autocmd FileType h,cpp,cc,c set tags+=D:\\tools\\cpp\\tags \"let Tlist_Show_One_File=1 \"不同时显示多个文件的tag，只显示当前文件的 \"设置tags set tags=tags \"set autochdir \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"其他东东 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"默认打开Taglist let Tlist_Auto_Open=1 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \" Tag list (ctags) \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" let Tlist_Ctags_Cmd = '/usr/bin/ctags' let Tlist_Show_One_File = 1 \"不同时显示多个文件的tag，只显示当前文件的 let Tlist_Exit_OnlyWindow = 1 \"如果taglist窗口是最后一个窗口，则退出vim let Tlist_Use_Right_Window = 1 \"在右侧窗口中显示taglist窗口 \" minibufexpl插件的一般设置 let g:miniBufExplMapWindowNavVim = 1 let g:miniBufExplMapWindowNavArrows = 1 let g:miniBufExplMapCTabSwitchBufs = 1 let g:miniBufExplModSelTarget = 1","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Vim","slug":"Vim","permalink":"https://sun-j-y.github.io/tags/Vim/"}]},{"title":"Linux常用工具的安装","slug":"Linux/Linux基础/Linux常用工具的安装","date":"2020-12-05T07:54:28.000Z","updated":"2020-12-05T07:54:36.815Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux常用工具的安装/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85/","excerpt":"","text":"jdk安装（rpm安装）1、rpm下载地址http://www.oracle.com/technetwork/java/javase/downloads/index.html 2、如果有安装openjdk 则卸载 [root@kuangshen ~]# java -version java version &quot;1.8.0_121&quot; Java(TM) SE Runtime Environment (build 1.8.0_121-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode) # 检查 [root@kuangshen ~]# rpm -qa|grep jdk jdk1.8.0_121-1.8.0_121-fcs.x86_64 # 卸载 -e --nodeps 强制删除 [root@kuangshen ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64 [root@kuangshen ~]# java -version -bash: &#x2F;usr&#x2F;bin&#x2F;java: No such file or directory # OK 3、安装JDK # 安装java rpm [root@kuangshen kuangshen]# rpm -ivh jdk-8u221-linux-x64.rpm # 安装完成后配置环境变量 文件：&#x2F;etc&#x2F;profile JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_221-amd64 CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib:%JAVA_HOME%&#x2F;jre&#x2F;lib PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;bin export PATH CLASSPATH JAVA_HOME # 保存退出 # 让新增的环境变量生效！ source &#x2F;etc&#x2F;profile # 测试 java -version [root@kuangshen java]# java -version java version &quot;1.8.0_221&quot; Java(TM) SE Runtime Environment (build 1.8.0_221-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode) Tomcat安装（解压缩安装）1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！ 2、将文件移动到/usr/tomcat/下，并解压！ [root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz &#x2F;usr [root@kuangshen kuangshen]# cd &#x2F;usr [root@kuangshen usr]# ls apache-tomcat-9.0.22.tar.gz [root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz # 解压 3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的 # 执行：startup.sh --&gt;启动tomcat # 执行：shutdown.sh --&gt;关闭tomcat .&#x2F;startup.sh .&#x2F;shutdown.sh 4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！ # 查看firewall服务状态 systemctl status firewalld # 开启、重启、关闭、firewalld.service服务 # 开启 service firewalld start # 重启 service firewalld restart # 关闭 service firewalld stop # 查看防火墙规则 firewall-cmd --list-all # 查看全部信息 firewall-cmd --list-ports # 只看端口信息 # 开启端口 开端口命令：firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent 重启防火墙：systemctl restart firewalld.service 命令含义： --zone #作用域 --add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议 --permanent #永久生效，没有此参数重启后失效 安装Docker（yum安装） 基于 CentOS 7 安装 官网安装参考手册：https://docs.docker.com/install/linux/docker-ce/centos/ 确定你是CentOS7及以上版本 [root@192 Desktop]# cat &#x2F;etc&#x2F;redhat-release CentOS Linux release 7.2.1511 (Core) yum安装gcc相关（需要确保 虚拟机可以上外网 ） yum -y install gcc yum -y install gcc-c++ 卸载旧版本 yum -y remove docker docker-common docker-selinux docker-engine # 官网版本 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 安装需要的软件包 yum install -y yum-utils device-mapper-persistent-data lvm2 设置stable镜像仓库 # 错误 yum-config-manager --add-repohttps:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 正确推荐使用国内的 yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo 更新yum软件包索引 yum makecache fast 安装Docker CE yum -y install docker-ce docker-ce-cli containerd.io 启动docker systemctl start docker 测试 docker version docker run hello-world docker images","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"工具","slug":"工具","permalink":"https://sun-j-y.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Linux常用软件的安装","slug":"Linux/Linux基础/Linux常用软件的安装","date":"2020-12-05T07:54:28.000Z","updated":"2020-12-07T12:40:26.380Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux常用软件的安装/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/","excerpt":"","text":"安装软件一般有3种方式 rpm包安装（下载适用于当前操作系统的安装包，通过相应的包管理工具安装） yum在线安装 解压缩安装 JDK安装检查是否安装有openjdk，如果有则卸载：TODO 待更新 [root@localhost ~]# java -version java version \"1.8.0_271\" Java(TM) SE Runtime Environment (build 1.8.0_271-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode) # 检查 [root@localhost ~]# rpm -qa | grep jdk jdk1.8-1.8.0_271-fcs.x86_64 # 卸载 -e --nodeps 强制删除 [root@localhost ~]# rpm -e --nodeps jdk1.8-1.8.0_271-fcs.x86_64 [root@localhost ~]# java -version -bash: /usr/bin/java: No such file or directory # 卸载成功 rpm安装1、jdk8 rpm下载地址https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html # 进入官网下载适合的rpm包并上传进服务器，或执行如下命令 [root@localhost home]# wget https://download.oracle.com/otn/java/jdk/8u271-b09/61ae65e088624f5aaa0b1d2d801acb16/jdk-8u271-linux-x64.rpm # 最终会得到如下文件 [root@localhost k]# ls jdk-8u271-linux-x64.rpm 3、安装JDK # 安装java rpm [root@localhost k]# rpm -ivh jdk-8u271-linux-x64.rpm # 安装完成后 jdk位于 /usr/java 目录下 # 配置java环境变量, 考虑到以后可能会安装多个jdk版本,为了切换更方便一些,进行如下配置 JAVA_HOME8=/usr/java/jdk1.8.0_271-amd64 JAVA_HOME=%JAVA_HOME8% CLASSPASS=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin export PATH CLASSPATH JAVA_HOME # 保存退出 # 让新增的环境变量生效！ source /etc/profile # 测试 java -version [root@localhost ~]# java -version java version \"1.8.0_271\" Java(TM) SE Runtime Environment (build 1.8.0_271-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode) Tomcat安装（解压缩安装）1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！ 2、将文件移动到/usr/tomcat/下，并解压！ [root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz /usr [root@kuangshen kuangshen]# cd /usr [root@kuangshen usr]# ls apache-tomcat-9.0.22.tar.gz [root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz # 解压 3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的 # 执行：startup.sh --&gt;启动tomcat # 执行：shutdown.sh --&gt;关闭tomcat .&#x2F;startup.sh .&#x2F;shutdown.sh 4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！ # 查看firewall服务状态 systemctl status firewalld # 开启、重启、关闭、firewalld.service服务 # 开启 service firewalld start # 重启 service firewalld restart # 关闭 service firewalld stop # 查看防火墙规则 firewall-cmd --list-all # 查看全部信息 firewall-cmd --list-ports # 只看端口信息 # 开启端口 开端口命令：firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent 重启防火墙：systemctl restart firewalld.service 命令含义： --zone #作用域 --add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议 --permanent #永久生效，没有此参数重启后失效 安装Docker（yum安装） 基于 CentOS 7 安装 官网安装参考手册：https://docs.docker.com/install/linux/docker-ce/centos/ 确定你是CentOS7及以上版本 [root@192 Desktop]# cat /etc/redhat-release CentOS Linux release 7.2.1511 (Core) yum安装gcc相关（需要确保 虚拟机可以上外网 ） yum -y install gcc yum -y install gcc-c++ 卸载旧版本 yum -y remove docker docker-common docker-selinux docker-engine # 官网版本 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 安装需要的软件包 yum install -y yum-utils device-mapper-persistent-data lvm2 设置stable镜像仓库 # 错误 yum-config-manager --add-repohttps:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 正确推荐使用国内的 yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo 更新yum软件包索引 yum makecache fast 安装Docker CE yum -y install docker-ce docker-ce-cli containerd.io 启动docker systemctl start docker 测试 docker version docker run hello-world docker images","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"工具","slug":"工具","permalink":"https://sun-j-y.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Linux入门 Passwd和group文件","slug":"Linux/Linux基础/Linux入门 passwd和group文件","date":"2020-12-05T07:46:06.000Z","updated":"2020-12-05T07:50:03.963Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux入门 passwd和group文件/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20passwd%E5%92%8Cgroup%E6%96%87%E4%BB%B6/","excerpt":"","text":"前言完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。 与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd， /etc/shadow，/etc/group等。 下面将分别介绍这些文件的内容。 /etc/passwd/etc/passwd文件是用户管理工作涉及的最重要的一个文件。 Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。 这个文件对所有用户都是可读的。它的内容类似下面的例子： [root@bogon ~]# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin games:x:12:100:games:/usr/games:/sbin/nologin ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin nobody:x:99:99:Nobody:/:/sbin/nologin systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin dbus:x:81:81:System message bus:/:/sbin/nologin polkitd:x:999:998:User for polkitd:/:/sbin/nologin sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin postfix:x:89:89::/var/spool/postfix:/sbin/nologin chrony:x:998:996::/var/lib/chrony:/sbin/nologin 从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下： 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell “用户名”是代表用户账号的字符串。 通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。 为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。 “口令”一些系统中，存放着加密后的用户口令字。 虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。 “用户标识号”是一个整数，系统内部用它来标识用户。 一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。 通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。 “组标识号”字段记录的是用户所属的用户组。 它对应着/etc/group文件中的一条记录。 5)“注释性描述”字段记录着用户的一些个人情况。 例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。 6)“主目录”，也就是用户的起始工作目录。 它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。 7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。 Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。 系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。 用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。 利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。 8)系统中有一类用户称为伪用户（pseudo users）。 这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。 常见的伪用户如下所示： 伪 用 户 含 义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有帐户文件 uucp UUCP使用 lp lp或lpd子系统使用 nobody NFS使用 /etc/shadow 1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。 由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。 2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生 它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是： 登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 “登录名”是与/etc/passwd文件中的登录名相一致的用户账号 “口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。 “最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。 “最小时间间隔”指的是两次修改口令之间所需的最小天数。 “最大时间间隔”指的是口令保持有效的最大天数。 “警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。 “不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。 “失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。 /etc/group 用户组的所有信息都存放在/etc/group文件中。 将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。 每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。 当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。 用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。 用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有： 组名:口令:组标识号:组内用户列表 “组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。 “口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。 “组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。 “组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"}]},{"title":"Linux入门 系统管理","slug":"Linux/Linux基础/Linux入门 系统管理","date":"2020-12-05T06:03:09.000Z","updated":"2020-12-05T06:22:46.134Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux入门 系统管理/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/","excerpt":"","text":"主机相关hostname 主机名称# hostname查看主机名称 [root@VM-8-16-centos ~]# hostname VM-8-16-centos # hostname修改主机名称 [root@VM-8-16-centos ~]# hostname sforits # 修改过后，需要重新连接或重启才能看到效果 TODO","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"},{"name":"系统管理","slug":"系统管理","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"}]},{"title":"Linux入门 系统管理","slug":"Linux/Linux基础/Linux基础 系统管理","date":"2020-12-05T06:03:09.000Z","updated":"2020-12-05T08:13:40.555Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux基础 系统管理/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%9F%BA%E7%A1%80%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/","excerpt":"","text":"主机相关hostname 主机名称# hostname查看主机名称 [root@VM-8-16-centos ~]# hostname VM-8-16-centos # hostname修改主机名称 [root@VM-8-16-centos ~]# hostname sforits # 修改过后，需要重新连接或重启才能看到效果 TODO","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"},{"name":"系统管理","slug":"系统管理","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"}]},{"title":"Linux入门 用户管理","slug":"Linux/Linux基础/Linux入门 用户管理","date":"2020-12-05T05:15:17.000Z","updated":"2020-12-07T12:11:31.242Z","comments":true,"path":"2020/12/05/Linux/Linux基础/Linux入门 用户管理/","link":"","permalink":"https://sun-j-y.github.io/2020/12/05/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"扩展：用户管理相关文件 前言Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。 用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。 每个用户账号都拥有一个唯一的用户名和各自的口令（密码）。 用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。 实现用户账号的管理，要完成的工作主要有如下几个方面： 用户账号的添加、删除与修改。 用户口令的管理。 用户组的管理。 用户管理用户的增加、删除和修改实际上就是对/etc/passwd文件的更新。 用户账号的管理用户账号的管理工作主要涉及到用户账号的添加、修改和删除。 添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。 添加账号 useradduseradd 选项 用户名 参数说明： 选项 : -m：自动创建用户主目录（默认为/home/[用户名]） -c： comment 指定一段注释性描述。 -d：目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。 -g：用户组 指定用户所属的用户组。 -G：用户组，用户组 指定用户所属的附加组。 -s：Shell文件 指定用户的登录Shell。 -u：用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。 用户名 : 指定新账号的登录名。 测试： # 创建一个用户kuangshen，其中-m选项用来为用户kuangshen创建一个主目录 /home/kuangshen [root@bogon ~]# useradd -m kuangshen 增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。 删除用户如果一个用户的账号不再使用，可以从系统中删除。 删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。 删除一个已有的用户账号使用userdel命令，其格式如下： userdel 选项 用户名 选项： -r：删除用户主目录 常用的选项是 -r，它的作用是把用户的主目录一起删除。 # 删除刚才创建的用户kuangshen [root@bogon home]# userdel -r kuangshen 此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。 修改帐号修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。 修改已有用户的信息使用usermod命令，其格式如下： usermod 选项 用户名 常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。 例如： usermod -s /bin/ksh -d /home/z –g developer kuang 此命令将用户kuang的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。 Linux下如何切换用户命令 # 切换到指定用户, 用户名为空则默认切换root用户 su 用户名 从普通用户切换到root用户，还可以使用命令：sudo su 3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令 4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】 $表示普通用户 #表示超级用户，也就是root用户 用户口令的管理用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。 指定和修改用户口令的Shell命令是passwd。 超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。 命令的格式为： passwd 选项 用户名 可使用的选项： -l：锁定口令，即禁用账号。 -u：口令解锁。 -d：使账号无口令。 -f：强迫用户下次登录时修改口令。 如果默认用户名，则修改当前用户的口令。需要注意的是在Linux终端输入密码是默认不显示的 例如，假设当前用户是kuang，则下面的命令修改该用户自己的口令： passwd Old password:****** New password:******* Re-enter new password:******* 如果是超级用户，可以用下列形式指定任何用户的口令： passwd kuang New password:******* Re-enter new password:******* 普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。 为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。 锁定账户为用户指定空口令时，即删除用户密码： passwd -d 用户名 使用passwd -l锁定用户： passwd -l 用户名 以上两种方式都会造成该用户无法登录系统 用户组管理每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。 用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。 增加一个新的用户组 groupaddgroupadd 选项 用户组 可以使用的选项有： -g：GID 指定新用户组的组标识号（GID）。 -o：一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。 例1： groupadd testgroup 此命令向系统中增加了一个新组tsetgroup，新组的组标识号是在当前已有的最大组标识号的基础上加1。 例2： groupadd -g 101 testgroup2 此命令向系统中增加了一个新组testgroup2，同时指定创建的用户组的组标识号是101。 删除一个已有的用户组 groupdelgroupdel 用户组名 例如： groupdel testgroup 此命令会从系统中删除用户组组testgroup。 修改用户组的属性 groupmodgroupmod 选项 用户组 常用的选项有： -g：GID 为用户组指定新的组标识号。 -o：与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。 -n：新用户组 将用户组的名字改为新名字 # 此命令将组group2的组标识号修改为102。 groupmod -g 102 group2 # 将组group2的标识号改为10000，组名修改为group3。 groupmod –g 10000 -n group3 group2 切换组如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。 用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如： newgrp [组名] 这条命令将当前用户切换到指定用户组，前提条件是指定用户组确实是该用户的主组或附加组。 /etc/passwd 完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。 与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。 下面分别介绍这些文件的内容。 /etc/passwd文件是用户管理工作涉及的最重要的一个文件。 Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。 这个文件对所有用户都是可读的。它的内容类似下面的例子： ＃ cat /etc/passwd root:x:0:0:Superuser:/: daemon:x:1:1:System daemons:/etc: bin:x:2:2:Owner of system commands:/bin: sys:x:3:3:Owner of system files:/usr/sys: adm:x:4:4:System accounting:/usr/adm: uucp:x:5:5:UUCP administrator:/usr/lib/uucp: auth:x:7:21:Authentication administrator:/tcb/files/auth: cron:x:9:16:Cron daemon:/usr/spool/cron: listen:x:37:4:Network daemon:/usr/net/nls: lp:x:71:18:Printer administrator:/usr/spool/lp: 从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下： 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell 1）”用户名”是代表用户账号的字符串。 通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。 为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。 2）“口令”一些系统中，存放着加密后的用户口令字。 虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。 3）“用户标识号”是一个整数，系统内部用它来标识用户。 一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。 通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。 4）“组标识号”字段记录的是用户所属的用户组。 它对应着/etc/group文件中的一条记录。 5)“注释性描述”字段记录着用户的一些个人情况。 例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。 6)“主目录”，也就是用户的起始工作目录。 它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。 7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。 Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。 系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。 用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。 利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。 8)系统中有一类用户称为伪用户（pseudo users）。 这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。 常见的伪用户如下所示： 伪 用 户 含 义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有帐户文件 uucp UUCP使用 lp lp或lpd子系统使用 nobody NFS使用 /etc/shadow 1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。 由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。 2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生 它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是： 登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 “登录名”是与/etc/passwd文件中的登录名相一致的用户账号 “口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。 “最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。 “最小时间间隔”指的是两次修改口令之间所需的最小天数。 “最大时间间隔”指的是口令保持有效的最大天数。 “警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。 “不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。 “失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。 /etc/group 用户组的所有信息都存放在/etc/group文件中。 将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。 每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。 当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。 用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。 用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有： 组名:口令:组标识号:组内用户列表 “组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。 “口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。 “组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。 “组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"用户管理","slug":"用户管理","permalink":"https://sun-j-y.github.io/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"}]},{"title":"Docker入门","slug":"Docker/Docker入门","date":"2020-12-03T02:35:19.000Z","updated":"2020-12-03T12:02:01.403Z","comments":true,"path":"2020/12/03/Docker/Docker入门/","link":"","permalink":"https://sun-j-y.github.io/2020/12/03/Docker/Docker%E5%85%A5%E9%97%A8/","excerpt":"","text":"Docker概述 来源：维基百科，自由的百科全书 原作者 Solomon Hykes 开发者 Docker, Inc. 初始版本 2013年3月13日 源代码库 github.com/docker/docker-ce 编程语言 Go 操作系统 Linux、Windows、macOS 系统平台 x86-64、ARM、s390x、ppc64le 类型 操作系统层虚拟化 许可协议 可执行档：免费增值软件即服务 源代码：Apache许可证 2.0 网站 www.docker.com Docker 是一个开放源代码软件，是一个开放平台，用于开发应用、交付（shipping）应用、运行应用。 Docker允许用户将基础设施（Infrastructure）中的应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件地速度。[1] Docker容器 与虚拟机类似，但原理上，容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。 容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。另外，Docker也为容器提供更强的业界的隔离兼容。[2] Docker 利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心名字空间（namespaces），来创建独立的容器（containers）。这可以在单一Linux实体下运作，避免引导一个虚拟机造成的额外负担[3]。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括行程树、网络、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、存储器、block I/O与网络。从0.9版本起，Dockers在使用抽象虚拟是经由libvirt的LXC与systemd - nspawn提供界面的基础上，开始包括libcontainer库做为以自己的方式开始直接使用由Linux核心提供的虚拟化的设施， 依据行业分析公司“451研究”：“Dockers是有能力打包应用程序及其虚拟容器，可以在任何Linux服务器上运行的依赖性工具，这有助于实现灵活性和便携性，应用程序在任何地方都可以运行，无论是公用云、私有云、单机等。” [4]。 安装Docker通过安装脚本 - 推荐 CentOS Docker 仅支持以下的 64 位 CentOS 版本： CentOS 7 CentOS 8 # 使用官方安装脚本安装 curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun # 使用国内 daocloud 一键安装命令 curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh 手动安装TODO: 待更新 启动Docker 如果使用dockers的 systemctl start docker Docker常用命令辅助命令docker --version # 版本信息 &#x3D; docker -v docker info # 详细信息 docker --help # 帮助 images 镜像命令# 查看本机中所有镜像 docker images # 列出本地所有镜像 -a # 列出所有镜像(包含中间映像层) -q # 只显示镜像id # 搜索镜像 docker search [options] 镜像名 # 去dockerhub上查询镜像 -s 指定值 # 列出收场数不少于指定值的镜像 --no-trunc # 显示完整镜像信息 # 从仓库下载镜像 docker pull 镜像名[:TAG|@DIGEST] # 下载镜像 # 删除镜像 docker rmi 镜像名 # 删除镜像 -f # 强制删除 Contrainer 容器命令基本命令(容器外操作)# 运行容器 docker run 镜像名 # 镜像名新建并启动容器 --name # 别名 为容器起一个名字 -d # 启动守护式容器(在后台启动容器) -p # 映射端口号:原始端口号 例: # 查看运行的容器 docker ps # 列出所有正在运行的容器 -a # 正在运行的和历史运行过的容器 -q # 静默模式, 只显示容器id # 停止|关闭|重启容器 docker start 容器名或id # 开启容器 docker restart 容器名或id # 重启容器 docker stop 容器名或id # 停止容器 docker kill 容器名或id # 关闭容器 # 删除容器 docker rm -f 容器名或id 例 docker rm -f $(docker ps -aq) # 删除所有容器 # 查看容器内进程 docker top 容器名或id # 查看容器内进程 # 产看容器内部细节 docker inspect 容器id # 产看容器内部细节 # 查看容器的运行日志 docker logs [options] 容器名或id # 查看容器的运行日志 -t # 加入时间戳 -f # 跟随最新的日志打印 进阶命令(容器内操作)# 进入容器内部 docker exec [options] 容器id 容器内命令 # 进入容器内执行命令 -i # 以交互模式运行容器,通常与-t一起使用 -t # 分配一个伪终端 # 容器内安装软件 apt-get update apt-get install 安装包名称 # 修改容器内文件 # 退出容器 exit # 退出容器 # 将容器打包为性的镜像 docker commit -a&#x3D;&quot;作者&quot; -m&#x3D;&quot;描述信息&quot; 容器id 目标镜像名称:TAG # 从容器中复制文件到宿主机目录中 docker cp 容器id:容器内资源路径 宿主机目录路径 # 将容器内资源拷贝到宿主机上 # 容器目录与宿主机目录同步 (数据卷 必须在运行容器时进行设置) docker run -it -v &#x2F;宿主机目录:&#x2F;容器目录:ro(只读) 镜像名 注: 宿主机目录必须是绝对目录,宿主机目录会覆盖容器目录内容 运行 docker inspect 容器id 检查json串里有没有如下内容, 有则证明挂载成功 &quot;Mounts&quot;:&#123; &#123; &quot;Type&quot;:&quot;bind&quot;, &quot;source&quot;:&quot;宿主机目录&quot;, &quot;Destination&quot;:&quot;容器目录&quot;, &quot;Mode&quot;:&quot;&quot;, &quot;RW&quot;:true, &quot;Propagation&quot;:&quot;rprivate&quot;, &#125; &#125; Docker file ​ DockerFile可以认为是**Docker镜像的描述文件, 是由一系列的命令和参数构成的 ‘脚本’ ** ​ 主要作用是用来构建docker镜像的构建文件 Dockerfile解析过程 Dockerfile保留命令 保留字 作用 FROM 当前镜像是基于哪个镜像的, 第一个指令必须是FROM RUN 构建镜像时需要运行的命令 MAINTAINER 镜像维护者的姓名和邮箱地址 (官方不再推荐使用 废弃) WORKDIR 指定咋创建容器后, 终端默认登录进来的工作目录, 一个落脚点 ENV 用来在构建容器过程中设置环境变量 ADD 将宿主机目录下的文件拷贝进镜像 且ADD命令会自动处理URL和解压tar包 COPY 类似ADD 拷贝文件和目录到镜像中将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置 VOLUME 容器数据卷 用于数据保存和持久化操作 CMD 指定一个容器启动时要运行的命令Dockerfile中可以有多个CMD命令, 但只有最后一个生效, CMD会被docker run之后的参数替换 ENTRYPOINT 指定一个容器启动时要运行的命令ENTRYPOINT的目的和CMD一样, 都是在指定容器启动程序及其参数 FROM ​ 基于哪个镜像构建新的镜像, 在构建时会从dockerhub拉取base镜像, 必须作为Dockerfile的第一个指令出现","categories":[{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"}]},{"title":"Linux的一些小工具","slug":"Linux/Linux一些小工具","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-03T12:53:09.756Z","comments":true,"path":"2020/12/02/Linux/Linux一些小工具/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"screenfetch效果图： Ubuntu apt install screenfetch CentOS # 先下载： wget -O screenfetch-dev https:&#x2F;&#x2F;git.io&#x2F;vaHfR # 然后丢到&#x2F;usr&#x2F;bin或类似的目录，如果在PATH就比较方便： sudo mv .&#x2F;screenfetch-dev &#x2F;usr&#x2F;bin&#x2F;screenfetch # 记得加上可执行权限： sudo chmod +x &#x2F;usr&#x2F;bin&#x2F;screenfetch # 此时应该可以使用了： screenfetch","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"工具","slug":"Linux/工具","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"}]},{"title":"服务器性能测试","slug":"Linux/服务器性能测试","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-03T12:26:36.387Z","comments":true,"path":"2020/12/02/Linux/服务器性能测试/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/","excerpt":"","text":"性能测试，仅供参考/娱乐原文连接 综合性能测试输入下列命令，执行teddysun博主的脚本： wget -qO- bench.sh | bash UnixBench跑分虽然UnixBench跑分测试并不能完全代表真实性能，但还是可以提供一定的参考。执行以下命令： wget https:&#x2F;&#x2F;soft.laozuo.org&#x2F;scripts&#x2F;UnixBench5.1.3.tgz tar -zxvf UnixBench5.1.3.tgz cd UnixBench make .&#x2F;Run 错误修复 -bash: ./Run: /usr/bin/perl: bad interpreter: No such file or directory 修复方法: # 以root权限执行以下命令 wget -O &#x2F;usr&#x2F;bin&#x2F;prel https:&#x2F;&#x2F;github.com&#x2F;flathub&#x2F;io.github.Hexchat.Plugin.Perl&#x2F;blob&#x2F;master&#x2F;io.github.Hexchat.Plugin.Perl.json#L15-L47 修复成功 Speedtest带宽测试执行以下命令测速主机的上传和下载的带宽： wget https:&#x2F;&#x2F;raw.github.com&#x2F;sivel&#x2F;speedtest-cli&#x2F;master&#x2F;speedtest.py python speedtest.py --share PING测试使用http://ipip.net在线工具对主机的PING响应时间进行测试（北京时间晚上11点左右），结果如下： 使用mping脚本一键测试阿里轻量应用服务器实例到国内电信、联通、移动线路的回程Ping： wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;helloxz&#x2F;mping&#x2F;master&#x2F;mping.sh bash mping.sh 其中电信和联调的延迟较高，移动的延迟较低。 路由测试 路由测试去程路由测试使用BestTrace工具，本地电脑使用广东电信网络，在北京时间晚上十点多测试到VPS主机的去程路由。 需要绕日本NTT，有点惨。 第二次本地电脑使用北京联通网络进行去程路由测试： 同样需要绕日本NTT。。。 回程路由测试再测试VPS主机到本地的回程路由测试，运行以下命令: wget https://cdn.ipip.net/17mon/besttrace4linux.zipunzip besttrace*chmod +x besttrace./besttrace -q1 &lt;本地IP地址&gt;第一次测试的本地环境使用广东电信网络： 第二次测试的本地环境使用北京联通网络： 回程测试结果也不是很理想。 视频播放测试选择在北京时间晚上10点～11点左右，对部分朋友比较关注的视频播放进行测试，发现选择360p的视频播放也比较卡顿，甚至有的时候干脆刷不出来。 下面是播放360p视频的截图。 三、功能测试以下是使用阿里云轻量应用服务器的具体功能的一些感受，有好的也有不好的，供大家参考。 提供使用应用镜像一键部署应用的功能，在操作系统之上封装了应用软件和运行环境，满足快速建站的需求。目前提供8种的应用镜像，数量不算多，包括：WordPress, LAMP, Node.js, ECShop, phpwind, ASP.NET, Drupal, BT-Panel。应用部署完成之后，可以从控制台界面查看应用的详细信息以及操作步骤，这一点对用户比较友好。有独立的公网IP，但暂时不支持IPv6网络。提供一键绑定域名功能。支持快照，支持挂载、卸载磁盘。可以按使用时长退款，但是入口需要从计费界面进，如前所述。四、综合评价价格相比海外VPS具备竞争力，但是阿里云轻量应用服务器香港区目前的线路质量实在堪忧，需要绕日本NTT，目测已经被玩坏，因此总体而言并不推荐大家使用。当然这仅仅是我个人的看法，对测试结果有不同意见的朋友也欢迎私信，后续我计划再测试一下其他地域(如新加坡)的阿里云轻量应用服务器。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"性能测试","slug":"Linux/性能测试","permalink":"https://sun-j-y.github.io/categories/Linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"性能测试","slug":"性能测试","permalink":"https://sun-j-y.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"}]},{"title":"用微软拼音快速输入自定义格式的时间和日期","slug":"Windows/微软拼音快速输入自定义格式的日期和时间","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-03T12:00:52.438Z","comments":true,"path":"2020/12/02/Windows/微软拼音快速输入自定义格式的日期和时间/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Windows/%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/","excerpt":"","text":"教你如何用微软拼音输入法的用户自定义短语快速输入自定义格式的时间和日期。 用微软拼音输入 rq 或者 sj，我们可以在第五个候选词分别得到 2017年9月18日 和 22点05分。但是，其实我想输入的是：2017-09-18 和 2017-09-18 22:05:51 +0800。在设置里面折腾一番没找到之后，原本以为只好自己输入了，没想到后面还是找到了方法。 我不会告诉你我要一个这样的日期是为了写这篇博客的时候能方便地填写编辑时间…… 效果这是我们平时输入日期和时间的方法和效果： 这是通过阅读本文可以达到的效果： 方法Windows 10：设置→时间和语言→区域和语言→中文(中华人民共和国)→选项→微软拼音→选项→词库和自学习→添加新的或编辑现有的用户自定义短语→添加。（不想吐槽为什么藏得这么深……） 然后在短语里面输入以下代码： %yyyy%-%MM%-%dd% %HH%:%mm%:%ss% +0800 一些基本的格式化字符串是： 变量 含义 yyyy 4 位年 MM 2 位月 dd 2 位日 HH 2 位小时（24 小时制） mm 2 位分钟数 ss 2 位秒数 更多格式化变量请参考：Custom Date and Time Format Strings 重要的说明 需要注意，你只能在添加的时候这么写！ 需要注意，你只能在添加的时候这么写！ 需要注意，你只能在添加的时候这么写！ 如果是添加后再编辑，你会发现日期已经变成你点击“编辑”那一刻的时间固定下来了，你必须再把上面的代码敲一遍保存才行！ 如果你找不到设置到底在哪里，下面是附图","categories":[{"name":"Windows","slug":"Windows","permalink":"https://sun-j-y.github.io/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://sun-j-y.github.io/tags/Windows/"},{"name":"微软输入法","slug":"微软输入法","permalink":"https://sun-j-y.github.io/tags/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/"}]},{"title":"Github历史版本回退","slug":"Git&GitHub/常见问题/Github历史版本回退","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-03T11:32:15.770Z","comments":true,"path":"2020/12/02/Git&GitHub/常见问题/Github历史版本回退/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Git&GitHub/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/Github%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/","excerpt":"","text":"问题描述最近几天的GitHub提交出了些问题，导致之前提交的更新丢失，考虑回退到之前的版本。在GitHub的Web页面上并没有找到回退的解决方案（如果大家知道的话，感谢告知），于是决定通过本地的 Git Bash来操作。 查找 commit id：浏览GitHub上的提交历史记录，找到要回退的版本，复制commit id。 类似这种 恢复历史版本： git reset --hard [你的commit id] push：推送到GitHub远程仓库 git push -f -u origin master","categories":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"},{"name":"常见问题","slug":"Git/常见问题","permalink":"https://sun-j-y.github.io/categories/Git/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"}]},{"title":"Vim编辑器","slug":"Linux/Vim/Vim编辑器","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-05T07:57:49.209Z","comments":true,"path":"2020/12/02/Linux/Vim/Vim编辑器/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Vim/Vim%E7%BC%96%E8%BE%91%E5%99%A8/","excerpt":"","text":"Vim编辑器 什么是Vim编辑器 Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。 连 vim 的官方网站 (http://www.vim.org) 自己也说 vim 是一个程序开发工具而不是文字处理软件。 vim 键盘图： 三种使用模式 基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是： 命令模式： 用户刚刚启动 vi/vim，便进入了命令模式。 此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。 以下是常用的几个命令： i 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令。 若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。 输入模式： 在命令模式下按下i就进入了输入模式。 在输入模式中，可以使用以下按键： 字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME/END，移动光标到行首/行尾 Page Up/Page Down，上/下翻页 Insert，切换光标为输入/替换模式，光标将变成竖线/下划线 ESC，退出输入模式，切换到命令模式 底线命令模式 在命令模式下按下:（英文冒号）就进入了底线命令模式。 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。 在底线命令模式中，基本的命令有（已经省略了冒号）： q 退出程序 w 保存文件 按ESC键可随时退出底线命令模式。 简单的说，我们可以将这三个模式想成底下的图标来表示： 上手体验一下，在home目录下测试 如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做： [root@kuangshen home]# vim kuangstudy.txt 然后就会进入文件 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字 在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！ 在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。 这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 按下 ESC 按钮回到一般模式 好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！ 在一般模式中按下 :wq 储存后离开 vim！ OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。 Vim 按键说明 除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等 移动光标的方法 h 或 向左箭头键(←) 光标向左移动一个字符 j 或 向下箭头键(↓) 光标向下移动一个字符 k 或 向上箭头键(↑) 光标向上移动一个字符 l 或 向右箭头键(→) 光标向右移动一个字符 [Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) [Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 + 光标移动到非空格符的下一行 - 光标移动到非空格符的上一行 n&lt; space&gt; 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。 0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用) $ 或功能键[End] 移动到这一行的最后面字符处(常用) H 光标移动到这个屏幕的最上方那一行的第一个字符 M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个档案的最后一行(常用) nG n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) gg 移动到这个档案的第一行，相当于 1G 啊！(常用) n&lt; Enter&gt; n 为数字。光标向下移动 n 行(常用) 搜索替换 /word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用) ?word 向光标之上寻找一个字符串名称为 word 的字符串。 n 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ N 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 删除、复制与粘贴 x, X 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 dd 删除游标所在的那一整行(常用) ndd n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用) d1G 删除光标所在到第一行的所有数据 dG 删除光标所在到最后一行的所有数据 d$ 删除游标所在处，到该行的最后一个字符 d0 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 yy 复制游标所在的那一行(常用) nyy n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用) y1G 复制游标所在行到第一行的所有数据 yG 复制游标所在行到最后一行的所有数据 y0 复制光标所在的那个字符到该行行首的所有数据 y$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用) J 将光标所在行与下一行的数据结合成同一行 c 重复删除多个数据，例如向下删除 10 行，[ 10cj ] u 复原前一个动作。(常用) [Ctrl]+r 重做上一个动作。(常用) 第二部分：一般模式切换到编辑模式的可用的按钮说明 进入输入或取代的编辑模式 i, I 进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用) a, A 进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) o, O 进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用) r, R 进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) [Esc] 退出编辑模式，回到一般模式中(常用) 第三部分：一般模式切换到指令行模式的可用的按钮说明 指令行的储存、离开等指令 :w 将编辑的数据写入硬盘档案中(常用) :w! 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ :q 离开 vi (常用) :q! 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ :wq 储存后离开，若为 :wq! 则为强制储存后离开 (常用) ZZ 这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！ :w [filename] 将编辑的数据储存成另一个档案（类似另存新档） :r [filename] 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 :n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个档案。 :! command 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！ :set nu 显示行号，设定之后，会在每一行的前缀显示该行的行号 :set nonu 与 set nu 相反，为取消行号！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Vim","slug":"Linux/Vim","permalink":"https://sun-j-y.github.io/categories/Linux/Vim/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Vim","slug":"Vim","permalink":"https://sun-j-y.github.io/tags/Vim/"}]},{"title":"Docker搜索超时","slug":"Linux/常见问题/Docker搜索超时","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:09:10.000Z","comments":true,"path":"2020/12/02/Linux/常见问题/Docker搜索超时/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/Docker%E6%90%9C%E7%B4%A2%E8%B6%85%E6%97%B6/","excerpt":"","text":"Docker搜索超时执行docker search centos报错信息如下： Error response from daemon: Get https://index.docker.io/v1/search?q=centos: read tcp 52.200.132.201:443: i/o timeout docker在中国已经有了仓库：https://www.docker-cn.com/registry-mirror 根据上面网站提供的修改方法。 进入/etc/docker目录下 查看有没有 daemon.json。这是docker默认的配置文件。 如果没有新建，如果有，则修改。 &#123; \"registry-mirrors\": [\"https://registry.docker-cn.com\"] &#125; 保存退出。 重启docker服务： service docker restart 成功！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"https://sun-j-y.github.io/categories/Linux/Docker/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"}]},{"title":"将linux的HOME目录下的文件夹名字改回英文的简单办法","slug":"Linux/常见问题/将linux的用户主目录下的文件夹名称改成英文的简单方法","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:18:39.476Z","comments":true,"path":"2020/12/02/Linux/常见问题/将linux的用户主目录下的文件夹名称改成英文的简单方法/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B0%86linux%E7%9A%84%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E6%88%90%E8%8B%B1%E6%96%87%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/","excerpt":"","text":"将linux的HOME目录下的文件夹名字改回英文的简单办法为了使用起来方便，装了Ubuntu中文版，自然在home文件里用户目录的“桌面”、“图片”、“视频”、“音乐”……都是中文的。很多时候都喜欢在桌面上放一些要操作的文件，linux里命令行操作又多，难免会用命令行操作桌面上的东西，那么就要 “cd 桌面”，打“桌面”的时候要输入法切换，麻烦…… 所以就想办法把用户目录下的路径改成英文，而其他的中文不变， 方法如下： 打开终端，在终端中输入命令: export LANG=en_US # 更改语言为英文 xdg-user-dirs-gtk-update # 更新 跳出对话框询问是否将目录转化为英文路径,同意并关闭. 在终端中输入命令: export LANG=zh_CN # 更改语言为中文 ​ 重启系统。或者再次运行 xdg-user-dirs-gtk-update 系统会提示是否把转化好的目录改回中文，选择不再提示,并取消修改.主目录的中文转英文就完成了. 在有些linux发行板中，上面的命令无法使用，不过我们可以动过手动修改的方式达到，具体方法路下： ​ 找到～/.config/user-dirs.dis文件（注：~/代表当前用户目录 .config是个隐藏文件）​ 将该文件中的中文改成对应的英文​ 再在～/目录下创建对应的英文文件夹，重启就可以了","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"系统语言","slug":"系统语言","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"}]},{"title":"Docker搜索超时","slug":"Linux/问题/Docker搜索超时","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:09:10.000Z","comments":true,"path":"2020/12/02/Linux/问题/Docker搜索超时/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E9%97%AE%E9%A2%98/Docker%E6%90%9C%E7%B4%A2%E8%B6%85%E6%97%B6/","excerpt":"","text":"Docker搜索超时执行docker search centos报错信息如下： Error response from daemon: Get https://index.docker.io/v1/search?q=centos: read tcp 52.200.132.201:443: i/o timeout docker在中国已经有了仓库：https://www.docker-cn.com/registry-mirror 根据上面网站提供的修改方法。 进入/etc/docker目录下 查看有没有 daemon.json。这是docker默认的配置文件。 如果没有新建，如果有，则修改。 &#123; \"registry-mirrors\": [\"https://registry.docker-cn.com\"] &#125; 保存退出。 重启docker服务： service docker restart 成功！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"https://sun-j-y.github.io/categories/Linux/Docker/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"}]},{"title":"将linux的HOME目录下的文件夹名字改回英文的简单办法","slug":"Linux/问题/将linux的用户主目录下的文件夹名称改成英文的简单方法","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:18:39.476Z","comments":true,"path":"2020/12/02/Linux/问题/将linux的用户主目录下的文件夹名称改成英文的简单方法/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E9%97%AE%E9%A2%98/%E5%B0%86linux%E7%9A%84%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E6%88%90%E8%8B%B1%E6%96%87%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/","excerpt":"","text":"将linux的HOME目录下的文件夹名字改回英文的简单办法为了使用起来方便，装了Ubuntu中文版，自然在home文件里用户目录的“桌面”、“图片”、“视频”、“音乐”……都是中文的。很多时候都喜欢在桌面上放一些要操作的文件，linux里命令行操作又多，难免会用命令行操作桌面上的东西，那么就要 “cd 桌面”，打“桌面”的时候要输入法切换，麻烦…… 所以就想办法把用户目录下的路径改成英文，而其他的中文不变， 方法如下： 打开终端，在终端中输入命令: export LANG=en_US # 更改语言为英文 xdg-user-dirs-gtk-update # 更新 跳出对话框询问是否将目录转化为英文路径,同意并关闭. 在终端中输入命令: export LANG=zh_CN # 更改语言为中文 ​ 重启系统。或者再次运行 xdg-user-dirs-gtk-update 系统会提示是否把转化好的目录改回中文，选择不再提示,并取消修改.主目录的中文转英文就完成了. 在有些linux发行板中，上面的命令无法使用，不过我们可以动过手动修改的方式达到，具体方法路下： ​ 找到～/.config/user-dirs.dis文件（注：~/代表当前用户目录 .config是个隐藏文件）​ 将该文件中的中文改成对应的英文​ 再在～/目录下创建对应的英文文件夹，重启就可以了","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"系统语言","slug":"系统语言","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"}]},{"title":"Git入门","slug":"Git&GitHub/git入门","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-03T11:11:01.184Z","comments":true,"path":"2020/12/02/Git&GitHub/git入门/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Git&GitHub/git%E5%85%A5%E9%97%A8/","excerpt":"","text":"前言 本片笔记基于B站up主狂神说java编写 先了解下什么是版本控制 版本控制版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。 实现跨区域多人协同开发 追踪和记载一个或者多个文件的历史记录 组织和保护你的源代码和文档 统计工作量 并行开发、提高开发效率 跟踪记录整个软件的开发过程 减轻开发人员的负担，节省时间，同时降低人为错误 简单说就是用于管理多人协同开发项目的技术。 没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。 无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！ 多人开发就必须要使用版本控制！ 常见的版本控制工具我们学习的东西，一定是当下最流行的！ 主流的版本控制器有如下这些： Git SVN（Subversion） CVS（Concurrent Versions System） VSS（Micorosoft Visual SourceSafe） TFS（Team Foundation Server） Visual Studio Online 版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN 版本控制分类1、本地版本控制 记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。 2、集中版本控制 SVN 所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改 所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS 3、分布式版本控制 Git 每个人都拥有全部的代码！安全隐患！ 所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。 不会因为服务器损坏或者网络问题，造成不能工作的情况！ Git与SVN的主要区别SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。 Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！ Git是目前世界上最先进的分布式版本控制系统。 **** 聊聊Git的历史 同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。 Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 Linux社区中存在很多的大佬！破解研究 BitKeeper ！ 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！ Git是目前世界上最先进的分布式版本控制系统。 Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！ Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰 Git环境配置 软件下载打开 [git官网] https://git-scm.com/，下载git对应操作系统的版本。 所有东西下载慢的话就可以去找镜像！ 官网下载太慢，我们可以使用淘宝镜像下载：http://npm.taobao.org/mirrors/git-for-windows/ 下载对应的版本即可安装！ 安装：无脑下一步即可！安装完毕就可以使用了！ 启动Git安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！ Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多 Git CMD：Windows风格的命令行 Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令 常用的Linux命令平时一定要多使用这些基础的命令！ 1）、cd : 改变目录。 2）、cd . . 回退到上一个目录，直接cd进入默认目录 3）、pwd : 显示当前所在的目录路径。 4）、ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。 5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。 6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。 7）、mkdir: 新建一个目录,就是新建一个文件夹。 8）、rm -r : 删除一个文件夹, rm -r src 删除src目录 rm -rf &#x2F; 切勿在Linux中尝试！删除电脑中全部文件！ 9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。 10）、reset 重新初始化终端/清屏。 11）、clear 清屏。 12）、history 查看命令历史。 13）、help 帮助。 14）、exit 退出。 15）、#表示注释 Git配置所有的配置文件，其实都保存在本地！ 查看配置 git config -l 查看不同级别的配置文件： #查看系统configgit config --system --list #查看当前用户（global）配置git config --global --list Git相关的配置文件： 1）、Git\\etc\\gitconfig ：Git 安装目录下的 gitconfig –system 系统级 2）、C:\\Users\\Administrator\\ .gitconfig 只适用于当前登录用户的配置 –global 全局 这里可以直接编辑配置文件，通过命令设置后会响应到这里。 设置用户名与邮箱（用户标识，必要）当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中： git config --global user.name &quot;kuangshen&quot; #名称git config --global user.email 24736743@qq.com #邮箱 只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。 Git基本理论（重要） 三个区域Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下： Workspace：工作区，就是你平时存放项目代码的地方 Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息 Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本 Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换 本地的三个区域确切的说应该是git仓库中HEAD指向的版本： Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。 WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。 .git：存放Git管理信息的目录，初始化仓库的时候自动创建。 Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。 Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。 Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。 工作流程git的工作流程一般是这样的： １、在工作目录中添加、修改文件； ２、将需要进行版本管理的文件放入暂存区域； ３、将暂存区域的文件提交到git仓库。 因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed) Git项目搭建 创建工作目录与常用指令工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。 日常使用只要记住下图6个命令： 本地仓库搭建创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。 1、创建全新的仓库，需要用GIT管理的项目的根目录执行： # 在当前目录新建一个Git代码库$ git init 2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。 克隆远程仓库1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！ # 克隆一个项目和它的整个代码历史(版本信息)$ git clone [url] # https:&#x2F;&#x2F;gitee.com&#x2F;kuangstudy&#x2F;openclass.git 2、去 gitee 或者 github 上克隆一个测试！ Git文件操作 文件的四种状态版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。 Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged. Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件 Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 ! Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified 查看文件状态上面说文件有4种状态，通过如下命令可以查看到文件的状态： #查看指定文件状态git status [filename] #查看所有文件状态git status # git add . 添加所有文件到暂存区# git commit -m &quot;消息内容&quot; 提交暂存区中的内容到本地仓库 -m 提交信息 忽略文件有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等 在主目录下建立”.gitignore”文件，此文件有如下规则： 忽略文件中的空行或以井号（#）开始的行将会被忽略。 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。 如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。 #为注释*.txt #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt #但lib.txt除外&#x2F;temp #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild&#x2F; #忽略build&#x2F;目录下的所有文件doc&#x2F;*.txt #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt 使用码云 github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器这个其实可以作为大家未来找工作的一个重要信息！ 1、注册登录码云，完善个人信息 2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！) # 进入 C:\\Users\\Administrator\\.ssh 目录# 生成公钥ssh-keygen 3、将公钥信息public key 添加到码云账户中即可！ 4、使用码云创建一个自己的仓库！ 许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，… 限制！ 克隆到本地！ IDEA中集成Git 1、新建项目，绑定git。 注意观察idea中的变化 2、修改文件，使用IDEA操作git。 添加到暂存区 commit 提交 push到远程仓库 3、提交测试 这些都是单个人的操作！ 学习的方式最重要！学会学习！我上课的更多时候都是在教大家去学习一种理念和思想（学习方式） 有道无术、术尚可求。有术无道、止于术！ 真正的教学，授人以渔！ 说明：GIT分支分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！ git分支中常用指令： # 列出所有本地分支git branch # 列出所有远程分支git branch -r # 新建一个分支，但依然停留在当前分支git branch [branch-name] # 新建一个分支，并切换到该分支git checkout -b [branch] # 合并指定分支到当前分支$ git merge [branch] # 删除分支$ git branch -d [branch-name] # 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote&#x2F;branch] IDEA中操作 如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！ master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 作业练习：找一个小伙伴，一起搭建一个远程仓库，来练习Git！ 1、不要把Git想的很难，工作中多练习使用就自然而然的会了！ 2、Git的学习也十分多，看完我的Git教程之后，可以多去思考，总结到自己博客！","categories":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"}]},{"title":"Linux入门 目录与文件","slug":"Linux/Linux基础/Linux入门 目录与文件","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-05T08:12:17.000Z","comments":true,"path":"2020/12/02/Linux/Linux基础/Linux入门 目录与文件/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6/","excerpt":"","text":"扩展：Linux软连接和硬链接 扩展：Vim编辑器 目录管理Linux系统目录结构为树状结构，最顶级的目录为根目录 /，一切资源都挂载在根目录下。其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。 先了解一下绝对路径和相对路径 绝对路径和相对路径 绝对路径：路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。 相对路径：路径的写法，不是由 / 写起，而是由当前目录写起 ‘..’ 表示上一级目录 例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 处理目录的常用命令ls # 列出目录 cd # 切换目录 pwd # 显示目前的目录 mkdir # 创建一个新的目录 rmdir # 删除一个空的目录 cp # 复制文件或目录 rm # 移除文件或目录 mv # 移动文件与目录，或修改文件与目录的名称 你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。 ls（列出目录）在Linux系统当中， ls 命令可能是最常被运行的。 语法： ls [-aAdfFhilnrRSt] 目录名称 常用选项与参数： -a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用) -l ：长数据串列出，包含文件的属性与权限等等数据；(常用) 例子 # 将目录下的所有文件列出来(含属性与隐藏档) ls -al ~ cd （切换目录）cd是Change Directory的缩写，这是用来变换工作目录的命令。 语法： cd [相对路径或绝对路径] 例子： # 在'/'目录下,切换到用户目录下 [root@localhost /]# cd home [root@localhost home]# # 回到上一级 [root@localhost home]# cd .. [root@localhost /]# # 回到根目录 [root@localhost /]# cd / [root@localhost /]# # 表示回到自己的家目录，亦即是 /root 这个目录 [root@localhost /]# cd ~ [root@localhost ~]# 多操作几次应该就可以很好的理解 cd 命令的。 pwd ( 显示目前所在的目录 )pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。 pwd [-P] 选项与参数：**-P**（注意是大写） ：显示出确实的路径，而非使用连接(link) 路径。 例子： # 单纯显示出目前的工作目录 [root@localhost ~]# pwd /root # 如果是链接，要显示真实地址，可以使用 -P参数 [root@localhost bin]# pwd /bin [root@localhost bin]# pwd -P /usr/bin mkdir （创建新目录）如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。 mkdir [-mp] 目录名称 选项与参数： -m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～ -p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！ 测试： # 查看当前目录下的目录与文件 [root@localhost ~]# ls anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz # 创建一个 test 文件夹 [root@localhost ~]# mkdir test [root@localhost ~]# ls anaconda-ks.cfg prel test UnixBench UnixBench5.1.3.tgz # 创建多层级目录 [root@localhost ~]# mkdir test/test1/test2/test3 mkdir: cannot create directory ‘test/test1/test2/test3’: No such file or directory # &lt;== 没办法直接创建此目录啊！ # 加了这个 -p 的选项，可以自行帮你创建多层目录！ [root@localhost ~]# mkdir -p test/test1/test2/test3 # 创建权限为 rwx--x--x 的目录。 [root@localhost ~]# mkdir -m 711 test1 [root@localhost ~]# ls -l total 260 -rw-------. 1 root root 1260 Dec 1 08:43 anaconda-ks.cfg -rw-r--r--. 1 root root 116267 Dec 3 00:22 prel drwxr-xr-x. 3 root root 19 Dec 3 04:07 test drwx--x--x. 2 root root 6 Dec 3 04:08 test1 drwxr-xr-x. 7 root root 178 Dec 3 00:18 UnixBench -rw-r--r--. 1 root root 143259 Jun 30 2017 UnixBench5.1.3.tgz rmdir ( 删除空的目录 )语法： rmdir [-p] 目录名称 选项与参数：**-p ：**连同上一级『空的』目录也一起删除 例子： # 看看有多少目录存在？ [root@kuangshen home]# ls -l drwxr-xr-x 2 root root 4096 Mar 12 21:55 test drwxr-xr-x 3 root root 4096 Mar 12 21:56 test1 drwx--x--x 2 root root 4096 Mar 12 21:58 test2 # 可直接删除掉，没问题 [root@localhost ~]# rmdir test1 # 因为尚有内容，所以无法删除！ [root@localhost ~]# rmdir test rmdir: failed to remove ‘test’: Directory not empty # 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。 [root@localhost ~]# rmdir -p test/test1/test2/test3 [root@localhost ~]# ls anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz 注意：这个 rmdir 仅能删除空的目录，可以使用 rm 命令来删除非空目录 cp ( 复制文件或目录 )语法： cp [-adfilprsu] 来源(source) 目标(destination) cp [options] source1 source2 source3 .... directory 选项与参数： -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用) -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)； -d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身； -r：递归持续复制，用於目录的复制行为；(常用) -f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。 -s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件； -u：若 destination 比 source 旧才升级 destination ！ 例子： # 找一个有文件的目录, 我用的是/root [root@localhost ~]# ls /root anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz # 复制 root目录下的prel 到 home目录下 [root@localhost ~]# cp /root/prel /home [root@localhost ~]# ls /home prel # 再次复制，加上-i参数，增加覆盖询问 [root@localhost ~]# cp -i /root/prel /home cp: overwrite ‘/home/prel’? y # n(no)不覆盖，y(yes)为覆盖 rm ( 移除文件或目录 )语法： rm [-fir] 文件或目录 选项与参数： -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息； -i ：互动模式，在删除前会询问使用者是否动作 -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！ 测试： # 将刚刚在 cp 的实例中创建的 prel 删除掉！ [root@localhost ~]# rm -i /home/prel rm: remove regular file ‘/home/prel’? y # 如果加上 -i 的选项就会主动询问喔，避免误删之类的错误！ # 尽量不要在服务器上使用 rm -rf / mv ( 移动文件与目录，或修改名称 )语法： mv [-fiu] source destination mv [options] source1 source2 source3 .... directory 选项与参数： -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！ -u ：若目标文件已经存在，且 source 比较新，才会升级 (update) 测试： # 复制一个文件到当前目录 [root@localhost ~]# cp -i /root/prel /home # 创建一个文件夹 test [root@localhost ~]# cd /home [root@localhost home]# mkdir test [root@localhost home]# # 将复制过来的文件移动到我们创建的目录，并查看 [root@localhost home]# mv prel test [root@localhost home]# ls test [root@localhost home]# cd test [root@localhost test]# ls prel # 将文件夹重命名，然后再次查看！ [root@localhost test]# cd .. [root@localhost home]# mv test mvtest [root@localhost home]# ls mvtest [root@localhost home]# cd mvtest/ [root@localhost mvtest]# ls prel 文件属性 看懂文件属性 Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如： 实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等： 当为[ d ]则是目录 当为[ - ]则是文件； 若是[ l ]则表示为链接文档 ( link file )； 若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )； 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。 接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。 其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。 每个文件的属性由左边第一部分的10个字符来确定（如上图） 从左至右用0-9这些数字来表示。 第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。 其中： 第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限； 第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限； 第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。 对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。 同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。 文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。 因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。 root用户拥有对所有文件的所有权限 在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。 修改文件属性1、chgrp：更改文件属组 chgrp [-R] 属组名 文件名 -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 2、chown：更改文件属主，也可以同时更改文件属组 chown [–R] 属主名 文件名 chown [-R] 属主名：属组名 文件名 3、chmod：更改文件9个属性 chmod [-R] xyz 文件或目录 Linux文件属性有两种设置方法，一种是数字，一种是符号。 Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。 先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下： r:4 w:2 x:1 每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是： owner = rwx = 4+2+1 = 7 group = rwx = 4+2+1 = 7 others= — = 0+0+0 = 0 chmod 770 filename 可以自己下去多进行测试！ 文件查找find文件内容查看 概述 Linux系统中使用以下命令来查看文件的内容： cat 由第一行开始显示文件内容 tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ nl 显示的时候，顺道输出行号！ more 一页一页的显示文件内容 less 与 more 类似，但是比 more 更好的是，他可以往前翻页！ head 只看头几行 tail 只看尾巴几行 你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。 cat 从第一行开始显示文件内容语法：一般用来读配置文件之类的，当需要倒着读的时候可以用tac cat [-AbEnTv] 选项与参数： -A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！ -E ：将结尾的断行字节 $ 显示出来； -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同； -T ：将 [tab] 按键以 ^I 显示出来； -v ：列出一些看不出来的特殊字符 测试： # 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/ [root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 BOOTPROTO=dhcp ONBOOT=yes tac 从末尾开始显示文件内容tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如： [root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes BOOTPROTO=dhcp DEVICE=eth0 nl 显示行号语法： nl [-bnw] 文件 选项与参数： -b ：指定行号指定的方式，主要有两种： -ba ：表示不论是否为空行，也同样列出行号(类似 cat -n)； -bt ：如果有空行，空的那一行不要列出行号(默认值)； -n ：列出行号表示的方法，主要有三种： -n ln ：行号在荧幕的最左方显示； -n rn ：行号在自己栏位的最右方显示，且不加 0 ； -n rz ：行号在自己栏位的最右方显示，且加 0 ； -w ：行号栏位的占用的位数。 测试： [root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth0 1DEVICE=eth0 2BOOTPROTO=dhcp 3ONBOOT=yes more 向下翻页在 more 这个程序的运行过程中，你有几个按键可以按的： 空白键 (space)：代表向下翻一页； Enter ：代表向下翻『一行』； /字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字； :f ：立刻显示出档名以及目前显示的行数； q ：代表立刻离开 more ，不再显示该文件内容。 b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。 [root@kuangshen etc]# more /etc/csh.login ....(中间省略).... --More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令 less 上下翻页less运行时可以输入的命令有： 空白键 ：向下翻动一页； [pagedown]：向下翻动一页； [pageup] ：向上翻动一页； /字串 ：向下搜寻『字串』的功能； ?字串 ：向上搜寻『字串』的功能； n ：重复前一个搜寻 (与 / 或 ? 有关！) N ：反向的重复前一个搜寻 (与 / 或 ? 有关！) q ：离开 less 这个程序； [root@kuangshen etc]# more /etc/csh.login ....(中间省略).... : # 这里可以等待你输入命令！ head 取出文件前面几行语法： head [-n number] 文件 选项与参数：**-n** 后面接数字，代表显示几行的意思！ 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样： [root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login tail 取出文件后面几行语法： tail [-n number] 文件 选项与参数： -n ：后面接数字，代表显示几行的意思 默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样： tail -n 20 /etc/csh.login 文件编辑Vim编辑器","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"},{"name":"目录管理","slug":"目录管理","permalink":"https://sun-j-y.github.io/tags/%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"},{"name":"文件管理","slug":"文件管理","permalink":"https://sun-j-y.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"}]},{"title":"Linux入门2 常用基本命令","slug":"Linux/Linux基础/Linux入门2 常用基本命令","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-05T05:09:49.000Z","comments":true,"path":"2020/12/02/Linux/Linux基础/Linux入门2 常用基本命令/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A82%20%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"扩展：Linux软连接和硬链接 扩展：Vim编辑器 目录管理Linux系统目录结构为树状结构，最顶级的目录为根目录 /，一切资源都挂载在根目录下。其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。 先了解一下绝对路径和相对路径 绝对路径和相对路径 绝对路径：路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。 相对路径：路径的写法，不是由 / 写起，而是由当前目录写起 ‘..’ 表示上一级目录 例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 处理目录的常用命令ls # 列出目录 cd # 切换目录 pwd # 显示目前的目录 mkdir # 创建一个新的目录 rmdir # 删除一个空的目录 cp # 复制文件或目录 rm # 移除文件或目录 mv # 移动文件与目录，或修改文件与目录的名称 你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。 ls（列出目录）在Linux系统当中， ls 命令可能是最常被运行的。 语法： ls [-aAdfFhilnrRSt] 目录名称 常用选项与参数： -a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用) -l ：长数据串列出，包含文件的属性与权限等等数据；(常用) 例子 # 将目录下的所有文件列出来(含属性与隐藏档) ls -al ~ cd （切换目录）cd是Change Directory的缩写，这是用来变换工作目录的命令。 语法： cd [相对路径或绝对路径] 例子： # 在'/'目录下,切换到用户目录下 [root@localhost /]# cd home [root@localhost home]# # 回到上一级 [root@localhost home]# cd .. [root@localhost /]# # 回到根目录 [root@localhost /]# cd / [root@localhost /]# # 表示回到自己的家目录，亦即是 /root 这个目录 [root@localhost /]# cd ~ [root@localhost ~]# 多操作几次应该就可以很好的理解 cd 命令的。 pwd ( 显示目前所在的目录 )pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。 pwd [-P] 选项与参数：**-P**（注意是大写） ：显示出确实的路径，而非使用连接(link) 路径。 例子： # 单纯显示出目前的工作目录 [root@localhost ~]# pwd /root # 如果是链接，要显示真实地址，可以使用 -P参数 [root@localhost bin]# pwd /bin [root@localhost bin]# pwd -P /usr/bin mkdir （创建新目录）如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。 mkdir [-mp] 目录名称 选项与参数： -m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～ -p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！ 测试： # 查看当前目录下的目录与文件 [root@localhost ~]# ls anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz # 创建一个 test 文件夹 [root@localhost ~]# mkdir test [root@localhost ~]# ls anaconda-ks.cfg prel test UnixBench UnixBench5.1.3.tgz # 创建多层级目录 [root@localhost ~]# mkdir test/test1/test2/test3 mkdir: cannot create directory ‘test/test1/test2/test3’: No such file or directory # &lt;== 没办法直接创建此目录啊！ # 加了这个 -p 的选项，可以自行帮你创建多层目录！ [root@localhost ~]# mkdir -p test/test1/test2/test3 # 创建权限为 rwx--x--x 的目录。 [root@localhost ~]# mkdir -m 711 test1 [root@localhost ~]# ls -l total 260 -rw-------. 1 root root 1260 Dec 1 08:43 anaconda-ks.cfg -rw-r--r--. 1 root root 116267 Dec 3 00:22 prel drwxr-xr-x. 3 root root 19 Dec 3 04:07 test drwx--x--x. 2 root root 6 Dec 3 04:08 test1 drwxr-xr-x. 7 root root 178 Dec 3 00:18 UnixBench -rw-r--r--. 1 root root 143259 Jun 30 2017 UnixBench5.1.3.tgz rmdir ( 删除空的目录 )语法： rmdir [-p] 目录名称 选项与参数：**-p ：**连同上一级『空的』目录也一起删除 例子： # 看看有多少目录存在？ [root@kuangshen home]# ls -l drwxr-xr-x 2 root root 4096 Mar 12 21:55 test drwxr-xr-x 3 root root 4096 Mar 12 21:56 test1 drwx--x--x 2 root root 4096 Mar 12 21:58 test2 # 可直接删除掉，没问题 [root@localhost ~]# rmdir test1 # 因为尚有内容，所以无法删除！ [root@localhost ~]# rmdir test rmdir: failed to remove ‘test’: Directory not empty # 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。 [root@localhost ~]# rmdir -p test/test1/test2/test3 [root@localhost ~]# ls anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz 注意：这个 rmdir 仅能删除空的目录，可以使用 rm 命令来删除非空目录 cp ( 复制文件或目录 )语法： cp [-adfilprsu] 来源(source) 目标(destination) cp [options] source1 source2 source3 .... directory 选项与参数： -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用) -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)； -d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身； -r：递归持续复制，用於目录的复制行为；(常用) -f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。 -s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件； -u：若 destination 比 source 旧才升级 destination ！ 例子： # 找一个有文件的目录, 我用的是/root [root@localhost ~]# ls /root anaconda-ks.cfg prel UnixBench UnixBench5.1.3.tgz # 复制 root目录下的prel 到 home目录下 [root@localhost ~]# cp /root/prel /home [root@localhost ~]# ls /home prel # 再次复制，加上-i参数，增加覆盖询问 [root@localhost ~]# cp -i /root/prel /home cp: overwrite ‘/home/prel’? y # n(no)不覆盖，y(yes)为覆盖 rm ( 移除文件或目录 )语法： rm [-fir] 文件或目录 选项与参数： -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息； -i ：互动模式，在删除前会询问使用者是否动作 -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！ 测试： # 将刚刚在 cp 的实例中创建的 prel 删除掉！ [root@localhost ~]# rm -i /home/prel rm: remove regular file ‘/home/prel’? y # 如果加上 -i 的选项就会主动询问喔，避免误删之类的错误！ # 尽量不要在服务器上使用 rm -rf / mv ( 移动文件与目录，或修改名称 )语法： mv [-fiu] source destination mv [options] source1 source2 source3 .... directory 选项与参数： -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！ -u ：若目标文件已经存在，且 source 比较新，才会升级 (update) 测试： # 复制一个文件到当前目录 [root@localhost ~]# cp -i /root/prel /home # 创建一个文件夹 test [root@localhost ~]# cd /home [root@localhost home]# mkdir test [root@localhost home]# # 将复制过来的文件移动到我们创建的目录，并查看 [root@localhost home]# mv prel test [root@localhost home]# ls test [root@localhost home]# cd test [root@localhost test]# ls prel # 将文件夹重命名，然后再次查看！ [root@localhost test]# cd .. [root@localhost home]# mv test mvtest [root@localhost home]# ls mvtest [root@localhost home]# cd mvtest/ [root@localhost mvtest]# ls prel 文件属性 看懂文件属性 Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如： 实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等： 当为[ d ]则是目录 当为[ - ]则是文件； 若是[ l ]则表示为链接文档 ( link file )； 若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )； 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。 接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。 其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。 每个文件的属性由左边第一部分的10个字符来确定（如上图） 从左至右用0-9这些数字来表示。 第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。 其中： 第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限； 第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限； 第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。 对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。 同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。 文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。 因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。 root用户拥有对所有文件的所有权限 在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。 修改文件属性1、chgrp：更改文件属组 chgrp [-R] 属组名 文件名 -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 2、chown：更改文件属主，也可以同时更改文件属组 chown [–R] 属主名 文件名 chown [-R] 属主名：属组名 文件名 3、chmod：更改文件9个属性 chmod [-R] xyz 文件或目录 Linux文件属性有两种设置方法，一种是数字，一种是符号。 Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。 先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下： r:4 w:2 x:1 每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是： owner = rwx = 4+2+1 = 7 group = rwx = 4+2+1 = 7 others= — = 0+0+0 = 0 chmod 770 filename 可以自己下去多进行测试！ 文件内容查看 概述 Linux系统中使用以下命令来查看文件的内容： cat 由第一行开始显示文件内容 tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ nl 显示的时候，顺道输出行号！ more 一页一页的显示文件内容 less 与 more 类似，但是比 more 更好的是，他可以往前翻页！ head 只看头几行 tail 只看尾巴几行 你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。 cat 从第一行开始显示文件内容语法：一般用来读配置文件之类的，当需要倒着读的时候可以用tac cat [-AbEnTv] 选项与参数： -A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！ -E ：将结尾的断行字节 $ 显示出来； -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同； -T ：将 [tab] 按键以 ^I 显示出来； -v ：列出一些看不出来的特殊字符 测试： # 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/ [root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 BOOTPROTO=dhcp ONBOOT=yes tac 从末尾开始显示文件内容tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如： [root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes BOOTPROTO=dhcp DEVICE=eth0 nl 显示行号语法： nl [-bnw] 文件 选项与参数： -b ：指定行号指定的方式，主要有两种： -ba ：表示不论是否为空行，也同样列出行号(类似 cat -n)； -bt ：如果有空行，空的那一行不要列出行号(默认值)； -n ：列出行号表示的方法，主要有三种： -n ln ：行号在荧幕的最左方显示； -n rn ：行号在自己栏位的最右方显示，且不加 0 ； -n rz ：行号在自己栏位的最右方显示，且加 0 ； -w ：行号栏位的占用的位数。 测试： [root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth0 1DEVICE=eth0 2BOOTPROTO=dhcp 3ONBOOT=yes more 向下翻页在 more 这个程序的运行过程中，你有几个按键可以按的： 空白键 (space)：代表向下翻一页； Enter ：代表向下翻『一行』； /字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字； :f ：立刻显示出档名以及目前显示的行数； q ：代表立刻离开 more ，不再显示该文件内容。 b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。 [root@kuangshen etc]# more /etc/csh.login ....(中间省略).... --More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令 less 上下翻页less运行时可以输入的命令有： 空白键 ：向下翻动一页； [pagedown]：向下翻动一页； [pageup] ：向上翻动一页； /字串 ：向下搜寻『字串』的功能； ?字串 ：向上搜寻『字串』的功能； n ：重复前一个搜寻 (与 / 或 ? 有关！) N ：反向的重复前一个搜寻 (与 / 或 ? 有关！) q ：离开 less 这个程序； [root@kuangshen etc]# more /etc/csh.login ....(中间省略).... : # 这里可以等待你输入命令！ head 取出文件前面几行语法： head [-n number] 文件 选项与参数：**-n** 后面接数字，代表显示几行的意思！ 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样： [root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login tail 取出文件后面几行语法： tail [-n number] 文件 选项与参数： -n ：后面接数字，代表显示几行的意思 默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样： tail -n 20 /etc/csh.login 磁盘管理 概述 Linux磁盘管理好坏直接关系到整个系统的性能问题。 Linux磁盘管理常用命令为 df、du。 df ：列出文件系统的整体磁盘使用量 du：检查磁盘空间使用量 df（检查磁盘占用情况）df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 语法： df [-ahikHTm] [目录或文件名] 选项与参数： -a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统； -k ：以 KBytes 的容量显示各文件系统； -m ：以 MBytes 的容量显示各文件系统； -h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示； -H ：以 M=1000K 取代 M=1024K 的进位方式； -T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出； -i ：不用硬盘容量，而以 inode 的数量来显示 测试： # 将系统内所有的文件系统列出来！ # 在 Linux 底下如果 df 没有加任何选项 # 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！ [root@kuangshen &#x2F;]# df Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 889100 0 889100 0% &#x2F;dev tmpfs 899460 704 898756 1% &#x2F;dev&#x2F;shm tmpfs 899460 496 898964 1% &#x2F;run tmpfs 899460 0 899460 0% &#x2F;sys&#x2F;fs&#x2F;cgroup &#x2F;dev&#x2F;vda1 41152812 6586736 32662368 17% &#x2F; tmpfs 179896 0 179896 0% &#x2F;run&#x2F;user&#x2F;0 # 将容量结果以易读的容量格式显示出来 [root@kuangshen &#x2F;]# df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 869M 0 869M 0% &#x2F;dev tmpfs 879M 708K 878M 1% &#x2F;dev&#x2F;shm tmpfs 879M 496K 878M 1% &#x2F;run tmpfs 879M 0 879M 0% &#x2F;sys&#x2F;fs&#x2F;cgroup &#x2F;dev&#x2F;vda1 40G 6.3G 32G 17% &#x2F; tmpfs 176M 0 176M 0% &#x2F;run&#x2F;user&#x2F;0 # 将系统内的所有特殊文件格式及名称都列出来 [root@kuangshen &#x2F;]# df -aT Filesystem Type 1K-blocks Used Available Use% Mounted on sysfs sysfs 0 0 0 - &#x2F;sys proc proc 0 0 0 - &#x2F;proc devtmpfs devtmpfs 889100 0 889100 0% &#x2F;dev securityfs securityfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;security tmpfs tmpfs 899460 708 898752 1% &#x2F;dev&#x2F;shm devpts devpts 0 0 0 - &#x2F;dev&#x2F;pts tmpfs tmpfs 899460 496 898964 1% &#x2F;run tmpfs tmpfs 899460 0 899460 0% &#x2F;sys&#x2F;fs&#x2F;cgroup cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd pstore pstore 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;pstore cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb cgroup cgroup 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls,net_prio cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory cgroup cgroup 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event configfs configfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;config &#x2F;dev&#x2F;vda1 ext4 41152812 6586748 32662356 17% &#x2F; systemd-1 - - - - -&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc mqueue mqueue 0 0 0 - &#x2F;dev&#x2F;mqueue debugfs debugfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;debug hugetlbfs hugetlbfs 0 0 0 - &#x2F;dev&#x2F;hugepages tmpfs tmpfs 179896 0 179896 0% &#x2F;run&#x2F;user&#x2F;0 binfmt_misc binfmt_misc 0 0 0 -&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc # 将 &#x2F;etc 底下的可用的磁盘容量以易读的容量格式显示 [root@kuangshen &#x2F;]# df -h &#x2F;etc Filesystem Size Used Avail Use% Mounted on &#x2F;dev&#x2F;vda1 40G 6.3G 32G 17% &#x2F; du Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。 语法： du [-ahskm] 文件或目录名称 选项与参数： -a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。 -h ：以人们较易读的容量格式 (G/M) 显示； -s ：列出总量而已，而不列出每个各别的目录占用容量； -S ：不包括子目录下的总计，与 -s 有点差别。 -k ：以 KBytes 列出容量显示； -m ：以 MBytes 列出容量显示； 测试： # 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）: # 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。 [root@kuangshen home]# du 16.&#x2F;redis 8.&#x2F;www&#x2F;.oracle_jre_usage # 包括隐藏文件的目录 24.&#x2F;www 48. # 这个目录(.)所占用的总量 # 将文件的容量也列出来 [root@kuangshen home]# du -a 4.&#x2F;redis&#x2F;.bash_profile 4.&#x2F;redis&#x2F;.bash_logout ....中间省略.... 4.&#x2F;kuangstudy.txt # 有文件的列表了 48. # 检查根目录底下每个目录所占用的容量 [root@kuangshen home]# du -sm &#x2F;* 0&#x2F;bin 146&#x2F;boot .....中间省略.... 0&#x2F;proc .....中间省略.... 1&#x2F;tmp 3026&#x2F;usr # 系统初期最大就是他了啦！ 513&#x2F;var 2666&#x2F;www 通配符 * 来代表每个目录。 与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。 磁盘挂载与卸除 根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载” Linux 的磁盘挂载使用mount命令，卸载使用umount命令。 磁盘挂载语法： mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 测试： # 将 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！ [root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6 [root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6 [root@www ~]# df Filesystem 1K-blocks Used Available Use% Mounted on &#x2F;dev&#x2F;hdc6 1976312 42072 1833836 3% &#x2F;mnt&#x2F;hdc6 磁盘卸载命令 umount 语法： umount [-fn] 装置文件名或挂载点 选项与参数： -f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下； -n ：不升级 /etc/mtab 情况下卸除。 卸载/dev/hdc6 [root@www ~]# umount &#x2F;dev&#x2F;hdc6","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"用户管理","slug":"用户管理","permalink":"https://sun-j-y.github.io/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"},{"name":"磁盘管理","slug":"磁盘管理","permalink":"https://sun-j-y.github.io/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"name":"CentOS","slug":"CentOS","permalink":"https://sun-j-y.github.io/tags/CentOS/"}]},{"title":"Hexo子分类和父分类","slug":"Hexo博客/Hexo子分类和父分类","date":"2020-12-02T11:01:15.000Z","updated":"2020-12-02T11:01:29.982Z","comments":true,"path":"2020/12/02/Hexo博客/Hexo子分类和父分类/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%AD%90%E5%88%86%E7%B1%BB%E5%92%8C%E7%88%B6%E5%88%86%E7%B1%BB/","excerpt":"","text":"前言 随着博客量的增加，更细致的分类变得更有必要 方法 格式 categories: - Diary - Life 这种格式会使分类Life成为Diary的子分类，而不是并列分类 更复杂的格式 categories: - [Diary, PlayStation] - [Diary, Games] - [Life] 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"}]},{"title":"Linux入门1 安装Linux","slug":"Linux/Linux基础/Linux入门 安装linux","date":"2020-12-02T08:21:00.000Z","updated":"2020-12-07T12:11:10.814Z","comments":true,"path":"2020/12/02/Linux/Linux基础/Linux入门 安装linux/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8%20%E5%AE%89%E8%A3%85linux/","excerpt":"","text":"linux概述什么是linux看百科吧 维基百科 百度百科 linux入门概述 严格来说，linux只是一个操作系统内核通常所说的 linux系统 是指以它为内核的一系列操作系统 Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。常见的linux发行版系统有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等 kali linux：安全渗透,逆向 本篇笔记是基于CentOS 7 写的，其他linux发行版命令略有不同，但大同小异 Linux 应用领域今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。 目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。 巴西联邦政府由于支持 Linux 而世界闻名。 有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。 印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。 中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。 在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。 葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。 法国和德国同样开始逐步采用 Linux。 Linux vs Windows 环境搭建安装Linux操作系统Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！ 本地物理机安装，不建议（如果不在意办公和娱乐性的话请忽略） 本地虚拟机安装，比较消耗电脑资源（不过服务器版本的linux也消耗不了多少资源） 具体看 [这里] 购买云服务器（不消耗本地资源，但耗money） 虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作； 1、阿里云购买服务器：https://www.aliyun.com/minisite/goods?userCode=0phtycgr 2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了 3、下载 XShell 工具，进行远程连接使用！连接成功效果如下： 注意事项： 如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！ 如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器 安装教程：https://www.bt.cn/bbs/thread-19376-1-1.html 1、开启对应的端口 2、一键安装 3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了 4、登录之后就可以可视化的安装环境和部署网站！ 走近Linux系统 一些命令没有反馈，一般代表命令执行成功（没有消息就是修好的消息） 开\\关机 开机登录 开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。 开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！ 一般来说，用户的登录方式有三种： 命令行登录 ssh登录 图形界面登录 最高权限账户为 root，可以操作一切！ 关机 在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。 关机指令为：shutdown ； sync # 将数据由内存同步到硬盘中。 shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机： shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机 shutdown –h now # 立马关机 shutdown –h 20:25 # 系统会在今天20:25关机 shutdown –h +10 # 十分钟后关机 shutdown –r now # 系统立马重启 shutdown –r +10 # 系统十分钟后重启 reboot # 就是重启，等同于 shutdown –r now halt # 关闭系统，等同于shutdown –h now 和 poweroff 最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。 目录结构 系统目录结构 登录系统后，在当前命令窗口下输入命令： ls / 你会看到如下图所示： 树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下） 以下是对这些目录的解释： /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。 /boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 /etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。 /lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 /root：该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /srv：该目录存放一些服务启动之后需要提取的数据。 /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。 /tmp：这个目录是用来存放一些临时文件的。 /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 /usr/bin： 系统用户使用的应用程序。 /usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。 /usr/src： 内核源代码默认的放置目录。 /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 /run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"}]},{"title":"Linux入门1 安装Linux","slug":"Linux/Linux基础/Linux入门1 安装linux","date":"2020-12-02T08:21:00.000Z","updated":"2020-12-05T05:15:54.707Z","comments":true,"path":"2020/12/02/Linux/Linux基础/Linux入门1 安装linux/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A81%20%E5%AE%89%E8%A3%85linux/","excerpt":"","text":"linux概述什么是linux看百科吧 维基百科 百度百科 linux入门概述 严格来说，linux只是一个操作系统内核通常所说的 linux系统 是指以它为内核的一系列操作系统 Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。常见的linux发行版系统有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等 kali linux：安全渗透,逆向 本篇笔记是基于CentOS 7 写的，其他linux发行版命令略有不同，但大同小异 Linux 应用领域今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。 目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。 巴西联邦政府由于支持 Linux 而世界闻名。 有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。 印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。 中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。 在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。 葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。 法国和德国同样开始逐步采用 Linux。 Linux vs Windows 环境搭建安装Linux操作系统Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！ 本地物理机安装，不建议（如果不在意办公和娱乐性的话请忽略） 本地虚拟机安装，比较消耗电脑资源（不过服务器版本的linux也消耗不了多少资源） 具体看 [这里] 购买云服务器（不消耗本地资源，但耗money） 虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作； 1、阿里云购买服务器：https://www.aliyun.com/minisite/goods?userCode=0phtycgr 2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了 3、下载 XShell 工具，进行远程连接使用！连接成功效果如下： 注意事项： 如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！ 如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器 安装教程：https://www.bt.cn/bbs/thread-19376-1-1.html 1、开启对应的端口 2、一键安装 3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了 4、登录之后就可以可视化的安装环境和部署网站！ 走近Linux系统 一些命令没有反馈，一般代表命令执行成功（没有消息就是修好的消息） 开\\关机 开机登录 开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。 开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！ 一般来说，用户的登录方式有三种： 命令行登录 ssh登录 图形界面登录 最高权限账户为 root，可以操作一切！ 关机 在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。 关机指令为：shutdown ； sync # 将数据由内存同步到硬盘中。 shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机： shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机 shutdown –h now # 立马关机 shutdown –h 20:25 # 系统会在今天20:25关机 shutdown –h +10 # 十分钟后关机 shutdown –r now # 系统立马重启 shutdown –r +10 # 系统十分钟后重启 reboot # 就是重启，等同于 shutdown –r now halt # 关闭系统，等同于shutdown –h now 和 poweroff 最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。 目录结构 系统目录结构 登录系统后，在当前命令窗口下输入命令： ls / 你会看到如下图所示： 树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下） 以下是对这些目录的解释： /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。 /boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 /etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。 /lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 /root：该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /srv：该目录存放一些服务启动之后需要提取的数据。 /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。 /tmp：这个目录是用来存放一些临时文件的。 /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 /usr/bin： 系统用户使用的应用程序。 /usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。 /usr/src： 内核源代码默认的放置目录。 /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 /run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"}]},{"title":"Linux软连接和硬链接","slug":"Linux/Linux基础/Linux软连接和硬链接","date":"2020-12-02T08:21:00.000Z","updated":"2020-12-02T11:09:10.000Z","comments":true,"path":"2020/12/02/Linux/Linux基础/Linux软连接和硬链接/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%9F%BA%E7%A1%80/Linux%E8%BD%AF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/","excerpt":"","text":"Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。 情况下，ln 命令产生硬链接。 硬连接硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。 简单来说可以理解为类似备份（实际并不是）的一个东西 硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。 软连接（符号连接）另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。 简单来说类似windows下的快捷方式 例子： [root@kuangshen /]# cd /home [root@kuangshen home]# touch f1 # 创建一个测试文件f1 [root@kuangshen home]# ls f1 [root@kuangshen home]# ln f1 f2 # 创建f1的一个硬连接文件f2 [root@kuangshen home]# ln -s f1 f3 # 创建f1的一个符号连接文件f3 [root@kuangshen home]# ls -li # -i参数显示文件的inode节点信息 397247 -rw-r--r-- 2 root root 0 Mar 13 00:50 f1 397247 -rw-r--r-- 2 root root 0 Mar 13 00:50 f2 397248 lrwxrwxrwx 1 root root 2 Mar 13 00:50 f3 -> f1 从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。 # echo 字符串输出 >> f1 输出到 f1文件 [root@kuangshen home]# echo \"I am f1 file\" >>f1 [root@kuangshen home]# cat f1 I am f1 file [root@kuangshen home]# cat f2 I am f1 file [root@kuangshen home]# cat f3 I am f1 file [root@kuangshen home]# rm -f f1 [root@kuangshen home]# cat f2 I am f1 file [root@kuangshen home]# cat f3 cat: f3: No such file or directory 通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效； 依此您可以做一些相关的测试，可以得到以下全部结论： 删除符号连接f3,对f1,f2无影响； 删除硬连接f2，对f1,f3也无影响； 删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效； 同时删除原文件f1,硬连接f2，整个文件会真正的被删除。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"}]},{"title":"Hexo+Github搭建个人博客2 更改博客主题","slug":"Hexo博客/Hexo+Github搭建个人博客2 更改博客主题","date":"2020-11-23T05:33:16.000Z","updated":"2020-12-03T11:37:04.904Z","comments":true,"path":"2020/11/23/Hexo博客/Hexo+Github搭建个人博客2 更改博客主题/","link":"","permalink":"https://sun-j-y.github.io/2020/11/23/Hexo%E5%8D%9A%E5%AE%A2/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22%20%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"前言 本文所有内容来自于这里， 略有修改 上篇博客讲述了实现把博客推到Github Page，接下来这篇博客就来讲一下更改和优化主题。我使用的是volantis 主题（ Volantis是xaoxuu博主开发的主题），不是官方主题。其实这个主题对我来说难度挺大的，主要是因为主题 作者（我）的参考文档不够（太）详细~~ (菜)。 可我就是谗它好看，没办法。部署博客到远端Github用了一天，优化主题却整了整整三天（手动狗头，太难了）。如何选主题：强烈建议初学者选主题前先查阅一下这一个主题的使用人数多不多，这样出了问题比较好解决。帮助文档够不够详尽，这样可以少踩点坑。一开始还是使用中规中矩的官方主题，魔改的那些除非你比较有精力那就可以尝试。有了感觉之后再去自定义修改，尝试其他一下风格的主题，毕竟上手之后切换主题是分分钟钟的事。可以先看一下：知乎的这篇文章 volantis主题更改1 下载与安装volantis主题本地环境：我博客文件路径是E:\\hexo\\blog 1.1 将主题下载到themes目录下进入你本地放博客文件目录 进入到themes目录下右键git bash here执行命令： git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis themes&#x2F;volantis 执行成功后，themes目录下有volantis文件夹 1.2 修改站点配置文件注意是站点的_config.yml文件不是主题的_config.yml用vscode或notepad++打开_config.yml文件找到themes字段 将默认的lanscape修改为你的主题volantis其实之所以有两个配置文件是有原因的，你想啊。站点（也就是你的博客）的_config.yml用于配置你整个博客，如果你想换个主题，那么只要在站点的_config.yml修改theme就可了，不用大动干戈。想实现主题的一些其他功能如评论系统只要在主题的配置文件_config.ym修改就可以了，由于每个主题都有一个配置我呢见，换主题时也不会互相影响。 1.4 检查并安装依赖安装 Hexo 搜索的依赖包： npm i -S hexo-generator-search hexo-generator-json-content 安装 stylus 渲染器： npm i -S hexo-renderer-stylus 4）将hexo默认主题更换为volantis hexo clean #清除之前部署 hexo g #生成 hexo s# 本地预览 执行完上面操作就可以到 本地4000端口进行博客预览，可以发现主题已变了。准备工作做足了，下面正式进入主题设置。由于主题官网已经对主题的配置做了比较详尽的介绍，我这里就不赘诉了，主要讲一下我的一下理解，和操作的大概流程。一开始我由于没有站点/主题/页面这些概念所以也是比较蒙蔽，无从下手。其实不用看太多的教程，把官方文档看明白意思了，基本的博客框架就搭起来了，后续高级功能再慢慢学习优秀博主的Github源码，最后再自定义。个人觉得这个写文档的人逻辑表述能力不太强、将东西老是乱串的，反正我这个小白级博主是自己摸索之后才逐渐明白官网这样一个教程设置的顺序的。配置文件也鲜有中文注释，英文居多，我觉得这可能是难倒大多数新手的一个原因，遇到英文，不懂就整句百度翻译。 所以想首先对官网进行一下说明和解读。官网顶端导航栏的几个按钮【开始】：是我们volatis主题的下载与安装。 【站点】：是对我们整个博客的一个设置，如链接标签页显示的图标、标题等，所以是在博客的_config.yml下配置的。详细配置可以看hexo官网的官方文档https://hexo.io/zh-cn/docs/中的配置。 【主题】：是有关对我们当前选的这个主题volantis的一个修改配置。你想设置什么功能，如评论系统、搜索功能这些。可以根据自己的需要去配置，这是这篇博客的重点，但不会讲具体怎么操作，因为文档有教，而是讲一些注意事项和我踩到的一些坑。 这里对volantis文件夹下的子文件夹和文件做一些简单的介绍 _config.yml: 为对整个主题的配置文件 layout： 为页面、卡片（widget）、图标等源码和资源 source： 为样式、第三方插件等源码 一些实用功能评论系统gitalk：gitalk，需要依赖github，我试了一下没有成功，而且评论者还需要登录github才可以评论，不好用。因而我选择用valine，一步到位，可匿名评价 。配置详见：这篇博客 去掉封面的搜索框打开layout/_cover/index.ejs 找到如下所示代码，将其注释（如果你决定以后也不会使用这个封面的搜索框了 去掉也可以） &lt;% if (theme.search.enable === true) &#123; %> &lt;div class=\"m_search\"> &lt;form name=\"searchform\" class=\"form u-search-form\"> &lt;input type=\"text\" class=\"input u-search-input\" placeholder=\"&lt;%- theme.cover &amp;&amp; theme.cover.search %>\" /> &lt;i class=\"icon fas fa-search fa-fw\">&lt;/i> &lt;/form> &lt;/div> &lt;% &#125; %> 效果： 修改使手机端观看有外边距打开source/css/_layout/main.styl找到 @media screen and (max-width:$device-tablet)这一行 做如下修改 配置模板文件使用new命令 自动生成模板文件E:\\hexo\\blog\\scaffolds编辑post.md 没有则新建加入如下代码 --- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; comments: true # 是否开启评论 mathjax: false # 是否开启数学公式渲染 toc: true # 是否启用目录 top: false # 是否置顶 #若使用urlname作为永久链接则添加该项 urlname: categories: - [父类,子类] - 同级分类 tags: [标签1,标签2] --- &lt;!-- more --> Q&amp;A1）明明加了标签却无法在文章头部显示出来不是用如下hexo命令new出来的文章标签是无法无法正常显示，即使是复制黏贴了用上面命令生成的文章的fromt-matter，也是不能正常显示的，所以先用hexo命令新建文件，再用markdown编辑器打开编辑。 hexo new ‘文章标题’1 2）引用本地图片无法显示你引用自己的本地图片发布路径写的是本地的路径，服务器无法访问你的本地文件当然无法正常加载啦。解决方法是实用图床生成外链。见博客[]如外链之后引用图片，博客浏览过大或过小，可以先调整好大小再上传，如我遇到的问题就是，没有去查看博客头像预定的大小是多少（可以看别的已经搭好的博主的头像的参数 使用F12审查元素） 未完待续…… 参考文章：Volantis主题DIY笔记volantis官网","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]},{"title":"Hexo+Github搭建个人博客1 将博客推到Github-Page.md","slug":"Hexo博客/Hexo+Github搭建个人博客1 将博客推到Github-Page","date":"2020-11-06T08:41:21.000Z","updated":"2020-12-03T11:36:24.752Z","comments":true,"path":"2020/11/06/Hexo博客/Hexo+Github搭建个人博客1 将博客推到Github-Page/","link":"","permalink":"https://sun-j-y.github.io/2020/11/06/Hexo%E5%8D%9A%E5%AE%A2/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21%20%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%88%B0Github-Page/","excerpt":"","text":"前言 本文所有内容来自于Johnny, 略有修改 什么是hexo打开Hexo你会发现醒目的一行字：“Hexo is a fast, simple &amp; powerful blog framework”。其实说白了hexo就是个博客框架。 安装hexo前期准备 安装好 Nodejs 安装好 Git 以及注册一个Github账号 官网下载的Node.js安装包自带npm节点包管理工具，npm从其nmp官网下载对应的插件包到本地，因为该网站的服务器在国外，经常会出现下载缓慢或出现异常，这时便需要找到另外的方法提供稳定的下载。这个方法就是cnpm。阿里巴巴的淘宝团队把nmp官网的插件都同步到了在中国的服务器，提供给我们从这个服务器上稳定下载资源。简单来说就是为了防止因为下载速度过慢而导致失败，我们还要与预先处理一下。 预处理解决上述问题有如下两个方法，我选择的是方法一： 方法一、通过npm下载cnpm命令 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org # 其中-g是全局的意思 检验cnpm有没有安装成功 cnpm #或者 cnpm -v 方法二、修改npm的默认镜像源1）查询当前的npm的源，“http://registry.npmjs.org”为默认的官方源。 npm config get registry 2） 设置npm的淘宝镜像源，“https://registry.npm.taobao.org”为淘宝的镜像源。 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org # 通过这条set命令就可以把npm的镜像源改为国内淘宝的 正式安装hexo由于我预处理是用的方法一 所以我用cnpm cnpm和npm是一样的 相当于双胞胎 用方法二的伙伴把cnpm改为npm就可以了 其他照旧 cnpm install -g hexo-cli 验证hexo是否安装成功 hexo -v 安装成功后进入对Hexo的初始配置 Hexo初始配置 新建文件夹：我这里在E:/hexo下新建文件夹blog cmd下进入blog所在目录下 hexo init 初始化文件夹blog hexo init 初始化成功后，得到如下文件 这里对各个文件夹进行一个简单的说明，毕竟后面有些会用到 - node_modules：是依赖包 - public：存放的是生成的页面 - scaffolds：命令生成文章等的模板 - source：用命令创建的各种文章 - themes：主题 - _config.yml：整个博客的配置 - db.json：source解析所得到的 - package.json：项目所需模块项目的配置信息 安装deployer#安装能够将hexo部署到git page的deployer cnpm install hexo-deployer-git --save 本地查看效果常见hexo命令 1）generate hexo generate 功能：生成静态文件。 参数描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 2）deploy hexo deploy 功能：部署网站。 参数描述 -g, --generate 部署网站前，需要预先生成静态文件 3)server hexo server 功能：启动服务器。 参数描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，或覆盖记录格式 #hexo默认会有个Hello-World的博客文件 hexo g hexo s 地址栏 输入：http://localhost:400就可以在本地看到Hello Word文章 上面只是在本地发布成功，要想让更多人看到，需要发布到远程服务器，这里部署到GitHUb 部署博客到Github1）首先自己创建一个Github账户。2）创建一个仓库 命名规范: 用户名.github.io 3）配置SSH密钥只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步 在E:\\hexo\\blog目录下右键 bash here进入git窗口 ssh-keygen -t -C &quot;你GitHub的邮箱&quot; 两次密码直接回车 clip &lt;~&#x2F;ssh&#x2F;id_sra.pub 在GitHub个人账号中进入setting选择SSH and GPG keys添加从bash生成的密钥 测试在E:\\hexo\\blog目录下右键 bash here进入git窗口 输入如下命令 提示如下 输入yes后显示如下，则表示Github的SSH设置正确 配置_config.yml 获得SSH 配置_config.yml 在E:/hexo/blog目录下找到_config.yml配置文件 用notepad++或者vscode打开修改 找到deploy结点，编辑如下： repo为刚刚从GitHub复制来的SSH 粘贴即可 配置 Git 个人信息Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致 cmd下使用下面两条命令 git config --global user.email &quot;邮箱&quot; git config --global user.name &quot;用户名&quot; 到这里为止 git 操作实现本地代码库与 Github 代码库同步 部署到远端Githubhexo g -d 生成静态网页并把它部署到远端输入：https://你的仓库名 就可以访问到了在这里插入图片描述一切都布置好了，只差一杯咖啡，接下来就可以开工慢慢写文章啦3、博客编写（简单一提） 我们会发现发布成功的博客文章放在_posts目录下在这里插入图片描述那么可以使用支持 .md编辑提供Markdown 语法编辑的的编辑器，然后保存文件到 …\\source_posts 文件夹下即可，用CSDN自带的Markdown编辑器和小书匠都可以。这里用前者。 1）Markdown编辑器编辑博客，将生成的.md文件复制到 ..\\source_posts2）然后再hexo g -d 部署到远端GitHub就可以了 结束语文章到这里就结束了，我自己搭建过程中还是有碰到不少坑的，所幸网上用Hexo搭建博客的人比较多，所以一搜基本上都有解决方案。所以也记录一下自己的搭建过程，也希望这篇文章能够帮助那些想用hexo搭建个人博客的小伙伴们少走点弯路。","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}],"categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/categories/MySQL/"},{"name":"用户管理","slug":"MySQL/用户管理","permalink":"https://sun-j-y.github.io/categories/MySQL/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Linux基础","slug":"Linux/Linux基础","permalink":"https://sun-j-y.github.io/categories/Linux/Linux%E5%9F%BA%E7%A1%80/"},{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/categories/Docker/"},{"name":"工具","slug":"Linux/工具","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"},{"name":"性能测试","slug":"Linux/性能测试","permalink":"https://sun-j-y.github.io/categories/Linux/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"Windows","slug":"Windows","permalink":"https://sun-j-y.github.io/categories/Windows/"},{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"},{"name":"常见问题","slug":"Git/常见问题","permalink":"https://sun-j-y.github.io/categories/Git/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Vim","slug":"Linux/Vim","permalink":"https://sun-j-y.github.io/categories/Linux/Vim/"},{"name":"Docker","slug":"Linux/Docker","permalink":"https://sun-j-y.github.io/categories/Linux/Docker/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://sun-j-y.github.io/tags/MySQL/"},{"name":"MySQL入门","slug":"MySQL入门","permalink":"https://sun-j-y.github.io/tags/MySQL%E5%85%A5%E9%97%A8/"},{"name":"用户管理","slug":"用户管理","permalink":"https://sun-j-y.github.io/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Linux入门","slug":"Linux入门","permalink":"https://sun-j-y.github.io/tags/Linux%E5%85%A5%E9%97%A8/"},{"name":"进程管理","slug":"进程管理","permalink":"https://sun-j-y.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"name":"磁盘管理","slug":"磁盘管理","permalink":"https://sun-j-y.github.io/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"},{"name":"Vim","slug":"Vim","permalink":"https://sun-j-y.github.io/tags/Vim/"},{"name":"工具","slug":"工具","permalink":"https://sun-j-y.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://sun-j-y.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"},{"name":"系统管理","slug":"系统管理","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"},{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"},{"name":"性能测试","slug":"性能测试","permalink":"https://sun-j-y.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"Windows","slug":"Windows","permalink":"https://sun-j-y.github.io/tags/Windows/"},{"name":"微软输入法","slug":"微软输入法","permalink":"https://sun-j-y.github.io/tags/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"},{"name":"系统语言","slug":"系统语言","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"},{"name":"目录管理","slug":"目录管理","permalink":"https://sun-j-y.github.io/tags/%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"},{"name":"文件管理","slug":"文件管理","permalink":"https://sun-j-y.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"},{"name":"CentOS","slug":"CentOS","permalink":"https://sun-j-y.github.io/tags/CentOS/"},{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}