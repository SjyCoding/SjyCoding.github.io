{"meta":{"title":"Sun's Blog","subtitle":"CodeSun","description":"这是一段关于这个网站的描述文字","author":"Code Sun","url":"https://sun-j-y.github.io","root":"/"},"pages":[{"title":"","date":"2020-11-06T11:17:47.132Z","updated":"2020-11-06T11:17:47.132Z","comments":true,"path":"404.html","permalink":"https://sun-j-y.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-11-06T11:13:48.917Z","updated":"2020-11-06T11:13:48.917Z","comments":true,"path":"about/index.html","permalink":"https://sun-j-y.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有分类","date":"2020-11-23T04:40:33.962Z","updated":"2020-11-23T04:40:33.962Z","comments":true,"path":"categories/index.html","permalink":"https://sun-j-y.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.824Z","updated":"2020-11-09T04:27:34.824Z","comments":true,"path":"contributors/index.html","permalink":"https://sun-j-y.github.io/contributors/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.827Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"examples/index.html","permalink":"https://sun-j-y.github.io/examples/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:36.679Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"faqs/index.html","permalink":"https://sun-j-y.github.io/faqs/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-11-23T11:07:01.767Z","updated":"2020-11-23T11:07:01.767Z","comments":true,"path":"friends/index.html","permalink":"https://sun-j-y.github.io/friends/index.html","excerpt":"这是这个页面的简介","text":"这是这个页面的简介 交换双方的链接, 请通过邮箱联系请提供: 名称、头像、链接、截图、关键词、描述"},{"title":"","date":"2020-11-06T11:15:08.448Z","updated":"2020-11-06T11:15:08.448Z","comments":true,"path":"mylist/index.html","permalink":"https://sun-j-y.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-23T04:49:26.672Z","updated":"2020-11-23T04:49:26.672Z","comments":true,"path":"tags/index.html","permalink":"https://sun-j-y.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux的一些小工具","slug":"Linux/Linux一些小工具","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:20:11.843Z","comments":true,"path":"2020/12/02/Linux/Linux一些小工具/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"screenfetch Ubuntu apt install screenfetch CentOS # 先下载： wget -O screenfetch-dev https:&#x2F;&#x2F;git.io&#x2F;vaHfR # 然后丢到&#x2F;usr&#x2F;bin或类似的目录，如果在PATH就比较方便： sudo mv .&#x2F;screenfetch-dev &#x2F;usr&#x2F;bin&#x2F;screenfetch # 记得加上可执行权限： sudo chmod +x &#x2F;usr&#x2F;bin&#x2F;screenfetch # 此时应该可以使用了： screenfetch","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"工具","slug":"Linux/工具","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"}]},{"title":"Docker搜索超时","slug":"Git&GitHub/常见问题/Github历史版本回退","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:54:30.778Z","comments":true,"path":"2020/12/02/Git&GitHub/常见问题/Github历史版本回退/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Git&GitHub/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/Github%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/","excerpt":"","text":"问题描述最近几天的GitHub提交出了些问题，导致之前提交的更新丢失，考虑回退到之前的版本。在GitHub的Web页面上并没有找到回退的解决方案（如果大家知道的话，感谢告知），于是决定通过本地的 Git Bash来操作。 查找 commit id：浏览GitHub上的提交历史记录，找到要回退的版本，复制commit id。 类似这种 恢复历史版本： git reset --hard [你的commit id] push：推送到GitHub远程仓库 git push -f -u origin master","categories":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"},{"name":"常见问题","slug":"Git/常见问题","permalink":"https://sun-j-y.github.io/categories/Git/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"}]},{"title":"Docker搜索超时","slug":"Linux/问题/Docker搜索超时","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:23:27.409Z","comments":true,"path":"2020/12/02/Linux/问题/Docker搜索超时/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E9%97%AE%E9%A2%98/Docker%E6%90%9C%E7%B4%A2%E8%B6%85%E6%97%B6/","excerpt":"","text":"Docker搜索超时报错信息如下： [root@zengmg &#x2F;]# docker search centos Error response from daemon: Get https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;search?q&#x3D;centos: read tcp 52.200.132.201:443: i&#x2F;o timeout docker在中国已经有了仓库：https://www.docker-cn.com/registry-mirror 根据上面网站提供的修改方法。 进入/etc/docker目录下 查看有没有 daemon.json。这是docker默认的配置文件。 如果没有新建，如果有，则修改。 &#123; &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;] &#125; 保存退出。 重启docker服务：service docker restart 成功！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"https://sun-j-y.github.io/categories/Linux/Docker/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"},{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"}]},{"title":"将linux的HOME目录下的文件夹名字改回英文的简单办法","slug":"Linux/问题/将linux的用户主目录下的文件夹名称改成英文的简单方法","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:18:39.475Z","comments":true,"path":"2020/12/02/Linux/问题/将linux的用户主目录下的文件夹名称改成英文的简单方法/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E9%97%AE%E9%A2%98/%E5%B0%86linux%E7%9A%84%E7%94%A8%E6%88%B7%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E6%88%90%E8%8B%B1%E6%96%87%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/","excerpt":"","text":"将linux的HOME目录下的文件夹名字改回英文的简单办法为了使用起来方便，装了Ubuntu中文版，自然在home文件里用户目录的“桌面”、“图片”、“视频”、“音乐”……都是中文的。很多时候都喜欢在桌面上放一些要操作的文件，linux里命令行操作又多，难免会用命令行操作桌面上的东西，那么就要 “cd 桌面”，打“桌面”的时候要输入法切换，麻烦…… 所以就想办法把用户目录下的路径改成英文，而其他的中文不变， 方法如下： 打开终端，在终端中输入命令: export LANG&#x3D;en_US # 更改语言为英文 xdg-user-dirs-gtk-update # 更新 跳出对话框询问是否将目录转化为英文路径,同意并关闭. 在终端中输入命令: export LANG&#x3D;zh_CN # 更改语言为中文 ​ 重启系统。或者再次运行 xdg-user-dirs-gtk-update 系统会提示是否把转化好的目录改回中文，选择不再提示,并取消修改.主目录的中文转英文就完成了. 在有些linux发行板中，上面的命令无法使用，不过我们可以动过手动修改的方式达到，具体方法路下： ​ 找到～/.config/user-dirs.dis文件（注：~/代表当前用户目录 .config是个隐藏文件）​ 将该文件中的中文改成对应的英文​ 再在～/目录下创建对应的英文文件夹，重启就可以了","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"系统语言","slug":"系统语言","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"}]},{"title":"Git入门","slug":"Git&GitHub/git入门","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:53:05.074Z","comments":true,"path":"2020/12/02/Git&GitHub/git入门/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Git&GitHub/git%E5%85%A5%E9%97%A8/","excerpt":"","text":"前言 本片笔记基于B站up主狂神说java编写 先了解下什么是版本控制 版本控制版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。 实现跨区域多人协同开发 追踪和记载一个或者多个文件的历史记录 组织和保护你的源代码和文档 统计工作量 并行开发、提高开发效率 跟踪记录整个软件的开发过程 减轻开发人员的负担，节省时间，同时降低人为错误 简单说就是用于管理多人协同开发项目的技术。 没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。 无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！ 多人开发就必须要使用版本控制！ 常见的版本控制工具我们学习的东西，一定是当下最流行的！ 主流的版本控制器有如下这些： Git SVN（Subversion） CVS（Concurrent Versions System） VSS（Micorosoft Visual SourceSafe） TFS（Team Foundation Server） Visual Studio Online 版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN 版本控制分类1、本地版本控制 记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。 2、集中版本控制 SVN 所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改 所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS 3、分布式版本控制 Git 每个人都拥有全部的代码！安全隐患！ 所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。 不会因为服务器损坏或者网络问题，造成不能工作的情况！ Git与SVN的主要区别SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。 Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！ Git是目前世界上最先进的分布式版本控制系统。 **** 聊聊Git的历史 同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。 Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 Linux社区中存在很多的大佬！破解研究 BitKeeper ！ 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！ Git是目前世界上最先进的分布式版本控制系统。 Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！ Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰 Git环境配置 软件下载打开 [git官网] https://git-scm.com/，下载git对应操作系统的版本。 所有东西下载慢的话就可以去找镜像！ 官网下载太慢，我们可以使用淘宝镜像下载：http://npm.taobao.org/mirrors/git-for-windows/ 下载对应的版本即可安装！ 安装：无脑下一步即可！安装完毕就可以使用了！ 启动Git安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！ Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多 Git CMD：Windows风格的命令行 Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令 常用的Linux命令平时一定要多使用这些基础的命令！ 1）、cd : 改变目录。 2）、cd . . 回退到上一个目录，直接cd进入默认目录 3）、pwd : 显示当前所在的目录路径。 4）、ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。 5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。 6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。 7）、mkdir: 新建一个目录,就是新建一个文件夹。 8）、rm -r : 删除一个文件夹, rm -r src 删除src目录 rm -rf &#x2F; 切勿在Linux中尝试！删除电脑中全部文件！ 9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。 10）、reset 重新初始化终端/清屏。 11）、clear 清屏。 12）、history 查看命令历史。 13）、help 帮助。 14）、exit 退出。 15）、#表示注释 Git配置所有的配置文件，其实都保存在本地！ 查看配置 git config -l 查看不同级别的配置文件： #查看系统configgit config --system --list #查看当前用户（global）配置git config --global --list Git相关的配置文件： 1）、Git\\etc\\gitconfig ：Git 安装目录下的 gitconfig –system 系统级 2）、C:\\Users\\Administrator\\ .gitconfig 只适用于当前登录用户的配置 –global 全局 这里可以直接编辑配置文件，通过命令设置后会响应到这里。 设置用户名与邮箱（用户标识，必要）当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中： git config --global user.name &quot;kuangshen&quot; #名称git config --global user.email 24736743@qq.com #邮箱 只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。 Git基本理论（重要） 三个区域Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下： Workspace：工作区，就是你平时存放项目代码的地方 Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息 Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本 Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换 本地的三个区域确切的说应该是git仓库中HEAD指向的版本： Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。 WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。 .git：存放Git管理信息的目录，初始化仓库的时候自动创建。 Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。 Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。 Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。 工作流程git的工作流程一般是这样的： １、在工作目录中添加、修改文件； ２、将需要进行版本管理的文件放入暂存区域； ３、将暂存区域的文件提交到git仓库。 因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed) Git项目搭建 创建工作目录与常用指令工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。 日常使用只要记住下图6个命令： 本地仓库搭建创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。 1、创建全新的仓库，需要用GIT管理的项目的根目录执行： # 在当前目录新建一个Git代码库$ git init 2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。 克隆远程仓库1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！ # 克隆一个项目和它的整个代码历史(版本信息)$ git clone [url] # https:&#x2F;&#x2F;gitee.com&#x2F;kuangstudy&#x2F;openclass.git 2、去 gitee 或者 github 上克隆一个测试！ Git文件操作 文件的四种状态版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。 Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged. Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件 Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 ! Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified 查看文件状态上面说文件有4种状态，通过如下命令可以查看到文件的状态： #查看指定文件状态git status [filename] #查看所有文件状态git status # git add . 添加所有文件到暂存区# git commit -m &quot;消息内容&quot; 提交暂存区中的内容到本地仓库 -m 提交信息 忽略文件有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等 在主目录下建立”.gitignore”文件，此文件有如下规则： 忽略文件中的空行或以井号（#）开始的行将会被忽略。 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。 如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。 #为注释*.txt #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt #但lib.txt除外&#x2F;temp #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild&#x2F; #忽略build&#x2F;目录下的所有文件doc&#x2F;*.txt #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt 使用码云 github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器这个其实可以作为大家未来找工作的一个重要信息！ 1、注册登录码云，完善个人信息 2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！) # 进入 C:\\Users\\Administrator\\.ssh 目录# 生成公钥ssh-keygen 3、将公钥信息public key 添加到码云账户中即可！ 4、使用码云创建一个自己的仓库！ 许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，… 限制！ 克隆到本地！ IDEA中集成Git 1、新建项目，绑定git。 注意观察idea中的变化 2、修改文件，使用IDEA操作git。 添加到暂存区 commit 提交 push到远程仓库 3、提交测试 这些都是单个人的操作！ 学习的方式最重要！学会学习！我上课的更多时候都是在教大家去学习一种理念和思想（学习方式） 有道无术、术尚可求。有术无道、止于术！ 真正的教学，授人以渔！ 说明：GIT分支分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！ git分支中常用指令： # 列出所有本地分支git branch # 列出所有远程分支git branch -r # 新建一个分支，但依然停留在当前分支git branch [branch-name] # 新建一个分支，并切换到该分支git checkout -b [branch] # 合并指定分支到当前分支$ git merge [branch] # 删除分支$ git branch -d [branch-name] # 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote&#x2F;branch] IDEA中操作 如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！ master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 作业练习：找一个小伙伴，一起搭建一个远程仓库，来练习Git！ 1、不要把Git想的很难，工作中多练习使用就自然而然的会了！ 2、Git的学习也十分多，看完我的Git教程之后，可以多去思考，总结到自己博客！","categories":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"}]},{"title":"命令收集","slug":"Linux/命令收集","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:13:28.045Z","comments":true,"path":"2020/12/02/Linux/命令收集/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/","excerpt":"","text":"前言大部分文档来自https://man.linuxde.net/ 命令收集linux使用命令 find / -name *** 查找文件的时候会遇到以下报错 find: ‘/run/user/1000/gvfs’: Permission denied 明明用的是root用户，为什么权限不足呢？ 官方说这是一个bug——bug#615848. 原因是FUSE文件系统和权限不配的问题，全局搜索时碰到它就会退出报错。 其实这个目录是空的，查不查都没关系。所以,以下解决方式比较简直暴 umount /run/user/1000/gvfs rm -rf /run/user/1000/gvfs 现在，你再使用命令 find / -name *** 查找东西是不是就爽多了。 一次删除所有目录的目标文件或文件夹： find / -name \\*|xargs rm -rf//*\\为你要删除的文件或文件夹** 相信这个命令在你要彻底卸载某个程序的时候会有帮助。 常用find分类：文件和目录管理 功能：用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 语法find(选项)(参数) 选项-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式； -cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录； -ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算； -daystart：从本日开始计算时间； -depth：从指定目录下最深层的子目录开始查找； -empty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录； -exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令； -false：将find指令的回传值皆设为False； -fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件； -follow：排除符号连接； -fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件； -fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件； -fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件； -fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录； -gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录； -group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录； -help或——help：在线帮助； -ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别； -iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别； -inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录； -ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别； -iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别； -links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录； -iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式； -ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出； -maxdepth&lt;目录层级&gt;：设置最大目录层级； -mindepth&lt;目录层级&gt;：设置最小目录层级； -mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算； -mount：此参数的效果和指定“-xdev”相同； -mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算； -newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录； -nogroup：找出不属于本地主机群组识别码的文件或目录； -noleaf：不去考虑目录至少需拥有两个硬连接存在； -nouser：找出不属于本地主机用户识别码的文件或目录； -ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令； -path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式； -perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录； -print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“.&#x2F;”字符串； -print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行； -printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定； -prune：不寻找字符串作为寻找文件或目录的范本样式; -regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式； -size&lt;文件大小&gt;：查找符合指定的文件大小的文件； -true：将find指令的回传值皆设为True； -type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件； -uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录； -used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算； -user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录； -version或——version：显示版本信息； -xdev：将范围局限在先行的文件系统中； -xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。 参数起始目录：查找文件的起始目录。 实例 根据文件或者正则表达式进行匹配 列出当前目录及子目录下所有文件和文件夹 find . 在/home目录下查找以.txt结尾的文件名 find &#x2F;home -name &quot;*.txt&quot; 同上，但忽略大小写 find &#x2F;home -iname &quot;*.txt&quot; 当前目录及子目录下查找所有以.txt和.pdf结尾的文件 find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\) 或 find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; 匹配文件路径或者文件 find &#x2F;usr&#x2F; -path &quot;*local*&quot; 基于正则表达式匹配文件路径 find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; 同上，但忽略大小写 find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; 否定参数 找出/home下不是以.txt结尾的文件 find &#x2F;home ! -name &quot;*.txt&quot; 根据文件类型进行搜索 find . -type 类型参数 类型参数列表： f 普通文件 l 符号连接 d 目录 c 字符设备 b 块设备 s 套接字 p Fifo 基于目录深度搜索 向下最大深度限制为3 find . -maxdepth 3 -type f 搜索出深度距离当前目录至少2个子目录的所有文件 find . -mindepth 2 -type f 根据文件时间戳进行搜索 find . -type f 时间戳 UNIX/Linux文件系统每个文件都有三种时间戳： 访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。 修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。 变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。 搜索最近七天内被访问过的所有文件 find . -type f -atime -7 搜索恰好在七天前被访问过的所有文件 find . -type f -atime 7 搜索超过七天内被访问过的所有文件 find . -type f -atime +7 搜索访问时间超过10分钟的所有文件 find . -type f -amin +10 找出比file.log修改时间更长的所有文件 find . -type f -newer file.log 根据文件大小进行匹配 find . -type f -size 文件大小单元 文件大小单元： b —— 块（512字节） c —— 字节 w —— 字（2字节） k —— 千字节 M —— 兆字节 G —— 吉字节 搜索大于10KB的文件 find . -type f -size +10k 搜索小于10KB的文件 find . -type f -size -10k 搜索等于10KB的文件 find . -type f -size 10k 删除匹配文件删除当前目录下所有.txt文件 find . -type f -name &quot;*.txt&quot; -delete 根据文件权限/所有权进行匹配当前目录下搜索出权限为777的文件 find . -type f -perm 777 找出当前目录下权限不是644的php文件 find . -type f -name &quot;*.php&quot; ! -perm 644 找出当前目录用户tom拥有的所有文件 find . -type f -user tom 找出当前目录用户组sunk拥有的所有文件 find . -type f -group sunk 借助-exec选项与其他命令结合使用找出当前目录下所有root的文件，并把所有权更改为用户tom find .-type f -user root -exec chown tom &#123;&#125; \\; 上例中，**{}** 用于与**-exec**选项结合使用来匹配所有文件，然后会被替换为相应的文件名。 找出自己家目录下所有的.txt文件并删除 find $HOME&#x2F;. -name &quot;*.txt&quot; -ok rm &#123;&#125; \\; 上例中，**-ok和-exec**行为一样，不过它会给出提示，是否执行相应的操作。 查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中 find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \\;&gt; all.txt 将30天前的.log文件移动到old目录中 find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \\; 找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来 find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\\n&quot; &#123;&#125; \\; 因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令 -exec .&#x2F;text.sh &#123;&#125; \\; 搜索但跳出指定的目录查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk find . -path &quot;.&#x2F;sk&quot; -prune -o -name &quot;*.txt&quot; -print find其他技巧收集要列出所有长度为零的文件 find . -empty 用户和工作组管理useradd用户和工作组管理 useradd命令用于Linux中创建的新的系统用户。useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中。 在Slackware中，adduser指令是个script程序，利用交谈的方式取得输入的用户帐号资料，然后再交由真正建立帐号的useradd命令建立新用户，如此可方便管理员建立用户帐号。在Red Hat Linux中，adduser命令则是useradd命令的符号连接，两者实际上是同一个指令。 语法useradd(选项)(参数) 选项-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中； -d&lt;登入目录&gt;：指定用户登入时的启始目录； -D：变更预设值； -e&lt;有效期限&gt;：指定帐号的有效期限； -f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号； -g&lt;群组&gt;：指定用户所属的群组； -G&lt;群组&gt;：指定用户所属的附加群组； -m：自动建立用户的登入目录； -M：不要自动建立用户的登入目录； -n：取消建立以用户名称为名的群组； -r：建立系统帐号； -s&lt;shell&gt;：指定用户登入后所使用的shell； -u&lt;uid&gt;：指定用户id。 参数用户名：要创建的用户名。 实例新建用户加入组： useradd –g sales jack –G company,employees &#x2F;&#x2F;-g：加入主要组、-G：加入次要组 建立一个新用户账户，并设置ID： useradd caojh -u 544 需要说明的是，设定ID值时尽量要大于500，以免冲突。因为Linux安装后会建立一些特殊用户，一般0到499之间的值留给bin、mail这样的系统账号。 服务service对服务的操作 service [服务名] restart # 重启服务 systemctl对服务的操作 适用系统：CentOS systemctl status [服务名] # 查看服务状态 systemctl start [服务名] # 启动服务 systemctl stop [服务名] # 停止服务 systemctl restart [服务名] # 重启服务 systemctl enable [服务名] # 设置服务开机启动 Dockerimages查看镜像 docker images REPOSITORY：镜像名称 TAG：镜像标签 IMAGE ID：镜像ID ACREATED：镜像的创建日期（不是获取该镜像的日期） SIZE：镜像大小 这些镜像都储存在Docker宿主机的/var/lib/docker目录下 search搜索镜像 docker search [镜像名称] INDEX：仓库源 NAME：仓库名称 DESCRIPTION：镜像描述 STARS：用户评价，反映一个镜像的受欢迎程度 OFFICIAL：是否官方 AUTOMATED：自动构建，表示该镜像是由Docker Hub自动构建流程创建的 pull拉取镜像：从中央仓库下载镜像到本地 docker pull [镜像名称] 例如: 要下载centos7镜像 docker pull centos:7 磁盘dfdf命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 语法df [选项] [参数] 选项-a或--all：包含全部的文件系统； --block-size&#x3D;&lt;区块大小&gt;：以指定的区块大小来显示区块数目； -h或--human-readable：以可读性较高的方式来显示信息； -H或--si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes； -i或--inodes：显示inode的信息； -k或--kilobytes：指定区块大小为1024字节； -l或--local：仅显示本地端的文件系统； -m或--megabytes：指定区块大小为1048576字节； --no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值； -P或--portability：使用POSIX的输出格式； --sync：在取得磁盘使用信息前，先执行sync指令； -t&lt;文件系统类型&gt;或--type&#x3D;&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息； -T或--print-type：显示文件系统的类型； -x&lt;文件系统类型&gt;或--exclude-type&#x3D;&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息； --help：显示帮助； --version：显示版本信息。 参数文件：指定文件系统上的文件。 实例查看系统磁盘设备，默认是KB为单位： [root@LinServ-1 ~]# df 文件系统 1K-块 已用 可用 已用% 挂载点 &#x2F;dev&#x2F;sda2 146294492 28244432 110498708 21% &#x2F; &#x2F;dev&#x2F;sda1 1019208 62360 904240 7% &#x2F;boot tmpfs 1032204 0 1032204 0% &#x2F;dev&#x2F;shm &#x2F;dev&#x2F;sdb1 2884284108 218826068 2518944764 8% &#x2F;data1 使用-h选项以KB以上的单位来显示，可读性高： [root@LinServ-1 ~]# df -h 文件系统 容量 已用 可用 已用% 挂载点 &#x2F;dev&#x2F;sda2 140G 27G 106G 21% &#x2F; &#x2F;dev&#x2F;sda1 996M 61M 884M 7% &#x2F;boot tmpfs 1009M 0 1009M 0% &#x2F;dev&#x2F;shm &#x2F;dev&#x2F;sdb1 2.7T 209G 2.4T 8% &#x2F;data1 查看全部文件系统： [root@LinServ-1 ~]# df -a 文件系统 1K-块 已用 可用 已用% 挂载点 &#x2F;dev&#x2F;sda2 146294492 28244432 110498708 21% &#x2F; proc 0 0 0 - &#x2F;proc sysfs 0 0 0 - &#x2F;sys devpts 0 0 0 - &#x2F;dev&#x2F;pts &#x2F;dev&#x2F;sda1 1019208 62360 904240 7% &#x2F;boot tmpfs 1032204 0 1032204 0% &#x2F;dev&#x2F;shm &#x2F;dev&#x2F;sdb1 2884284108 218826068 2518944764 8% &#x2F;data1 none 0 0 0 - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc dudu命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。 语法du [选项] [文件] 选项-a或-all 显示目录中个别文件的大小。 -b或-bytes 显示目录或文件大小时，以byte为单位。 -c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 -k或--kilobytes 以KB(1024bytes)为单位输出。 -m或--megabytes 以MB为单位输出。 -s或--summarize 仅显示总计，只列出最后加总的值。 -h或--human-readable 以K，M，G为单位，提高信息的可读性。 -x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 -L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。 -S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。 -X&lt;文件&gt;或--exclude-from&#x3D;&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。 --exclude&#x3D;&lt;目录或文件&gt; 略过指定的目录或文件。 -D或--dereference-args 显示指定符号链接的源文件大小。 -H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。 -l或--count-links 重复计算硬件链接的文件。 实例显示目录或者文件所占空间： [root@localhost test]# du 608 .&#x2F;test6 308 .&#x2F;test4 4 .&#x2F;scf&#x2F;lib 4 .&#x2F;scf&#x2F;service&#x2F;deploy&#x2F;product 4 .&#x2F;scf&#x2F;service&#x2F;deploy&#x2F;info 12 .&#x2F;scf&#x2F;service&#x2F;deploy 16 .&#x2F;scf&#x2F;service 4 .&#x2F;scf&#x2F;doc 4 .&#x2F;scf&#x2F;bin 32 .&#x2F;scf 8 .&#x2F;test3 1288 . 只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小 显示指定文件所占空间： [root@localhost test]# du log2012.log 300 log2012.log 查看指定目录的所占空间： [root@localhost test]# du scf 4 scf&#x2F;lib 4 scf&#x2F;service&#x2F;deploy&#x2F;product 4 scf&#x2F;service&#x2F;deploy&#x2F;info 12 scf&#x2F;service&#x2F;deploy 16 scf&#x2F;service 4 scf&#x2F;doc 4 scf&#x2F;bin 32 scf 显示多个文件所占空间： [root@localhost test]# du log30.tar.gz log31.tar.gz 4 log30.tar.gz 4 log31.tar.gz 只显示总和的大小: [root@localhost test]# du -s 1288 . [root@localhost test]# du -s scf 32 scf [root@localhost test]# cd .. [root@localhost soft]# du -s test 1288 test 结尾","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"}]},{"title":"Linux","slug":"Linux/Linux","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:13:54.429Z","comments":true,"path":"2020/12/02/Linux/Linux/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux/","excerpt":"","text":"Linux常用命令文件/目录 cd 切换目录 语法: find 查找文件或目录 语法 find path -option [ -print ] [ -exec -ok command ] {} \\ 例子find . -name “*.c” 网络更新包信息，确保APT能使用https方式工作，并且CA证书已安装了 sudo apt-get update # 更新包信息 sudo apt-get install apt-transport-https ca-certificates 常用命令笔者常用Linux系统为Ubuntu , 某些命令是其特有的 文件/文件夹cd切换当前工作目录至 dirName(目录参数)。其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录 (也就是刚 login 时所在的目录)。另外，”~” 也表示为 home 目录 的意思，”.” 则是表示目前所在的目录，”..” 则表示目前目录位置的上一层目录。 示例: cd # 相当于 &#39;cd ~&#39; 进入当前用户主目录 cd &#x2F;root cd ..&#x2F;.. cat用于连接文件并打印到标准输出设备上。 cat [-AbeEnstTuv] [--help] [--version] fileName 参数说明： -n 或 --number：由 1 开始对所有输出的行数编号。 -b 或 --number-nonblank：和 -n 相似，只不过对于空白行不编号。 -s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。 -v 或 --show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。 -E 或 --show-ends : 在每行结束处显示 $。 -T 或 --show-tabs: 将 TAB 字符显示为 ^I。 -A, --show-all：等价于 -vET。 -e：等价于&quot;-vE&quot;选项； -t：等价于&quot;-vT&quot;选项； 示例: # 把 file1 的文档内容加上行号后输入 file2 这个文档里： cat -n file1 &gt; textfile2 # 把&#39;file1&#39;和&#39;file2&#39;的文件内容加上行号(空白行不加)之后附加到&#39;file3&#39;里： cat -b file1 textfile2 &gt;&gt; textfile3 # 清空 &#x2F;etc&#x2F;test.txt 文档内容： cat &#x2F;dev&#x2F;null &gt; &#x2F;etc&#x2F;test.txt cat 也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入： cat &#x2F;dev&#x2F;fd0 &gt; OUTFILE 相反的，如果想把 image file 写到软盘，输入： cat IMG_FILE &gt; &#x2F;dev&#x2F;fd0 注： 1. OUTFILE 指输出的镜像文件名。 2. IMG_FILE 指镜像文件。 3. 若从镜像文件写回 device 时，device 容量需与相当。 4. 通常用制作开机磁片。 mv用来为文件或目录改名、或将文件或目录移入其它位置 mv [options] source dest mv [options] source... directory 参数说明： -i: 若指定目录已有同名文件，则先询问是否覆盖旧文件; -f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示; mv参数设置与运行结果 mv 文件名 文件名 : 将源文件名改为目标文件名 mv 文件名 目录名 : 将文件移动到目标目录 mv 目录名 目录名 : 目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名 mv 目录名 文件名 : 出错 示例: # 将文件 aaa 更名为 bbb mv aaa bbb # 将info目录放入logs目录中。注意，如果logs目录不存在，则该命令将info改名为logs mv info&#x2F; logs # 再如将&#x2F;usr&#x2F;student下的所有文件和目录移到当前目录下，命令行为 mv &#x2F;usr&#x2F;student&#x2F;* rm用于删除一个文件或者目录 rm [options] name... 参数： -i 删除前逐一询问确认。 -f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。 -r 将目录及以下之档案亦逐一删除。 示例: # 删除文件可以直接使用rm命令，若删除目录则必须配合选项&quot;-r&quot;，例如： rm test.txt rm：是否删除 一般文件 &quot;test.txt&quot;? y rm homework rm: 无法删除目录&quot;homework&quot;: 是一个目录 rm -r homework rm：是否删除 目录 &quot;homework&quot;? y # 删除当前目录下的所有文件及目录，命令行为： rm -r * # 删除当前目录下的所有文件及目录，并且是直接删除，无需逐一确认命令行为： rm -rf 要删除的文件名或目录 #删除文件名 test.txt: rm -rf test.txt # 删除目录 test，不管该目录下是否有子目录或文件，都直接删除: rm -rf test&#x2F; pwd显示当前所在目录 mkdir新建文件夹 mkdir touch新建空白文件 touch # 新建空白文件 find查找文件/文件夹 find [PATH] [Option] [action] -newer file:file为一个存在的文件，列出比file还要新的文件名 find &#x2F; -mtime 0———0代表当前的时间，即从现在开始到24小时前，有改动过内容的文件都会被列出来 find &#x2F;etc -newer &#x2F;etc&#x2F;passwd———寻找&#x2F;etc下面的文件，如果文件日期比&#x2F;etc&#x2F;passwd新就列出 find &#x2F; -name file——&#x2F;代表全文搜索 find &#x2F;home -user Anmy——查找&#x2F;home下属于Anmy的文件 find &#x2F; -nouser—— 查找系统中不属于任何人的文件，可以轻易找出那些不太正常的文件 find &#x2F; -name passed—— 查找文件名为passed的文件 find其他参数： -type TYPE: 查找文件类型为TYPE的，类型主要有：一般正规文件(f)、设备文件(b,c)、目录(d)、连接文件(l)、socket（s）及FIFO(p)等属性 -perm mode: 查找文件权限刚好等于mode的文件 -perm +mode:查找文件权限“包含任一mode的权限”的文件。 -perm -mode:查找文件权限“必须要全部包括mode的权限”的文件。 find后其他可进行的操作： -exec command:command为其他命令，-exec后面可再接其他的命令来处理查找到的结果。 -print:将结果打印到屏幕上，为默认操作。 示例: find &#x2F; -name &#39;aaa&#39; -type d # 在&#39;&#x2F;&#39;目录下查找名字为&#39;aaa&#39;的目录 find &#x2F; -name &#39;server.xml&#39; -print # 查找server.xml文件的位置 用户/权限su切换用户,默认为root 示例: su # 切换为root用户 su kvm # 切换成用户名为&#39;kvm&#39;的用户 sudo以root权限执行 示例: sudo apt update 时间日期date显示当前系统时间 date # 打印结果如下 cal/ncal打印日历 示例: cal # 打印当前月日历 cal 8 2017 # 打印2017年8月的日历 ncal # 转置的日历 ncal -C # 正过来了(-_-)!!! 系统uname uname -a uname -r 其它sl # 小火车(需要安装) linux cat &#x2F; bat ls -a&#x2F;-Arf alias &#x2F;&#x2F; 别名 apt &#x2F; snap &#x2F; yum &#x2F;&#x2F; 包管理 find 查找 &#x2F; -name file1 从&#39;&#x2F;&#39;开始进入根目录文件系统搜索文件和目录 &#x2F; -user user1 搜索属于用户&#39;user1&#39;的文件和目录 &#x2F;home -name \\*bin 在&#x2F;home下搜索以bin结尾的文件 &#x2F;home -type f -atime +100 搜索在过去100天内未被使用过的文件 mount &#x2F;dev&#x2F;hda2 &#x2F;mnt&#x2F;hda2 挂载一个叫做hda2的盘 &#x2F;mnt&#x2F;hda2 已存在 umount &#x2F;dev&#x2F;hda2 卸载一个叫做hda2的盘(先从) update - 从服务器更新可用的软件包列表。 upgrade - 根据列表，更新已安装的软件包。upgrade 不会删除在列表中已经没有的软件包，也不会安装有依赖需求但尚未安装的软件包。 full-upgrade - 根据列表，更新已安装的软件包。full-upgrade 可能会为了解决软件包冲突而删除一些已安装的软件包。 dist-upgrade - 根据列表，更新已安装的软件包。dist-upgrade 可能会为了解决软件包冲突而删除一些已安装的软件包，也可能会为了解决软件包依赖问题安装新的软件包。 远程连接安装openssh-server, 可在windows下用Xshell等工具连接 lrzsz 用于传输文件 一些问题xshell 使用 Oh My ZSH home键 end键 小键盘区无效解决办法2017-09-10 zsh是一款超赞的shell工具，但是配置复杂，有个闲着没事的程序员，弄了一个开源项目 robbyrussell/oh-my-zsh 截止目前，58.8k+ star就知道有多火了。比如 Spring boot在github才 15.7K+ spring framework 也16.1k+,最近火到炸天的tensorflow 69.4k 同样很优秀的有 fisherman/fisherman 此文不讲如何安装，如何配置 。有此需求的同学，出门左转，找度娘解决。 此文主要解决，xshell 远程连接时，host将zsh设置成默认shell时，Home,End,小键盘区诸键无效问题 参考连接 Cannot using home/end key after install oh-my-zsh 第一种方法也是最简单的办法是，修改xshell连接此host的终端类型，改成linux 但是注意 @linlinlinlin 所说，改用linux可能会导致shell的颜色比较奇怪。 linuxxterm 结合 @candrew34 和 @linlinlinlin 的回复，得出第二种方案 第二种方法，稍微复杂点 cat &lt;&lt;ENDOF &gt;&gt; ~&#x2F;.zshrc # Home bindkey &#39;\\e[1~&#39; beginning-of-line # End bindkey &#39;\\e[4~&#39; end-of-line # Keypad # 0 . Enter bindkey -s &quot;^[Op&quot; &quot;0&quot; bindkey -s &quot;^[Ol&quot; &quot;.&quot; bindkey -s &quot;^[OM&quot; &quot;^M&quot; # 1 2 3 bindkey -s &quot;^[Oq&quot; &quot;1&quot; bindkey -s &quot;^[Or&quot; &quot;2&quot; bindkey -s &quot;^[Os&quot; &quot;3&quot; # 4 5 6 bindkey -s &quot;^[Ot&quot; &quot;4&quot; bindkey -s &quot;^[Ou&quot; &quot;5&quot; bindkey -s &quot;^[Ov&quot; &quot;6&quot; # 7 8 9 bindkey -s &quot;^[Ow&quot; &quot;7&quot; bindkey -s &quot;^[Ox&quot; &quot;8&quot; bindkey -s &quot;^[Oy&quot; &quot;9&quot; # + - * &#x2F; bindkey -s &quot;^[Ok&quot; &quot;+&quot; bindkey -s &quot;^[Om&quot; &quot;-&quot; bindkey -s &quot;^[Oj&quot; &quot;*&quot; bindkey -s &quot;^[Oo&quot; &quot;&#x2F;&quot; ENDOF source ~&#x2F;.zshrc 另附 客户端putty, xshell连接linux中vim的小键盘问题 UbuntuUbuntu18.04安装MySQL8.0为什么要做这个呢？因为不知道为什么我Ubuntu18.04 安装MySQL5.7 之后，终端不能输入中文。网上的方法试了个遍。无论是各种改utf8，还是系统字符集更改，还是添加字符集，等等，都不行。无奈，只好卸载5.7，装上最新的MySQL8.0. 装完之后立马就可以输入中文，开心。嘿嘿！ 首先删除mysql: sudo apt-get remove mysql-* 然后清理残留的数据 dpkg -l |grep ^rc|awk &#39;&#123;print $2&#125;&#39; |sudo xargs dpkg -P 它会跳出一个对话框，你选择yes就好了 然后就是安装了，但是呢，不能用 sudo apt-get install mysql-client mysql-server 为什么呢？因为这时候安装的还是5.7.阅读了一下MySQL安装指南，发现MySQL5.7版本最高只适配到Ubuntu17.04，而MySQL8.0最高适配到Ubuntu18.04。 那怎么办呢？ 官网去整一个答案回来. 如下： 首先要去官网 下载一个 mysql-apt-config_0..***_all.deb， 在文件夹中找到下载的具体文件，并执行（下面的 * 是省略的意思，你自己要改） sudo dpkg -i mysql-apt-config_0.*.****_all.deb 安装执行, 然后会出现一个紫色框界面. 它有四个选项。选择第一个, enter确定, 然后又会出现一个紫色框界面, 选择8.0那个。enter确定， 会回到第一个紫色框，此时按上下键选择 ok，enter确定。 之后执行 sudo apt-get update sudo apt-get install mysql-server 安装过程中会询问，都选择yes. 安装最后会出现紫色框，让你输入密码，输入完成之后，会再让你输入一遍。确定. 输入完成之后，会出现紫色框问你选择密码的加密方式。因为第一种加密方式Ubuntu不支持，所以我们选择第二个加密方式。enter确定。 此时启动MySQL： service mysql start 进入MySQL: mysql -uroot -p 输入中文测试，成功！ 参考： https://www.jianshu.com/p/c76b31df5d09 https://jingyan.baidu.com/article/fdbd4277bb981ab89e3f4897.html https://blog.csdn.net/weixin_37946237/article/details/81634505 问题 连接MySQL时报错: ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;&#x2F;tmp&#x2F;mysql.sock&#39; (2) 解决办法: 我的第一个建议是检查MySQL服务器是否正在运行。第二个建议可能是，MySQL服务器是否在另一个主机上运行？如果是，则添加-h 标记到终端中的MySQL客户端。 如果MySQL确实在运行，并且在本地运行，请检查my.cnf档案。应该有这样一条线 socket = /var/run/mysqld/mysqld.sock 看看这是否与您在文章中提到的套接字位置相匹配。 根据经验，我认为最有可能的情况是MySQL服务器要么根本没有运行，要么没有在与从终端运行MySQL客户端的主机相同的主机上运行。 无法远程连接 从MySQL 8开始，您不再可以（隐式）使用GRANT命令创建用户。请改用CREATE USER，然后使用GRANT语句： mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'root'; mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; tomcat安装介绍Apache Tomcat是一个Web服务器和servlet容器，用于为Java应用程序提供服务。 Tomcat是Apache Software Foundation发布的Java Servlet和JavaServer Pages技术的开源实现。 本教程介绍了Ubuntu 18.04服务器上最新版Tomcat 9的基本安装和一些配置。 先决条件在开始本指南之前，您应该拥有一个在您的服务器上设置了sudo权限的非root用户。 您可以通过完成我们的Ubuntu 16.04初始服务器设置指南来了解如何执行此操作。 第1步-安装JavaTomcat要求在服务器上安装Java，以便可以执行任何Java Web应用程序代码。 我们可以通过apt安装OpenJDK来满足这个要求。 首先，更新你的apt包索引： sudo apt update 然后使用apt安装Java Development Kit软件包： sudo apt install default-jdk 现在已经安装了Java，我们可以创建一个tomcat用户，该用户将用于运行Tomcat服务。 第2步-创建Tomcat用户出于安全考虑，Tomcat应该作为非特权用户运行（即不是root用户）。 我们将创建一个将运行Tomcat服务的新用户和组。 首先，创建一个新的tomcat组： sudo groupadd tomcat 接下来，创建一个新的tomcat用户。 我们将使这个用户成为tomcat组的成员，主目录为/opt/tomcat （我们将安装Tomcat），shell为/bin/false （因此没有人可以登录该帐户）： sudo useradd -s &#x2F;bin&#x2F;false -g tomcat -d &#x2F;opt&#x2F;tomcat tomcat 现在我们已经设置了tomcat用户，让我们下载并安装Tomcat。 第3步-安装Tomcat安装Tomcat 9的最佳方法是下载最新的二进制版本，然后手动配置它。 在Tomcat 9下载页面上找到最新版本的Tomcat 9。 在撰写本文时，最新版本为9.0.10 ，但如果可用，则应使用更高版本的稳定版本。 在Binary Distributions部分下，然后在Core列表下，将链接复制到“tar.gz”。 接下来，切换到服务器上的/tmp目录。 这是一个很好的下载短暂项目的目录，比如Tomcat tarball，在提取Tomcat内容后我们不需要这样： cd &#x2F;tmp 使用curl下载从Tomcat网站复制的链接： curl -O http:&#x2F;&#x2F;mirror.cc.columbia.edu&#x2F;pub&#x2F;software&#x2F;apache&#x2F;tomcat&#x2F;tomcat-9&#x2F;v9.0.10&#x2F;bin&#x2F;apache-tomcat-9.0.10.tar.gz 我们将Tomcat安装到/opt/tomcat目录。 创建目录，然后使用以下命令将存档解压缩到它： sudo mkdir &#x2F;opt&#x2F;tomcat sudo tar xzvf apache-tomcat-9*tar.gz -C &#x2F;opt&#x2F;tomcat --strip-components&#x3D;1 接下来，我们可以为我们的安装设置适当的用户权限。 第4步 - 更新权限我们设置的tomcat用户需要能够访问Tomcat安装。 我们现在就把它搞定。 切换到我们解压缩Tomcat安装的目录： cd &#x2F;opt&#x2F;tomcat 授予tomcat组对整个安装目录的所有权： sudo chgrp -R tomcat &#x2F;opt&#x2F;tomcat 接下来，让tomcat组对conf目录及其所有内容进行读访问，并执行对目录本身的访问： sudo chmod -R g+r conf sudo chmod g+x conf 使tomcat用户成为webapps ， work ， temp和logs目录的所有者： sudo chown -R tomcat webapps&#x2F; work&#x2F; temp&#x2F; logs&#x2F; 现在已经设置了适当的权限，我们可以创建一个systemd服务文件来管理Tomcat进程。 第5步 - 创建systemd服务文件我们希望能够将Tomcat作为服务运行，因此我们将设置systemd服务文件。 Tomcat需要知道Java的安装位置。 此路径通常称为“JAVA_HOME”。 查找该位置的最简单方法是运行此命令： sudo update-java-alternatives -l Outputjava-1.11.0-openjdk-amd64 1081 &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.11.0-openjdk-amd64 您的JAVA_HOME是最后一列的输出（以红色突出显示）。 鉴于上面的示例，此服务器的正确JAVA_HOME将是： JAVA_HOME&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.11.0-openjdk-amd64 你的JAVA_HOME可能会有所不同。 有了这条信息，我们就可以创建systemd服务文件了。 键入以下命令，在/etc/systemd/system目录中打开名为tomcat.service的文件： sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;tomcat.service 将以下内容粘贴到您的服务文件中。 如有必要，修改JAVA_HOME的值以匹配您在系统上找到的值。 您可能还想修改CATALINA_OPTS中指定的内存分配设置： /etc/systemd/system/tomcat.service [Unit] Description&#x3D;Apache Tomcat Web Application Container After&#x3D;network.target [Service] Type&#x3D;forking Environment&#x3D;JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.11.0-openjdk-amd64 Environment&#x3D;CATALINA_PID&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;temp&#x2F;tomcat.pid Environment&#x3D;CATALINA_HOME&#x3D;&#x2F;opt&#x2F;tomcat Environment&#x3D;CATALINA_BASE&#x3D;&#x2F;opt&#x2F;tomcat Environment&#x3D;&#39;CATALINA_OPTS&#x3D;-Xms512M -Xmx1024M -server -XX:+UseParallelGC&#39; Environment&#x3D;&#39;JAVA_OPTS&#x3D;-Djava.awt.headless&#x3D;true -Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&#39; ExecStart&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;startup.sh ExecStop&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;shutdown.sh User&#x3D;tomcat Group&#x3D;tomcat UMask&#x3D;0007 RestartSec&#x3D;10 Restart&#x3D;always [Install] WantedBy&#x3D;multi-user.target 完成后，保存并关闭文件。 接下来，重新加载systemd守护程序，以便它知道我们的服务文件： sudo systemctl daemon-reload 键入以下命令启动Tomcat服务： sudo systemctl start tomcat 键入以下内容，仔细检查它是否正常启动： sudo systemctl status tomcat 第6步 - 调整防火墙并测试Tomcat服务器现在Tomcat服务已启动，我们可以测试以确保默认页面可用。 在我们这样做之前，我们需要调整防火墙以允许我们的请求到达服务。 如果您遵循先决条件，则当前将启用ufw防火墙。 Tomcat使用端口8080接受传统请求。 输入以下内容允许到该端口的流量： sudo ufw allow 8080 修改防火墙后，您可以通过在Web浏览器中访问您的域或IP地址，然后访问:8080来访问默认启动页面： Open in web browserhttp:&#x2F;&#x2F;server_domain_or_IP:8080 除了其他信息之外，您还将看到默认的Tomcat启动页面。 但是，例如，如果单击Manager App的链接，则将拒绝您访问。 我们接下来可以配置该访问。 如果您能够成功访问Tomcat，现在是启用服务文件的好时机，以便Tomcat在启动时自动启动： sudo systemctl enable tomcat 第7步-配置Tomcat Web管理界面为了使用Tomcat附带的管理器Web应用程序，我们必须向Tomcat服务器添加登录。 我们将通过编辑tomcat-users.xml文件来完成此操作： sudo nano &#x2F;opt&#x2F;tomcat&#x2F;conf&#x2F;tomcat-users.xml 您将需要添加可以访问manager-gui和admin-gui （Tomcat附带的Web应用程序）的用户。 您可以通过在tomcat-users标记之间定义类似于下面示例tomcat-users目的。 请务必将用户名和密码更改为安全的内容： tomcat-users.xml - 管理员用户 &lt;tomcat-users . . .&gt; &lt;user username&#x3D;&quot;admin&quot; password&#x3D;&quot;password&quot; roles&#x3D;&quot;manager-gui,admin-gui&quot;&#x2F;&gt; &lt;&#x2F;tomcat-users&gt; 完成后保存并关闭文件。 默认情况下，较新版本的Tomcat将对Manager和Host Manager应用程序的访问限制为来自服务器本身的连接。 由于我们在远程计算机上安装，您可能希望删除或更改此限制。 要更改对这些的IP地址限制，请打开相应的context.xml文件。 对于Manager应用，请键入： sudo nano &#x2F;opt&#x2F;tomcat&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;context.xml 对于Host Manager应用程序，请键入： sudo nano &#x2F;opt&#x2F;tomcat&#x2F;webapps&#x2F;host-manager&#x2F;META-INF&#x2F;context.xml 在内部，注释掉IP地址限制以允许来自任何地方的连接。 或者，如果您只允许访问来自您自己的IP地址的连接，您可以将您的公共IP地址添加到列表中： Tomcat webapps的context.xml文件 &lt;Context antiResourceLocking&#x3D;&quot;false&quot; privileged&#x3D;&quot;true&quot; &gt; &lt;!--&lt;Valve className&#x3D;&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow&#x3D;&quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1&quot; &#x2F;&gt;--&gt; &lt;&#x2F;Context&gt; 完成后保存并关闭文件。 要使我们的更改生效，请重新启动Tomcat服务： sudo systemctl restart tomcat 第8步-访问Web界面现在我们已经创建了一个用户，我们可以在Web浏览器中再次访问Web管理界面。 再一次，您可以通过在浏览器中输入端口8080后面的服务器域名或IP地址来访问正确的界面： Open in web browserhttp:&#x2F;&#x2F;server_domain_or_IP:8080 您看到的页面应该与您之前测试时给出的页面相同： 我们来看看Manager App，可以通过链接或http:// server_domain_or_IP :8080/manager/html 。 您需要输入添加到tomcat-users.xml文件的帐户凭据。 之后，您应该看到如下所示的页面： Web应用程序管理器用于管理Java应用程序。 您可以在此处启动，停止，重新加载，部署和取消部署。 您还可以在应用程序上运行一些诊断程序（即查找内存泄漏）。 最后，本页最下方提供了有关您的服务器的信息。 现在让我们看看主机管理器，可以通过链接或http:// server_domain_or_IP :8080/host-manager/html/ ： 在Virtual Host Manager页面中，您可以添加虚拟主机以便为您的应用程序提供服务。 结论你的Tomcat安装完成了！ 您现在可以自由部署自己的Java Web应用程序了！ 目前，您的Tomcat安装功能正常，但完全未加密。 这意味着所有数据（包括密码等敏感项目）都以纯文本形式发送，可以被互联网上的其他方拦截和阅读。 为了防止这种情况发生，强烈建议您使用SSL加密连接。 您可以按照本指南了解如何加密与Tomcat的连接（ 注意：本指南介绍了Ubuntu 16.04上的Tomcat 8加密 ）。 ManjaroLinux系统Manjaro分辨率调整恢复意外情况近期将一台六年前的老笔记本换成了Manjaro系统，今晚外接显示器时突然原笔记本电脑屏幕的分辨率降低，并且在系统设置页面中丢失了原有的1380×760分辨率，最大只有960×540的分辨率。 问题解决-通过命令行添加自定义分辨率既然是linux系统，设置有关的内容一定可以用命令行解决。系统设置丢失了分辨率模式，自己手动加上去就行了。 首先用管理员权限，查看当前显示器的分辨模式 sudo xrandr -q [parrysms@parrysms-pc ~]$ sudo xrandr -q Screen 0: minimum 8 x 8, current 960x540, maximum 32767 x 32767 LVDS1 connected primary 960x540+0+0 (normal left inverted right x axis y axis) 310mm x 170mm 960x540 59.82 864x486 60.00 59.92 59.57 640x480 59.94 DP1 disconnected (normal left inverted right x axis y axis) HDMI1 disconnected (normal left inverted right x axis y axis) VGA1 disconnected (normal left inverted right x axis y axis) 命令行会显示系统里有的分辨率。如果没有你显示器对应的分辨率，那么就需要自行添加，添加的第一步是使用cvt设置自定义分辨率。注意这里cvt命令后面两个的分辨率参数一定得是小于等于显示器最大支持的分辨率。 sudo cvt 1360 768 [parrysms@parrysms-pc ~]$ cvt 1360 768 # 1360x768 59.80 Hz (CVT) hsync: 47.72 kHz; pclk: 84.75 MHz Modeline &quot;1360x768_60.00&quot; 84.75 1360 1432 1568 1776 768 771 781 798 -hsync +vsync 此时将会显示两行信息，找到 Modeline &quot;1360x768_60.00&quot; 的这个部分。Modeline 后面的 “1380x760_60.00” 部分是这个分辨率的模式及的名字，从引号开始到最后全部选中复制下来。（命令行里鼠标右键有复制选项） 使用参数新增分辨率模式，指令如下：xrandr --newmode 加上Modeline 后面的分辨率模式名以及一连串数字 举例而言，我的指令是sudo xrandr --newmode &quot;1360x768_60.00&quot; 84.75 1360 1432 1568 1776 768 771 781 798 -hsync +vsync 最后，需要将新的自定义分辨率模式，添加到指定的显示器配置中，显示器名字就是最开始sudo xrandr -q 命令中看到有分辨率模式的那个显示器。如果不想往上翻可以重新敲命令查一次。 [parrysms@parrysms-pc ~]$ sudo xrandr -q Screen 0: minimum 8 x 8, current 960x540 maximum 32767 x 32767 LVDS1 connected primary 960x540+0+0 (normal left inverted right x axis y axis) 310mm x 170mm 960x540 59.82 864x486 60.00 59.92 59.57 640x480 59.94 DP1 disconnected (normal left inverted right x axis y axis) HDMI1 disconnected (normal left inverted right x axis y axis) VGA1 disconnected (normal left inverted right x axis y axis) 这里可以看到笔记本自带的显示器名字是 LVDS1，所以使用addmode指令来添加。指令如下： sudo xrandr --addmode 显示器名 分辨率模式名 因此我的指令是 （注意引号）：sudo xrandr --addmode LVDS1 &quot;1360x768_60.00&quot; 最后一步，output 输出使其配置生效即可。指令如下： sudo xrandr --output 显示器名 --mode 分辨率模式名 因此我的指令是 （注意引号）：sudo xrandr --output LVDS1 --mode &quot;1360x768_60.00&quot; 最后敲下回车，随着屏幕一闪，自定义分辨率就生效了。 zshshell (计算机壳层)在计算机科学中，Shell俗称壳（用来区别于核），是指“为使用者提供操作界面”的软件（命令解析器）。它类似于DOS下的command.com和后来的cmd.exe。它接收用户命令，然后调用相应的应用程序。 基本上shell分两大类： 一：图形界面shell（Graphical User Interface shell 即 GUI shell） 例如：应用最为广泛的 Windows Explorer （微软的windows系列操作系统），还有也包括广为人知的 Linux shell，其中linux shell 包括 X window manager (BlackBox和FluxBox），以及功能更强大的CDE、GNOME、KDE、 XFCE。 二：命令行式shell（Command Line Interface shell ，即CLI shell） 例如： bash / sh / ksh / csh / zsh（Unix/linux 系统） （MS-DOS系统） cmd.exe/ 命令提示字符（[Windows NT](https://baike.baidu.com/item/Windows NT) 系统） Windows PowerShell（支持 .NET Framework 技术的 Windows NT 系统） 传统意义上的shell指的是命令行式的shell，以后如果不特别注明，shell是指命令行式的shell。 文字操作系统与外部最主要的接口就叫做shell。shell是操作系统最外面的一层。shell管理你与操作系统之间的交互：等待你输入，向操作系统解释你的输入，并且处理各种各样的操作系统的输出结果。 shell提供了你与操作系统之间通讯的方式。这种通讯可以以交互方式（从键盘输入，并且可以立即得到响应），或者以shell script(非交互）方式执行。shell script是放在文件中的一串shell和操作系统命令，它们可以被重复使用。本质上，shell script是命令行命令简单的组合到一个文件里面。 Shell基本上是一个命令解释器，类似于DOS下的command。它接收用户命令（如ls等），然后调用相应的应用程序。较为通用的shell有标准的Bourne shell (sh）和C shell (csh）。 交互式shell和非交互式shell 交互式模式就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。 shell也可以运行在另外一种模式：非交互式模式。在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令，并且执行它们。当它读到文件的结尾，shell也就终止了。 shell的类型 在UNIX中主要有： Bourne shell （包括 sh,ksh,and bash) Bourne shell ( sh) Korn shell ( ksh) Bourne Again shell ( bash) POSIX shell ( sh) C shell （包括 csh and tcsh) C shell ( csh) TENEX/TOPS C shell ( tcsh) Bourne Shell **** 首个重要的标准Unix Shell是1979年底在V7 Unix(AT&amp;T第7版）中引入的，并且以它的创始科技部基础条件平台“国家气象网络计算应用节点建设”（2004DKA50730）资助者Stephen Bourne的名字命名。Bourne shell 是一个交换式的命令解释器和命令编程语言。Bourne shell 可以运行为login shell或者login shell的子shell(subshell）。只有login命令可以调用Bourne shell作为一个login shell。此时，shell先读取/etc/profile文件和$HOME/.profile文件。/etc/profile文件为所有的用户定制环境，$HOME/.profile文件为本用户定制环境。最后，shell会等待读取你的输入。 C Shell Bill Joy于20世纪80年代早期，在伯克利的加利福尼亚大学开发了C shell。它主要是为了让用户更容易的使用交互式功能，并把ALGOL风格的语法结构变成了C语言风格。它新增了命令历史、别名、文件名替换、作业控制等功能。 Korn Shell 有很长一段时间，只有两类shell供人们选择，Bourne shell用来编程，C shell用来交互。为了改变这种状况，AT&amp;T的bell实验室David Korn开发了Korn shell。ksh结合了所有的C shell的交互式特性，并融入了Bourne shell的语法。因此，Korn shell广受用户的欢迎。它还新增了数学计算，进程协作（coprocess）、行内编辑（inline editing）等功能。Korn Shell 是一个交互式的命令解释器和命令编程语言.它符合POSIX——一个操作系统的国际标准.POSIX不是一个操作系统，而是一个目标在于应用程序的移植性的标准——在源程序一级跨越多种平台。 Bourne Again Shell (bash) bash是GNU计划的一部分，用来替代Bourne shell。它用于基于GNU的系统如Linux.大多数的Linux(Red Hat,Slackware,Caldera）都以bash作为缺省的shell，并且运行sh时，其实调用的是bash。 POSIX Shell POSIX shell 是Korn shell的一个变种. 当前提供POSIX shell的最大卖主是Hewlett-Packard。在HP-UX 11.0,POSIX shell 就是/bin/sh，而bsh是/usr/old/bin/sh. 各主要操作系统下缺省的shell: AIX下是Korn Shell. Solaris缺省的是Bourne shell. FreeBSD缺省的是C shell HP-UX缺省的是POSIX shell. Linux是Bourne Again shell. [Windows PowerShell](https://baike.baidu.com/item/Windows PowerShell)是一种新的交互式的命令行和基于任务脚本编写技术，它使信息技术(IT) 管理员能够全面地自动操作和控制系统管理任务，从而提高了管理员的生产力。Windows PowerShell 包括多个系统管理实用工具、一致的语法和命名惯例、及对普通管理数据更好地导航，如登记、证书存储 或 Windows Management Instrumentation (WMI）。Windows PowerShell 还专门针对 IT 管理，提供直观的脚本编写语言。 Shell也是一个VB函数，它的作用是运行程序，语法是Shell（命令字符串[，窗口类型]) 用途使用用户的缺省凭证和环境执行 shell。 在UEFI环境下，EFI的Shell环境提供了一组丰富的扩展和增强的命令，在以后的计算机中，传统的DOS界面将会被SHELL环境所取代，所有的.exe文件将不会在以后支持SHELL的环境中出现，取而代之的文件后缀是.efi。在SHELL环境下，分为IA32和X64，32位的*.efi文件不能在X64的计算机中运行。 相对于其他系统，Mac 的主要优势是什么？ 你们平时用哪种 Shell？ …… 第一个童靴可以坐下了，Mac 的最大优势是 GUI 和命令行的完美结合，不要把所有注意力放在 Mac 性感的腰身和明媚的显示屏上好吧，这不是妹纸！第二个童靴你可以出去面壁了，讲了这么多期 MacTalk 你告诉我还在用 Windows 的 cmd， 你让 Mac 君情何以堪？哪怕你就说在用 Linux 的 Bash 我也就原谅你了，踢飞！ 上次在「如何学习一门编程语言」里提到了 Shell，也有读者问到 Shell 的问题，所以这次给大家说说 Shell 的事。 我在「趣谈个人建站」里介绍过一点 Shell，自己的东西借用下不丢人，把扯淡的拿掉，干货留下，就是如下内容： Shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。 Linux/Unix提供了很多种Shell，为毛要这么多Shell？难道用来炒着吃么？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等，想知道你的系统有几种shell，可以通过以下命令查看： cat &#x2F;etc&#x2F;shells 显示如下： &#x2F;bin&#x2F;bash &#x2F;bin&#x2F;csh &#x2F;bin&#x2F;ksh &#x2F;bin&#x2F;sh &#x2F;bin&#x2F;tcsh &#x2F;bin&#x2F;zsh 在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，这是个神马 Shell 呢？ 目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：https://github.com/robbyrussell/oh-my-zsh。这玩意就像「X天叫你学会 C++」系列，可以让你神功速成，而且是真的。 好，下面我们看看如何安装、配置和使用 zsh。 安装zsh 如果你用 Mac，就可以直接看下一节如果你用 Redhat Linux，执行：sudo yum install zsh如果你用 Ubuntu Linux，执行：sudo apt-get install zsh如果你用 Windows……去洗洗睡吧。 安装完成后设置当前用户使用 zsh：chsh -s /bin/zsh，根据提示输入当前用户的密码就可以了。 安装oh my zsh 首先安装 git，安装方式同上，把 zsh 换成 git 即可。 安装「oh my zsh」可以自动安装也可以手动安装。 自动安装： wget https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;raw&#x2F;master&#x2F;tools&#x2F;install.sh -O - | sh 手动安装： git clone git:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zsh cp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc 都不复杂，安装完成之后退出当前会话重新打开一个终端窗口，你就可以见到这个彩色的提示了： 配置 zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字： # Customize to your needs… 可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。 接下来进行别名的设置，我自己的部分配置如下： alias cls&#x3D;&#39;clear&#39; alias ll&#x3D;&#39;ls -l&#39; alias la&#x3D;&#39;ls -a&#39; alias vi&#x3D;&#39;vim&#39; alias javac&#x3D;&quot;javac -J-Dfile.encoding&#x3D;utf8&quot; alias grep&#x3D;&quot;grep --color&#x3D;auto&quot; alias -s html&#x3D;mate # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开 alias -s rb&#x3D;mate # 在命令行直接输入 ruby 文件，会在 TextMate 中打开 alias -s py&#x3D;vi # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似 alias -s js&#x3D;vi alias -s c&#x3D;vi alias -s java&#x3D;vi alias -s txt&#x3D;vi alias -s gz&#x3D;&#39;tar -xzvf&#39; alias -s tgz&#x3D;&#39;tar -xzvf&#39; alias -s zip&#x3D;&#39;unzip&#39; alias -s bz2&#x3D;&#39;tar -xjvf&#39; zsh 的牛粪之处在于不仅可以设置通用别名，还能针对文件类型设置对应的打开程序，比如： alias -s html=mate，意思就是你在命令行输入 hello.html，zsh会为你自动打开 TextMat 并读取 hello.html； alias -s gz=’tar -xzvf’，表示自动解压后缀为 gz 的压缩包。 总之，只有想不到，木有做不到。 设置完环境变量和别名之后，基本上就可以用了，如果你是个主题控，还可以玩玩 zsh 的主题。在 .zshrc 里找到ZSH_THEME，就可以设置主题了，默认主题是： ZSH_THEME=”robbyrussell” oh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes目录下，你可以随意选择，也可以编辑主题满足自己的变态需求，我采用了默认主题robbyrussell，不过做了一点小小的改动： PROMPT&#x3D;&#39;%&#123;$fg_bold[red]%&#125;➜ %&#123;$fg_bold[green]%&#125;%p%&#123;$fg[cyan]%&#125;%d %&#123;$fg_bold[blue]%&#125;$(git_prompt_info)%&#123;$fg_bold[blue]%&#125;% %&#123;$reset_color%&#125;&gt;&#39; #PROMPT&#x3D;&#39;%&#123;$fg_bold[red]%&#125;➜ %&#123;$fg_bold[green]%&#125;%p %&#123;$fg[cyan]%&#125;%c %&#123;$fg_bold[blue]%&#125;$(git_prompt_info)%&#123;$fg_bold[blue]%&#125; % %&#123;$reset_color%&#125;&#39; 对照原来的版本，我把 c 改为 d，c 表示当前目录，d 表示绝对路径，另外在末尾增加了一个「 &gt; 」，改完之后的效果是这样的： 大家可以尝试进行改造，也算个趣事。 最后我们来说说插件。 插件 oh my zsh 项目提供了完善的插件体系，相关的文件在~/.oh-my-zsh/plugins目录下，默认提供了100多种，大家可以根据自己的实际学习和工作环境采用，想了解每个插件的功能，只要打开相关目录下的 zsh 文件看一下就知道了。插件也是在.zshrc里配置，找到plugins关键字，你就可以加载自己的插件了，系统默认加载 git ，你可以在后面追加内容，如下： plugins&#x3D;(git textmate ruby autojump osx mvn gradle) 下面简单介绍几个： 1、git：当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，如上图所示，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh 2、textmate：mr可以创建 ruby 的框架项目，tm finename 可以用 textmate 打开指定文件。 3、osx：tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。 4、autojump：zsh 和 autojump 的组合形成了 zsh 下最强悍的插件，今天我们主要说说这货。 首先安装autojump，如果你用 Mac，可以使用 brew 安装： brew install autojump 如果是 Linux，去下载 autojump 的最新版本，比如： wget https:&#x2F;&#x2F;github.com&#x2F;downloads&#x2F;joelthelion&#x2F;autojump&#x2F;autojump_v21.1.2.tar.gz 解压缩后进入目录，执行 .&#x2F;install.sh 最后把以下代码加入.zshrc： [[ -s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh 至此，安装、配置、插件三位一体，终极 Shell 全面登场。退出终端会话重新登录，开始感受 zsh 的训疾如风！ 使用 zsh 1、兼容 bash，原来使用 bash 的兄弟切换过来毫无压力，该咋用咋用。 2、强大的历史纪录功能，输入 grep 然后用上下箭头可以翻阅你执行的所有 grep 命令。 3、智能拼写纠正，输入gtep mactalk * -R，系统会提示：zsh: correct ‘gtep’ to ‘grep’ [nyae]? 比妹纸贴心吧，她们向来都是让你猜的…… 4、各种补全：路径补全、命令补全，命令参数补全，插件内容补全等等。触发补全只需要按一下或两下 tab 键，补全项可以使用 ctrl+n/p/f/b上下左右切换。比如你想杀掉 java 的进程，只需要输入 kill java + tab键，如果只有一个 java 进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。ssh + 空格 + 两个tab键，zsh会列出所有访问过的主机和用户名进行补全 5、智能跳转，安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过hadoop-1.0.0目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。 6、目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。 7、在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。 8、通配符搜索：ls -l */.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find，文件太多就歇菜了。 9、更强的别名：请参考配置一节。 10、插件支持：请参考插件一节。 …… 看完这篇文章，你就知道，zsh一出，无人再与争锋！终极二字不是盖的。 如果你是个正在使用 shell程序员，如果你依然准备使用 bash，那就去面壁和忏悔吧，别说你订阅过 MacTalk！ 感谢那位开发了 oh my zsh 的无聊程序员，他可能没有因此收获物质上的利益，但是他的代码提升了无数程序员的效率，节省了大量的时间，我们说，程序员改变世界！ MacTalk 写的多了，朋友和家人都不太理解，这玩意赚不了钱争不了名，写来何用？我想，能够学习、编码、写作，并做出一点帮助别人的东西，总好过炒股炒房的价值吧…… 结束","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"}]},{"title":"Linux入门2 常用基本命令","slug":"Linux/Linux入门2 常用基本命令","date":"2020-12-02T11:09:10.000Z","updated":"2020-12-02T11:14:29.326Z","comments":true,"path":"2020/12/02/Linux/Linux入门2 常用基本命令/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%85%A5%E9%97%A82%20%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"对于linux系统来说，你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。 目录管理 绝对路径和相对路径 我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。 其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。 在开始本教程前我们需要先知道什么是绝对路径与相对路径。 绝对路径： 路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。 相对路径： 路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！ 处理目录的常用命令 接下来我们就来看几个常见的处理目录的命令吧： ls: 列出目录 cd：切换目录 pwd：显示目前的目录 mkdir：创建一个新的目录 rmdir：删除一个空的目录 cp: 复制文件或目录 rm: 移除文件或目录 mv: 移动文件与目录，或修改文件与目录的名称 你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。 ls （列出目录） 在Linux系统当中， ls 命令可能是最常被运行的。 语法： [root@www ~]# ls [-aAdfFhilnrRSt] 目录名称 选项与参数： -a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用) -l ：长数据串列出，包含文件的属性与权限等等数据；(常用) 将目录下的所有文件列出来(含属性与隐藏档) [root@www ~]# ls -al ~ cd （切换目录） cd是Change Directory的缩写，这是用来变换工作目录的命令。 语法： cd [相对路径或绝对路径] 测试： # 切换到用户目录下 [root@kuangshen &#x2F;]# cd home # 使用 mkdir 命令创建 kuangstudy 目录 [root@kuangshen home]# mkdir kuangstudy # 进入 kuangstudy 目录 [root@kuangshen home]# cd kuangstudy # 回到上一级 [root@kuangshen kuangstudy]# cd .. # 回到根目录 [root@kuangshen kuangstudy]# cd &#x2F; # 表示回到自己的家目录，亦即是 &#x2F;root 这个目录 [root@kuangshen kuangstudy]# cd ~ 接下来大家多操作几次应该就可以很好的理解 cd 命令的。 pwd ( 显示目前所在的目录 ) pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。 [root@kuangshen kuangstudy]#pwd [-P] 选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。 测试： # 单纯显示出目前的工作目录 [root@kuangshen ~]# pwd &#x2F;root # 如果是链接，要显示真实地址，可以使用 -P参数 [root@kuangshen &#x2F;]# cd bin [root@kuangshen bin]# pwd -P &#x2F;usr&#x2F;bin mkdir （创建新目录） 如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。 mkdir [-mp] 目录名称 选项与参数： -m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～ -p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！ 测试： # 进入我们用户目录下 [root@kuangshen &#x2F;]# cd &#x2F;home # 创建一个 test 文件夹 [root@kuangshen home]# mkdir test # 创建多层级目录 [root@kuangshen home]# mkdir test1&#x2F;test2&#x2F;test3&#x2F;test4 mkdir: cannot create directory ‘test1&#x2F;test2&#x2F;test3&#x2F;test4’: No such file or directory # &lt;&#x3D;&#x3D; 没办法直接创建此目录啊！ # 加了这个 -p 的选项，可以自行帮你创建多层目录！ [root@kuangshen home]# mkdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4 # 创建权限为 rwx--x--x 的目录。 [root@kuangshen home]# mkdir -m 711 test2 [root@kuangshen home]# ls -l drwxr-xr-x 2 root root 4096 Mar 12 21:55 test drwxr-xr-x 3 root root 4096 Mar 12 21:56 test1 drwx--x--x 2 root root 4096 Mar 12 21:58 test2 rmdir ( 删除空的目录 ) 语法： rmdir [-p] 目录名称 选项与参数：**-p ：**连同上一级『空的』目录也一起删除 测试： # 看看有多少目录存在？ [root@kuangshen home]# ls -l drwxr-xr-x 2 root root 4096 Mar 12 21:55 test drwxr-xr-x 3 root root 4096 Mar 12 21:56 test1 drwx--x--x 2 root root 4096 Mar 12 21:58 test2 # 可直接删除掉，没问题 [root@kuangshen home]# rmdir test # 因为尚有内容，所以无法删除！ [root@kuangshen home]# rmdir test1 rmdir: failed to remove ‘test1’: Directory not empty # 利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 依次删除。 [root@kuangshen home]# rmdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4 注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！ cp ( 复制文件或目录 ) 语法： [root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination) [root@www ~]# cp [options] source1 source2 source3 .... directory 选项与参数： -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用) -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)； -d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身； -r：递归持续复制，用於目录的复制行为；(常用) -f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。 -s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件； -u：若 destination 比 source 旧才升级 destination ！ 测试： # 找一个有文件的目录，我这里找到 root目录 [root@kuangshen home]# cd &#x2F;root [root@kuangshen ~]# ls install.sh [root@kuangshen ~]# cd &#x2F;home # 复制 root目录下的install.sh 到 home目录下 [root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home [root@kuangshen home]# ls install.sh # 再次复制，加上-i参数，增加覆盖询问？ [root@kuangshen home]# cp -i &#x2F;root&#x2F;install.sh &#x2F;home cp: overwrite ‘&#x2F;home&#x2F;install.sh’? y # n不覆盖，y为覆盖 rm ( 移除文件或目录 ) 语法： rm [-fir] 文件或目录 选项与参数： -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息； -i ：互动模式，在删除前会询问使用者是否动作 -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！ 测试： # 将刚刚在 cp 的实例中创建的 install.sh删除掉！ [root@kuangshen home]# rm -i install.sh rm: remove regular file ‘install.sh’? y # 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！ # 尽量不要在服务器上使用 rm -rf &#x2F; mv ( 移动文件与目录，或修改名称 ) 语法： [root@www ~]# mv [-fiu] source destination [root@www ~]# mv [options] source1 source2 source3 .... directory 选项与参数： -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！ -u ：若目标文件已经存在，且 source 比较新，才会升级 (update) 测试： # 复制一个文件到当前目录 [root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home # 创建一个文件夹 test [root@kuangshen home]# mkdir test # 将复制过来的文件移动到我们创建的目录，并查看 [root@kuangshen home]# mv install.sh test [root@kuangshen home]# ls test [root@kuangshen home]# cd test [root@kuangshen test]# ls install.sh # 将文件夹重命名，然后再次查看！ [root@kuangshen test]# cd .. [root@kuangshen home]# mv test mvtest [root@kuangshen home]# ls mvtest 基本属性 看懂文件属性 Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如： 实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等： 当为[ d ]则是目录 当为[ - ]则是文件； 若是[ l ]则表示为链接文档 ( link file )； 若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )； 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。 接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。 其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。 每个文件的属性由左边第一部分的10个字符来确定（如下图）： 从左至右用0-9这些数字来表示。 第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。 其中： 第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限； 第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限； 第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。 对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。 同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。 文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。 因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。 在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。 修改文件属性 1、chgrp：更改文件属组 chgrp [-R] 属组名 文件名 -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 2、chown：更改文件属主，也可以同时更改文件属组 chown [–R] 属主名 文件名 chown [-R] 属主名：属组名 文件名 3、chmod：更改文件9个属性 chmod [-R] xyz 文件或目录 Linux文件属性有两种设置方法，一种是数字，一种是符号。 Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。 先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下： r:4 w:2 x:1 每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是： owner = rwx = 4+2+1 = 7 group = rwx = 4+2+1 = 7 others= — = 0+0+0 = 0 chmod 770 filename 可以自己下去多进行测试！ 文件内容查看 概述 Linux系统中使用以下命令来查看文件的内容： cat 由第一行开始显示文件内容 tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ nl 显示的时候，顺道输出行号！ more 一页一页的显示文件内容 less 与 more 类似，但是比 more 更好的是，他可以往前翻页！ head 只看头几行 tail 只看尾巴几行 你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。 cat 由第一行开始显示文件内容 语法： cat [-AbEnTv] 选项与参数： -A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！ -E ：将结尾的断行字节 $ 显示出来； -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同； -T ：将 [tab] 按键以 ^I 显示出来； -v ：列出一些看不出来的特殊字符 测试： # 查看网络配置: 文件地址 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; [root@kuangshen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0 DEVICE&#x3D;eth0 BOOTPROTO&#x3D;dhcp ONBOOT&#x3D;yes tac tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如： [root@kuangshen ~]# tac &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0 ONBOOT&#x3D;yes BOOTPROTO&#x3D;dhcp DEVICE&#x3D;eth0 nl 显示行号 语法： nl [-bnw] 文件 选项与参数： -b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)； -n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ； -w ：行号栏位的占用的位数。 测试： [root@kuangshen ~]# nl &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0 1DEVICE&#x3D;eth0 2BOOTPROTO&#x3D;dhcp 3ONBOOT&#x3D;yes more 一页一页翻动 在 more 这个程序的运行过程中，你有几个按键可以按的： 空白键 (space)：代表向下翻一页； Enter ：代表向下翻『一行』； /字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字； :f ：立刻显示出档名以及目前显示的行数； q ：代表立刻离开 more ，不再显示该文件内容。 b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。 [root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login ....(中间省略).... --More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令 less 一页一页翻动，以下实例输出/etc/man.config文件的内容： less运行时可以输入的命令有： 空白键 ：向下翻动一页； [pagedown]：向下翻动一页； [pageup] ：向上翻动一页； /字串 ：向下搜寻『字串』的功能； ?字串 ：向上搜寻『字串』的功能； n ：重复前一个搜寻 (与 / 或 ? 有关！) N ：反向的重复前一个搜寻 (与 / 或 ? 有关！) q ：离开 less 这个程序； [root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login ....(中间省略).... : # 这里可以等待你输入命令！ head 取出文件前面几行 语法： head [-n number] 文件 选项与参数：**-n** 后面接数字，代表显示几行的意思！ 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样： [root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login tail 取出文件后面几行 语法： tail [-n number] 文件 选项与参数： -n ：后面接数字，代表显示几行的意思 默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样： [root@kuangshen etc]# tail -n 20 &#x2F;etc&#x2F;csh.login 拓展：Linux 链接概念 Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。 情况下，ln 命令产生硬链接。 硬连接 硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。 硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。 软连接 另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。 测试： [root@kuangshen &#x2F;]# cd &#x2F;home [root@kuangshen home]# touch f1 # 创建一个测试文件f1 [root@kuangshen home]# ls f1 [root@kuangshen home]# ln f1 f2 # 创建f1的一个硬连接文件f2 [root@kuangshen home]# ln -s f1 f3 # 创建f1的一个符号连接文件f3 [root@kuangshen home]# ls -li # -i参数显示文件的inode节点信息 397247 -rw-r--r-- 2 root root 0 Mar 13 00:50 f1 397247 -rw-r--r-- 2 root root 0 Mar 13 00:50 f2 397248 lrwxrwxrwx 1 root root 2 Mar 13 00:50 f3 -&gt; f1 从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。 # echo 字符串输出 &gt;&gt; f1 输出到 f1文件 [root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1 [root@kuangshen home]# cat f1 I am f1 file [root@kuangshen home]# cat f2 I am f1 file [root@kuangshen home]# cat f3 I am f1 file [root@kuangshen home]# rm -f f1 [root@kuangshen home]# cat f2 I am f1 file [root@kuangshen home]# cat f3 cat: f3: No such file or directory 通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效； 依此您可以做一些相关的测试，可以得到以下全部结论： 删除符号连接f3,对f1,f2无影响； 删除硬连接f2，对f1,f3也无影响； 删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效； 同时删除原文件f1,硬连接f2，整个文件会真正的被删除。 Vim编辑器 什么是Vim编辑器 Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。 连 vim 的官方网站 (http://www.vim.org) 自己也说 vim 是一个程序开发工具而不是文字处理软件。 vim 键盘图： 三种使用模式 基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是： 命令模式： 用户刚刚启动 vi/vim，便进入了命令模式。 此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。 以下是常用的几个命令： i 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令。 若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。 输入模式： 在命令模式下按下i就进入了输入模式。 在输入模式中，可以使用以下按键： 字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME/END，移动光标到行首/行尾 Page Up/Page Down，上/下翻页 Insert，切换光标为输入/替换模式，光标将变成竖线/下划线 ESC，退出输入模式，切换到命令模式 底线命令模式 在命令模式下按下:（英文冒号）就进入了底线命令模式。 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。 在底线命令模式中，基本的命令有（已经省略了冒号）： q 退出程序 w 保存文件 按ESC键可随时退出底线命令模式。 简单的说，我们可以将这三个模式想成底下的图标来表示： 上手体验一下，在home目录下测试 如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做： [root@kuangshen home]# vim kuangstudy.txt 然后就会进入文件 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字 在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！ 在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。 这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 按下 ESC 按钮回到一般模式 好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！ 在一般模式中按下 :wq 储存后离开 vim！ OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。 Vim 按键说明 除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等 移动光标的方法 h 或 向左箭头键(←) 光标向左移动一个字符 j 或 向下箭头键(↓) 光标向下移动一个字符 k 或 向上箭头键(↑) 光标向上移动一个字符 l 或 向右箭头键(→) 光标向右移动一个字符 [Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) [Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 + 光标移动到非空格符的下一行 - 光标移动到非空格符的上一行 n&lt; space&gt; 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。 0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用) $ 或功能键[End] 移动到这一行的最后面字符处(常用) H 光标移动到这个屏幕的最上方那一行的第一个字符 M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个档案的最后一行(常用) nG n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) gg 移动到这个档案的第一行，相当于 1G 啊！(常用) n&lt; Enter&gt; n 为数字。光标向下移动 n 行(常用) 搜索替换 /word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用) ?word 向光标之上寻找一个字符串名称为 word 的字符串。 n 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ N 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 删除、复制与粘贴 x, X 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 dd 删除游标所在的那一整行(常用) ndd n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用) d1G 删除光标所在到第一行的所有数据 dG 删除光标所在到最后一行的所有数据 d$ 删除游标所在处，到该行的最后一个字符 d0 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 yy 复制游标所在的那一行(常用) nyy n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用) y1G 复制游标所在行到第一行的所有数据 yG 复制游标所在行到最后一行的所有数据 y0 复制光标所在的那个字符到该行行首的所有数据 y$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用) J 将光标所在行与下一行的数据结合成同一行 c 重复删除多个数据，例如向下删除 10 行，[ 10cj ] u 复原前一个动作。(常用) [Ctrl]+r 重做上一个动作。(常用) 第二部分：一般模式切换到编辑模式的可用的按钮说明 进入输入或取代的编辑模式 i, I 进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用) a, A 进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) o, O 进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用) r, R 进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) [Esc] 退出编辑模式，回到一般模式中(常用) 第三部分：一般模式切换到指令行模式的可用的按钮说明 指令行的储存、离开等指令 :w 将编辑的数据写入硬盘档案中(常用) :w! 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ :q 离开 vi (常用) :q! 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ :wq 储存后离开，若为 :wq! 则为强制储存后离开 (常用) ZZ 这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！ :w [filename] 将编辑的数据储存成另一个档案（类似另存新档） :r [filename] 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 :n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个档案。 :! command 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！ :set nu 显示行号，设定之后，会在每一行的前缀显示该行的行号 :set nonu 与 set nu 相反，为取消行号！ 账号管理 简介 Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。 用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。 每个用户账号都拥有一个唯一的用户名和各自的口令。 用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。 实现用户账号的管理，要完成的工作主要有如下几个方面： 用户账号的添加、删除与修改。 用户口令的管理。 用户组的管理。 用户账号的管理 用户账号的管理工作主要涉及到用户账号的添加、修改和删除。 添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。 添加账号 useradd useradd 选项 用户名 参数说明： 选项 : -c comment 指定一段注释性描述。 -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。 -g 用户组 指定用户所属的用户组。 -G 用户组，用户组 指定用户所属的附加组。 -m 使用者目录如不存在则自动建立。 -s Shell文件 指定用户的登录Shell。 -u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。 用户名 : 指定新账号的登录名。 测试： # 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 &#x2F;home&#x2F;kuangshen [root@kuangshen home]# useradd -m kuangshen 增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。 Linux下如何切换用户 1.切换用户的命令为：su username 【username是你的用户名哦】 2.从普通用户切换到root用户，还可以使用命令：sudo su 3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令 4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】 $表示普通用户 #表示超级用户，也就是root用户 删除帐号 如果一个用户的账号不再使用，可以从系统中删除。 删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。 删除一个已有的用户账号使用userdel命令，其格式如下： userdel 选项 用户名 常用的选项是 -r，它的作用是把用户的主目录一起删除。 [root@kuangshen home]# userdel -r kuangshen 此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。 修改帐号 修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。 修改已有用户的信息使用usermod命令，其格式如下： usermod 选项 用户名 常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。 例如： # usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen 此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。 用户口令的管理 用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。 指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。 命令的格式为： passwd 选项 用户名 可使用的选项： -l 锁定口令，即禁用账号。 -u 口令解锁。 -d 使账号无口令。 -f 强迫用户下次登录时修改口令。 如果默认用户名，则修改当前用户的口令。 例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令： $ passwd Old password:****** New password:******* Re-enter new password:******* 如果是超级用户，可以用下列形式指定任何用户的口令： # passwd kuangshen New password:******* Re-enter new password:******* 普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。 为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。 为用户指定空口令时，执行下列形式的命令： # passwd -d kuangshen 此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。 passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如： # passwd -l kuangshen 用户组管理每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。 用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。 增加一个新的用户组使用groupadd命令 groupadd 选项 用户组 可以使用的选项有： -g GID 指定新用户组的组标识号（GID）。 -o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。 实例1： # groupadd group1 此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。 实例2： # groupadd -g 101 group2 此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。 如果要删除一个已有的用户组，使用groupdel命令 groupdel 用户组 例如： # groupdel group1 此命令从系统中删除组group1。 修改用户组的属性使用groupmod命令 groupmod 选项 用户组 常用的选项有： -g GID 为用户组指定新的组标识号。 -o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。 -n新用户组 将用户组的名字改为新名字 # 此命令将组group2的组标识号修改为102。 groupmod -g 102 group2 # 将组group2的标识号改为10000，组名修改为group3。 groupmod –g 10000 -n group3 group2 切换组 如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。 用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如： $ newgrp root 这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。 /etc/passwd 完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。 与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。 下面分别介绍这些文件的内容。 /etc/passwd文件是用户管理工作涉及的最重要的一个文件。 Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。 这个文件对所有用户都是可读的。它的内容类似下面的例子： ＃ cat &#x2F;etc&#x2F;passwd root:x:0:0:Superuser:&#x2F;: daemon:x:1:1:System daemons:&#x2F;etc: bin:x:2:2:Owner of system commands:&#x2F;bin: sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys: adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm: uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp: auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth: cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron: listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls: lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp: 从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下： 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell 1）”用户名”是代表用户账号的字符串。 通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。 为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。 2）“口令”一些系统中，存放着加密后的用户口令字。 虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。 3）“用户标识号”是一个整数，系统内部用它来标识用户。 一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。 通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。 4）“组标识号”字段记录的是用户所属的用户组。 它对应着/etc/group文件中的一条记录。 5)“注释性描述”字段记录着用户的一些个人情况。 例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。 6)“主目录”，也就是用户的起始工作目录。 它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。 7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。 Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。 系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。 用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。 利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。 8)系统中有一类用户称为伪用户（pseudo users）。 这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。 常见的伪用户如下所示： 伪 用 户 含 义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有帐户文件 uucp UUCP使用 lp lp或lpd子系统使用 nobody NFS使用 /etc/shadow 1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。 由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。 2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生 它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是： 登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 “登录名”是与/etc/passwd文件中的登录名相一致的用户账号 “口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。 “最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。 “最小时间间隔”指的是两次修改口令之间所需的最小天数。 “最大时间间隔”指的是口令保持有效的最大天数。 “警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。 “不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。 “失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。 /etc/group 用户组的所有信息都存放在/etc/group文件中。 将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。 每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。 当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。 用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。 用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有： 组名:口令:组标识号:组内用户列表 “组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。 “口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。 “组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。 “组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。 磁盘管理 概述 Linux磁盘管理好坏直接关系到整个系统的性能问题。 Linux磁盘管理常用命令为 df、du。 df ：列出文件系统的整体磁盘使用量 du：检查磁盘空间使用量 df df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 语法： df [-ahikHTm] [目录或文件名] 选项与参数： -a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统； -k ：以 KBytes 的容量显示各文件系统； -m ：以 MBytes 的容量显示各文件系统； -h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示； -H ：以 M=1000K 取代 M=1024K 的进位方式； -T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出； -i ：不用硬盘容量，而以 inode 的数量来显示 测试： # 将系统内所有的文件系统列出来！ # 在 Linux 底下如果 df 没有加任何选项 # 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！ [root@kuangshen &#x2F;]# df Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 889100 0 889100 0% &#x2F;dev tmpfs 899460 704 898756 1% &#x2F;dev&#x2F;shm tmpfs 899460 496 898964 1% &#x2F;run tmpfs 899460 0 899460 0% &#x2F;sys&#x2F;fs&#x2F;cgroup &#x2F;dev&#x2F;vda1 41152812 6586736 32662368 17% &#x2F; tmpfs 179896 0 179896 0% &#x2F;run&#x2F;user&#x2F;0 # 将容量结果以易读的容量格式显示出来 [root@kuangshen &#x2F;]# df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 869M 0 869M 0% &#x2F;dev tmpfs 879M 708K 878M 1% &#x2F;dev&#x2F;shm tmpfs 879M 496K 878M 1% &#x2F;run tmpfs 879M 0 879M 0% &#x2F;sys&#x2F;fs&#x2F;cgroup &#x2F;dev&#x2F;vda1 40G 6.3G 32G 17% &#x2F; tmpfs 176M 0 176M 0% &#x2F;run&#x2F;user&#x2F;0 # 将系统内的所有特殊文件格式及名称都列出来 [root@kuangshen &#x2F;]# df -aT Filesystem Type 1K-blocks Used Available Use% Mounted on sysfs sysfs 0 0 0 - &#x2F;sys proc proc 0 0 0 - &#x2F;proc devtmpfs devtmpfs 889100 0 889100 0% &#x2F;dev securityfs securityfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;security tmpfs tmpfs 899460 708 898752 1% &#x2F;dev&#x2F;shm devpts devpts 0 0 0 - &#x2F;dev&#x2F;pts tmpfs tmpfs 899460 496 898964 1% &#x2F;run tmpfs tmpfs 899460 0 899460 0% &#x2F;sys&#x2F;fs&#x2F;cgroup cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd pstore pstore 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;pstore cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb cgroup cgroup 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls,net_prio cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory cgroup cgroup 0 0 0 - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices cgroup cgroup 0 0 0 -&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event configfs configfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;config &#x2F;dev&#x2F;vda1 ext4 41152812 6586748 32662356 17% &#x2F; systemd-1 - - - - -&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc mqueue mqueue 0 0 0 - &#x2F;dev&#x2F;mqueue debugfs debugfs 0 0 0 - &#x2F;sys&#x2F;kernel&#x2F;debug hugetlbfs hugetlbfs 0 0 0 - &#x2F;dev&#x2F;hugepages tmpfs tmpfs 179896 0 179896 0% &#x2F;run&#x2F;user&#x2F;0 binfmt_misc binfmt_misc 0 0 0 -&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc # 将 &#x2F;etc 底下的可用的磁盘容量以易读的容量格式显示 [root@kuangshen &#x2F;]# df -h &#x2F;etc Filesystem Size Used Avail Use% Mounted on &#x2F;dev&#x2F;vda1 40G 6.3G 32G 17% &#x2F; du Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。 语法： du [-ahskm] 文件或目录名称 选项与参数： -a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。 -h ：以人们较易读的容量格式 (G/M) 显示； -s ：列出总量而已，而不列出每个各别的目录占用容量； -S ：不包括子目录下的总计，与 -s 有点差别。 -k ：以 KBytes 列出容量显示； -m ：以 MBytes 列出容量显示； 测试： # 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）: # 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。 [root@kuangshen home]# du 16.&#x2F;redis 8.&#x2F;www&#x2F;.oracle_jre_usage # 包括隐藏文件的目录 24.&#x2F;www 48. # 这个目录(.)所占用的总量 # 将文件的容量也列出来 [root@kuangshen home]# du -a 4.&#x2F;redis&#x2F;.bash_profile 4.&#x2F;redis&#x2F;.bash_logout ....中间省略.... 4.&#x2F;kuangstudy.txt # 有文件的列表了 48. # 检查根目录底下每个目录所占用的容量 [root@kuangshen home]# du -sm &#x2F;* 0&#x2F;bin 146&#x2F;boot .....中间省略.... 0&#x2F;proc .....中间省略.... 1&#x2F;tmp 3026&#x2F;usr # 系统初期最大就是他了啦！ 513&#x2F;var 2666&#x2F;www 通配符 * 来代表每个目录。 与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。 磁盘挂载与卸除 根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载” Linux 的磁盘挂载使用mount命令，卸载使用umount命令。 磁盘挂载语法： mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 测试： # 将 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！ [root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6 [root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6 [root@www ~]# df Filesystem 1K-blocks Used Available Use% Mounted on &#x2F;dev&#x2F;hdc6 1976312 42072 1833836 3% &#x2F;mnt&#x2F;hdc6 磁盘卸载命令 umount 语法： umount [-fn] 装置文件名或挂载点 选项与参数： -f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下； -n ：不升级 /etc/mtab 情况下卸除。 卸载/dev/hdc6 [root@www ~]# umount &#x2F;dev&#x2F;hdc6","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"CentOS","slug":"CentOS","permalink":"https://sun-j-y.github.io/tags/CentOS/"}]},{"title":"Linux更新源","slug":"Linux/Linux更新源","date":"2020-12-02T11:08:53.000Z","updated":"2020-12-02T11:11:05.764Z","comments":true,"path":"2020/12/02/Linux/Linux更新源/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E6%9B%B4%E6%96%B0%E6%BA%90/","excerpt":"","text":"为什么要换源 大多数官方源的服务器都在国外so… 设置更新源镜像Ubuntu配置文件位置： /etc/apt # 修改配置文件前建议先备份文件 CentOSyum包管理器的配置文件位置 /etc/yum.repos.d/CentOS-Base.repo 通过安装脚本cd &#x2F;etc&#x2F;yum.repos.d&#x2F; # 修改配置文件前建议先备份文件 cp CentOS-Base.repo CentOS-Base.repo.bar # 下载163镜像源配置文件 wget http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo # 重新生成缓存 yum clean all yum makecache 各大系统常见更新源Ubuntu 18.04阿里源deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse 中科大源deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse 163源deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse 清华源deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse CentOS 7并没有…123 结尾","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"}]},{"title":"Hexo子分类和父分类","slug":"Hexo博客/Hexo子分类和父分类","date":"2020-12-02T11:01:15.000Z","updated":"2020-12-02T11:01:29.981Z","comments":true,"path":"2020/12/02/Hexo博客/Hexo子分类和父分类/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%AD%90%E5%88%86%E7%B1%BB%E5%92%8C%E7%88%B6%E5%88%86%E7%B1%BB/","excerpt":"","text":"前言 随着博客量的增加，更细致的分类变得更有必要 方法 格式 categories: - Diary - Life 这种格式会使分类Life成为Diary的子分类，而不是并列分类 更复杂的格式 categories: - [Diary, PlayStation] - [Diary, Games] - [Life] 此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"}]},{"title":"Linux入门1 安装Linux","slug":"Linux/Linux入门1 安装linux","date":"2020-12-02T08:21:00.000Z","updated":"2020-12-02T10:28:18.153Z","comments":true,"path":"2020/12/02/Linux/Linux入门1 安装linux/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Linux%E5%85%A5%E9%97%A81%20%E5%AE%89%E8%A3%85linux/","excerpt":"","text":"linux概述什么是linux看百科吧 维基百科 百度百科 linux入门概述 严格来说，linux只是一个操作系统内核通常所说的 linux系统 是指以它为内核的一系列操作系统 Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。常见的linux发行版系统有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等 kali linux：安全渗透,逆向 本篇笔记是基于CentOS 7 写的，其他linux发行版命令略有不同，但大同小异 Linux 应用领域今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。 目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。 巴西联邦政府由于支持 Linux 而世界闻名。 有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。 印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。 中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。 在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。 葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。 法国和德国同样开始逐步采用 Linux。 Linux vs Windows 环境搭建安装Linux操作系统Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！ 本地物理机安装，不建议（如果不在意办公和娱乐性的话请忽略） 本地虚拟机安装，比较消耗电脑资源（不过服务器版本的linux也消耗不了多少资源） 具体看 [这里] 购买云服务器（不消耗本地资源，但耗money） 虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作； 1、阿里云购买服务器：https://www.aliyun.com/minisite/goods?userCode=0phtycgr 2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了 3、下载 XShell 工具，进行远程连接使用！连接成功效果如下： 注意事项： 如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！ 如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器 安装教程：https://www.bt.cn/bbs/thread-19376-1-1.html 1、开启对应的端口 2、一键安装 3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了 4、登录之后就可以可视化的安装环境和部署网站！ 走近Linux系统 一些命令没有反馈，一般代表命令执行成功（没有消息就是修好的消息） 开\\关机 开机登录 开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。 开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！ 一般来说，用户的登录方式有三种： 命令行登录 ssh登录 图形界面登录 最高权限账户为 root，可以操作一切！ 关机 在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。 关机指令为：shutdown ； sync # 将数据由内存同步到硬盘中。 shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机： shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机 shutdown –h now # 立马关机 shutdown –h 20:25 # 系统会在今天20:25关机 shutdown –h +10 # 十分钟后关机 shutdown –r now # 系统立马重启 shutdown –r +10 # 系统十分钟后重启 reboot # 就是重启，等同于 shutdown –r now halt # 关闭系统，等同于shutdown –h now 和 poweroff 最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。 目录结构 系统目录结构 登录系统后，在当前命令窗口下输入命令： ls &#x2F; 你会看到如下图所示： 树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下） 以下是对这些目录的解释： /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。 /boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 /etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。 /lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 /root：该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /srv：该目录存放一些服务启动之后需要提取的数据。 /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。 /tmp：这个目录是用来存放一些临时文件的。 /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 /usr/bin： 系统用户使用的应用程序。 /usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。 /usr/src： 内核源代码默认的放置目录。 /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 /run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"CentOS","slug":"CentOS","permalink":"https://sun-j-y.github.io/tags/CentOS/"}]},{"title":"Vim","slug":"Linux/Vim/Vim","date":"2020-12-02T08:21:00.000Z","updated":"2020-12-02T11:20:07.101Z","comments":true,"path":"2020/12/02/Linux/Vim/Vim/","link":"","permalink":"https://sun-j-y.github.io/2020/12/02/Linux/Vim/Vim/","excerpt":"","text":"vimvim快捷键(命令)命令模式 i 切换到输入模式，以输入字符 :(shift+;) 切换到底线命令模式，以在最底一行输入命令 dd 删除当前光标所处的行 x 删除当前光标所在处的字符 插入模式(输入模式) 字符按键以及Shift组合 输入字符 ENTER 回车键，换行 BACK SPACE 退格键，删除光标前一个字符 DEL 删除键，删除光标后一个字符 方向键 在文本中移动光标 HOME/END 移动光标到行首/行尾 Page Up/Page Down 上/下翻页 Insert 切换光标为输入/替换模式，光标将变成竖线/下划线 ESC 退出输入模式，切换到命令模式 底线命令模式命令后加 ! 强制执行 version 查看版本信息 , 配置 w 保存 q 退出 wq 保存并退出 vi/vim键盘图 vim配置vim配置文件 ~/.vimrc 注释格式为 : “ 注释内容 vimrc可用参数:显示相关&quot;set shortmess&#x3D;atI &quot; 启动的时候不显示那个援助乌干达儿童的提示 &quot;winpos 5 5 &quot; 设定窗口位置 &quot;set lines&#x3D;40 columns&#x3D;155 &quot; 设定窗口大小 &quot;set nu &quot; 显示行号 set go&#x3D; &quot; 不要图形按钮 &quot;color asmanian2 &quot; 设置背景主题 set guifont&#x3D;Courier_New:h10:cANSI &quot; 设置字体 &quot;syntax on &quot; 语法高亮 autocmd InsertLeave * se nocul &quot; 用浅色高亮当前行 autocmd InsertEnter * se cul &quot; 用浅色高亮当前行 &quot;set ruler &quot; 显示标尺 set showcmd &quot; 输入的命令显示出来，看的清楚些 &quot;set cmdheight&#x3D;1 &quot; 命令行（在状态行下）的高度，设置为1 &quot;set whichwrap+&#x3D;&lt;,&gt;,h,l &quot; 允许backspace和光标键跨越行边界(不建议) &quot;set scrolloff&#x3D;3 &quot; 光标移动到buffer的顶部和底部时保持3行距离 set novisualbell &quot; 不要闪烁(不明白) set statusline&#x3D;%F%m%r%h%w\\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\\ [TYPE&#x3D;%Y]\\ [POS&#x3D;%l,%v][%p%%]\\ %&#123;strftime(\\&quot;%d&#x2F;%m&#x2F;%y\\ -\\ %H:%M\\&quot;)&#125; &quot;状态行显示的内容 set laststatus&#x3D;1 &quot; 启动显示状态行(1),总是显示状态行(2) set foldenable &quot; 允许折叠 set foldmethod&#x3D;manual &quot; 手动折叠 &quot;set background&#x3D;dark &quot;背景使用黑色 set nocompatible &quot;去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 &quot; 显示中文帮助 if version &gt;&#x3D; 603 set helplang&#x3D;cn set encoding&#x3D;utf-8 endif &quot; 设置配色方案 &quot;colorscheme murphy &quot;字体 &quot;if (has(&quot;gui_running&quot;)) &quot; set guifont&#x3D;Bitstream\\ Vera\\ Sans\\ Mono\\ 10 &quot;endif set fencs&#x3D;utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936 set termencoding&#x3D;utf-8 set encoding&#x3D;utf-8 set fileencodings&#x3D;ucs-bom,utf-8,cp936 set fileencoding&#x3D;utf-8 新文件标题&quot;新建.c,.h,.sh,.java文件，自动插入文件头 autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot; &quot;&quot;定义函数SetTitle，自动插入文件头 func SetTitle() &quot;如果文件类型为.sh文件 if &amp;filetype &#x3D;&#x3D; &#39;sh&#39; call setline(1,&quot;\\#########################################################################&quot;) call append(line(&quot;.&quot;), &quot;\\# File Name: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+1, &quot;\\# Author: ma6174&quot;) call append(line(&quot;.&quot;)+2, &quot;\\# mail: ma6174@163.com&quot;) call append(line(&quot;.&quot;)+3, &quot;\\# Created Time: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+4, &quot;\\#########################################################################&quot;) call append(line(&quot;.&quot;)+5, &quot;\\#!&#x2F;bin&#x2F;bash&quot;) call append(line(&quot;.&quot;)+6, &quot;&quot;) else call setline(1, &quot;&#x2F;*************************************************************************&quot;) call append(line(&quot;.&quot;), &quot; &gt; File Name: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+1, &quot; &gt; Author: ma6174&quot;) call append(line(&quot;.&quot;)+2, &quot; &gt; Mail: ma6174@163.com &quot;) call append(line(&quot;.&quot;)+3, &quot; &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+4, &quot; ***********************************************************************&#x2F;&quot;) call append(line(&quot;.&quot;)+5, &quot;&quot;) endif if &amp;filetype &#x3D;&#x3D; &#39;cpp&#39; call append(line(&quot;.&quot;)+6, &quot;#include&lt;iostream&gt;&quot;) call append(line(&quot;.&quot;)+7, &quot;using namespace std;&quot;) call append(line(&quot;.&quot;)+8, &quot;&quot;) endif if &amp;filetype &#x3D;&#x3D; &#39;c&#39; call append(line(&quot;.&quot;)+6, &quot;#include&lt;stdio.h&gt;&quot;) call append(line(&quot;.&quot;)+7, &quot;&quot;) endif &quot;新建文件后，自动定位到文件末尾 autocmd BufNewFile * normal G endfunc 键盘命令nmap &lt;leader&gt;w :w!&lt;cr&gt; nmap &lt;leader&gt;f :find&lt;cr&gt; &quot; 映射全选+复制 ctrl+a map &lt;C-A&gt; ggVGY map! &lt;C-A&gt; &lt;Esc&gt;ggVGY map &lt;F12&gt; gg&#x3D;G &quot; 选中状态下 Ctrl+c 复制 vmap &lt;C-c&gt; &quot;+y &quot; 去空行 nnoremap &lt;F2&gt; :g&#x2F;^\\s*$&#x2F;d&lt;CR&gt; &quot; 比较文件 nnoremap &lt;C-F2&gt; :vert diffsplit &quot; 新建标签 map &lt;M-F2&gt; :tabnew&lt;CR&gt; &quot;列出当前目录文件 map &lt;F3&gt; :tabnew .&lt;CR&gt; &quot;打开树状文件目录 map &lt;C-F3&gt; \\be &quot;C，C++ 按F5编译运行 map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt; func! CompileRunGcc() exec &quot;w&quot; if &amp;filetype &#x3D;&#x3D; &#39;c&#39; exec &quot;!g++ % -o %&lt;&quot; exec &quot;! .&#x2F;%&lt;&quot; elseif &amp;filetype &#x3D;&#x3D; &#39;cpp&#39; exec &quot;!g++ % -o %&lt;&quot; exec &quot;! .&#x2F;%&lt;&quot; elseif &amp;filetype &#x3D;&#x3D; &#39;java&#39; exec &quot;!javac %&quot; exec &quot;!java %&lt;&quot; elseif &amp;filetype &#x3D;&#x3D; &#39;sh&#39; :!.&#x2F;% endif endfunc &quot;C,C++的调试 map &lt;F8&gt; :call Rungdb()&lt;CR&gt; func! Rungdb() exec &quot;w&quot; exec &quot;!g++ % -g -o %&lt;&quot; exec &quot;!gdb .&#x2F;%&lt;&quot; endfunc 实用设置&quot; 设置当文件被改动时自动载入 set autoread &quot; quickfix模式 autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt; &quot;代码补全 set completeopt&#x3D;preview,menu &quot;允许插件 filetype plugin on &quot;共享剪贴板 set clipboard+&#x3D;unnamed &quot;从不备份 set nobackup &quot;make 运行 :set makeprg&#x3D;g++\\ -Wall\\ \\ % &quot;自动保存 set autowrite set ruler &quot; 打开状态栏标尺 set cursorline &quot; 突出显示当前行 set magic &quot; 设置魔术 set guioptions-&#x3D;T &quot; 隐藏工具栏 set guioptions-&#x3D;m &quot; 隐藏菜单栏 &quot;set statusline&#x3D;\\ %&lt;%F[%1*%M%*%n%R%H]%&#x3D;\\ %y\\ %0(%&#123;&amp;fileformat&#125;\\ %&#123;&amp;encoding&#125;\\ %c:%l&#x2F;%L%)\\ &quot; 设置在状态行显示的信息 set foldcolumn&#x3D;0 set foldmethod&#x3D;indent set foldlevel&#x3D;3 set foldenable &quot; 开始折叠 &quot; 不要使用vi的键盘模式，而是vim自己的 set nocompatible &quot; 语法高亮 set syntax&#x3D;on &quot; 去掉输入错误的提示声音 set noeb &quot; 在处理未保存或只读文件的时候，弹出确认 set confirm &quot; 自动缩进 set autoindent set cindent &quot; Tab键的宽度 set tabstop&#x3D;4 &quot; 统一缩进为4 set softtabstop&#x3D;4 set shiftwidth&#x3D;4 &quot; 不要用空格代替制表符 set noexpandtab &quot; 在行和段开始处使用制表符 set smarttab &quot; 显示行号 set number &quot; 历史记录数 set history&#x3D;1000 &quot;禁止生成临时文件 set nobackup set noswapfile &quot;搜索忽略大小写 set ignorecase &quot;搜索逐字符高亮 set hlsearch set incsearch &quot;行内替换 set gdefault &quot;编码设置 set enc&#x3D;utf-8 set fencs&#x3D;utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936 &quot;语言设置 set langmenu&#x3D;zh_CN.UTF-8 set helplang&#x3D;cn &quot; 我的状态行显示的内容（包括文件类型和解码） &quot;set statusline&#x3D;%F%m%r%h%w\\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\\ [TYPE&#x3D;%Y]\\ [POS&#x3D;%l,%v][%p%%]\\ %&#123;strftime(\\&quot;%d&#x2F;%m&#x2F;%y\\ -\\ %H:%M\\&quot;)&#125; &quot;set statusline&#x3D;[%F]%y%r%m%*%&#x3D;[Line:%l&#x2F;%L,Column:%c][%p%%] &quot; 总是显示状态行 set laststatus&#x3D;2 &quot; 命令行（在状态行下）的高度，默认为1，这里是2 set cmdheight&#x3D;2 &quot; 侦测文件类型 filetype on &quot; 载入文件类型插件 filetype plugin on &quot; 为特定文件类型载入相关缩进文件 filetype indent on &quot; 保存全局变量 set viminfo+&#x3D;! &quot; 带有如下符号的单词不要被换行分割 set iskeyword+&#x3D;_,$,@,%,#,- &quot; 字符间插入的像素行数目 set linespace&#x3D;0 &quot; 增强模式中的命令行自动完成操作 set wildmenu &quot; 使回格键（backspace）正常处理indent, eol, start等 set backspace&#x3D;2 &quot; 允许backspace和光标键跨越行边界 set whichwrap+&#x3D;&lt;,&gt;,h,l &quot; 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） set mouse&#x3D;a set selection&#x3D;exclusive set selectmode&#x3D;mouse,key &quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过 set report&#x3D;0 &quot; 在被分割的窗口间显示空白，便于阅读 set fillchars&#x3D;vert:\\ ,stl:\\ ,stlnc:\\ &quot; 高亮显示匹配的括号 set showmatch &quot; 匹配括号高亮的时间（单位是十分之一秒） set matchtime&#x3D;1 &quot; 光标移动到buffer的顶部和底部时保持3行距离 set scrolloff&#x3D;3 &quot; 为C程序提供自动缩进 set smartindent &quot; 高亮显示普通txt文件（需要txt.vim脚本） au BufRead,BufNewFile * setfiletype txt &quot;自动补全 :inoremap ( ()&lt;ESC&gt;i :inoremap ) &lt;c-r&gt;&#x3D;ClosePair(&#39;)&#39;)&lt;CR&gt; :inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O :inoremap &#125; &lt;c-r&gt;&#x3D;ClosePair(&#39;&#125;&#39;)&lt;CR&gt; :inoremap [ []&lt;ESC&gt;i :inoremap ] &lt;c-r&gt;&#x3D;ClosePair(&#39;]&#39;)&lt;CR&gt; :inoremap &quot; &quot;&quot;&lt;ESC&gt;i :inoremap &#39; &#39;&#39;&lt;ESC&gt;i function! ClosePair(char) if getline(&#39;.&#39;)[col(&#39;.&#39;) - 1] &#x3D;&#x3D; a:char return &quot;\\&lt;Right&gt;&quot; else return a:char endif endfunction filetype plugin indent on &quot;打开文件类型检测, 加了这句才可以用智能补全 set completeopt&#x3D;longest,menu CTags的设定let Tlist_Sort_Type &#x3D; &quot;name&quot; &quot; 按照名称排序 let Tlist_Use_Right_Window &#x3D; 1 &quot; 在右侧显示窗口 let Tlist_Compart_Format &#x3D; 1 &quot; 压缩方式 let Tlist_Exist_OnlyWindow &#x3D; 1 &quot; 如果只有一个buffer，kill窗口也kill掉buffer let Tlist_File_Fold_Auto_Close &#x3D; 0 &quot; 不要关闭其他文件的tags let Tlist_Enable_Fold_Column &#x3D; 0 &quot; 不要显示折叠树 autocmd FileType java set tags+&#x3D;D:\\tools\\java\\tags &quot;autocmd FileType h,cpp,cc,c set tags+&#x3D;D:\\tools\\cpp\\tags &quot;let Tlist_Show_One_File&#x3D;1 &quot;不同时显示多个文件的tag，只显示当前文件的 &quot;设置tags set tags&#x3D;tags &quot;set autochdir &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot;其他东东 &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot;默认打开Taglist let Tlist_Auto_Open&#x3D;1 &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot; Tag list (ctags) &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; let Tlist_Ctags_Cmd &#x3D; &#39;&#x2F;usr&#x2F;bin&#x2F;ctags&#39; let Tlist_Show_One_File &#x3D; 1 &quot;不同时显示多个文件的tag，只显示当前文件的 let Tlist_Exit_OnlyWindow &#x3D; 1 &quot;如果taglist窗口是最后一个窗口，则退出vim let Tlist_Use_Right_Window &#x3D; 1 &quot;在右侧窗口中显示taglist窗口 &quot; minibufexpl插件的一般设置 let g:miniBufExplMapWindowNavVim &#x3D; 1 let g:miniBufExplMapWindowNavArrows &#x3D; 1 let g:miniBufExplMapCTabSwitchBufs &#x3D; 1 let g:miniBufExplModSelTarget &#x3D; 1","categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"工具","slug":"Linux/工具","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Vim","slug":"Vim","permalink":"https://sun-j-y.github.io/tags/Vim/"}]},{"title":"基于Hexo-Github搭建个人博客二：更改博客主题","slug":"Hexo博客/基于Hexo-Github搭建个人博客二：更改博客主题","date":"2020-11-23T05:33:16.000Z","updated":"2020-11-23T05:51:44.540Z","comments":true,"path":"2020/11/23/Hexo博客/基于Hexo-Github搭建个人博客二：更改博客主题/","link":"","permalink":"https://sun-j-y.github.io/2020/11/23/Hexo%E5%8D%9A%E5%AE%A2/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C%EF%BC%9A%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"前言 本文所有内容来自于这里， 略有修改 上篇博客讲述了实现把博客推到Github Page，接下来这篇博客就来讲一下更改和优化主题。我使用的是volantis 主题（ Volantis是xaoxuu博主开发的主题），不是官方主题。其实这个主题对我来说难度挺大的，主要是因为主题 作者（我）的参考文档不够（太）详细~~ (菜)。 可我就是谗它好看，没办法。部署博客到远端Github用了一天，优化主题却整了整整三天（手动狗头，太难了）。如何选主题：强烈建议初学者选主题前先查阅一下这一个主题的使用人数多不多，这样出了问题比较好解决。帮助文档够不够详尽，这样可以少踩点坑。一开始还是使用中规中矩的官方主题，魔改的那些除非你比较有精力那就可以尝试。有了感觉之后再去自定义修改，尝试其他一下风格的主题，毕竟上手之后切换主题是分分钟钟的事。可以先看一下：知乎的这篇文章 volantis主题更改1 下载与安装volantis主题本地环境：我博客文件路径是E:\\hexo\\blog 1.1 将主题下载到themes目录下进入你本地放博客文件目录 进入到themes目录下右键git bash here执行命令： git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis themes&#x2F;volantis 执行成功后，themes目录下有volantis文件夹 1.2 修改站点配置文件注意是站点的_config.yml文件不是主题的_config.yml用vscode或notepad++打开_config.yml文件找到themes字段 将默认的lanscape修改为你的主题volantis其实之所以有两个配置文件是有原因的，你想啊。站点（也就是你的博客）的_config.yml用于配置你整个博客，如果你想换个主题，那么只要在站点的_config.yml修改theme就可了，不用大动干戈。想实现主题的一些其他功能如评论系统只要在主题的配置文件_config.ym修改就可以了，由于每个主题都有一个配置我呢见，换主题时也不会互相影响。 1.4 检查并安装依赖安装 Hexo 搜索的依赖包： npm i -S hexo-generator-search hexo-generator-json-content 安装 stylus 渲染器： npm i -S hexo-renderer-stylus 4）将hexo默认主题更换为volantis hexo clean #清除之前部署 hexo g #生成 hexo s# 本地预览 执行完上面操作就可以到 本地4000端口进行博客预览，可以发现主题已变了。准备工作做足了，下面正式进入主题设置。由于主题官网已经对主题的配置做了比较详尽的介绍，我这里就不赘诉了，主要讲一下我的一下理解，和操作的大概流程。一开始我由于没有站点/主题/页面这些概念所以也是比较蒙蔽，无从下手。其实不用看太多的教程，把官方文档看明白意思了，基本的博客框架就搭起来了，后续高级功能再慢慢学习优秀博主的Github源码，最后再自定义。个人觉得这个写文档的人逻辑表述能力不太强、将东西老是乱串的，反正我这个小白级博主是自己摸索之后才逐渐明白官网这样一个教程设置的顺序的。配置文件也鲜有中文注释，英文居多，我觉得这可能是难倒大多数新手的一个原因，遇到英文，不懂就整句百度翻译。 所以想首先对官网进行一下说明和解读。官网顶端导航栏的几个按钮【开始】：是我们volatis主题的下载与安装。 【站点】：是对我们整个博客的一个设置，如链接标签页显示的图标、标题等，所以是在博客的_config.yml下配置的。详细配置可以看hexo官网的官方文档https://hexo.io/zh-cn/docs/中的配置。 【主题】：是有关对我们当前选的这个主题volantis的一个修改配置。你想设置什么功能，如评论系统、搜索功能这些。可以根据自己的需要去配置，这是这篇博客的重点，但不会讲具体怎么操作，因为文档有教，而是讲一些注意事项和我踩到的一些坑。 这里对volantis文件夹下的子文件夹和文件做一些简单的介绍 _config.yml: 为对整个主题的配置文件 layout： 为页面、卡片（widget）、图标等源码和资源 source： 为样式、第三方插件等源码 一些实用功能评论系统gitalk：gitalk，需要依赖github，我试了一下没有成功，而且评论者还需要登录github才可以评论，不好用。因而我选择用valine，一步到位，可匿名评价 。配置详见：这篇博客 去掉封面的搜索框打开layout/_cover/index.ejs 找到如下所示代码，将其注释（如果你决定以后也不会使用这个封面的搜索框了 去掉也可以） &lt;% if (theme.search.enable === true) &#123; %> &lt;div class=\"m_search\"> &lt;form name=\"searchform\" class=\"form u-search-form\"> &lt;input type=\"text\" class=\"input u-search-input\" placeholder=\"&lt;%- theme.cover &amp;&amp; theme.cover.search %>\" /> &lt;i class=\"icon fas fa-search fa-fw\">&lt;/i> &lt;/form> &lt;/div> &lt;% &#125; %> 效果： 修改使手机端观看有外边距打开source/css/_layout/main.styl找到 @media screen and (max-width:$device-tablet)这一行 做如下修改 配置模板文件使用new命令 自动生成模板文件E:\\hexo\\blog\\scaffolds编辑post.md 没有则新建加入如下代码 --- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; comments: true # 是否开启评论 mathjax: false # 是否开启数学公式渲染 toc: true # 是否启用目录 top: false # 是否置顶 #若使用urlname作为永久链接则添加该项 urlname: categories: - [父类,子类] - 同级分类 tags: [标签1,标签2] --- &lt;!-- more --> Q&amp;A1）明明加了标签却无法在文章头部显示出来不是用如下hexo命令new出来的文章标签是无法无法正常显示，即使是复制黏贴了用上面命令生成的文章的fromt-matter，也是不能正常显示的，所以先用hexo命令新建文件，再用markdown编辑器打开编辑。 hexo new ‘文章标题’1 2）引用本地图片无法显示你引用自己的本地图片发布路径写的是本地的路径，服务器无法访问你的本地文件当然无法正常加载啦。解决方法是实用图床生成外链。见博客[]如外链之后引用图片，博客浏览过大或过小，可以先调整好大小再上传，如我遇到的问题就是，没有去查看博客头像预定的大小是多少（可以看别的已经搭好的博主的头像的参数 使用F12审查元素） 未完待续…… 参考文章：Volantis主题DIY笔记volantis官网","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]},{"title":"基于Hexo Github搭建个人博客一：将博客推到Github Page","slug":"Hexo博客/基于Hexo-Github搭建个人博客一：将博客推到Github-Page","date":"2020-11-06T08:41:21.000Z","updated":"2020-12-02T10:51:44.533Z","comments":true,"path":"2020/11/06/Hexo博客/基于Hexo-Github搭建个人博客一：将博客推到Github-Page/","link":"","permalink":"https://sun-j-y.github.io/2020/11/06/Hexo%E5%8D%9A%E5%AE%A2/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80%EF%BC%9A%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%88%B0Github-Page/","excerpt":"","text":"前言 本文所有内容来自于Johnny, 略有修改 什么是hexo打开Hexo你会发现醒目的一行字：“Hexo is a fast, simple &amp; powerful blog framework”。其实说白了hexo就是个博客框架。 安装hexo前期准备 安装好 Nodejs 安装好 Git 以及注册一个Github账号 官网下载的Node.js安装包自带npm节点包管理工具，npm从其nmp官网下载对应的插件包到本地，因为该网站的服务器在国外，经常会出现下载缓慢或出现异常，这时便需要找到另外的方法提供稳定的下载。这个方法就是cnpm。阿里巴巴的淘宝团队把nmp官网的插件都同步到了在中国的服务器，提供给我们从这个服务器上稳定下载资源。简单来说就是为了防止因为下载速度过慢而导致失败，我们还要与预先处理一下。 预处理解决上述问题有如下两个方法，我选择的是方法一： 方法一、通过npm下载cnpm命令 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org # 其中-g是全局的意思 检验cnpm有没有安装成功 cnpm #或者 cnpm -v 方法二、修改npm的默认镜像源1）查询当前的npm的源，“http://registry.npmjs.org”为默认的官方源。 npm config get registry 2） 设置npm的淘宝镜像源，“https://registry.npm.taobao.org”为淘宝的镜像源。 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org # 通过这条set命令就可以把npm的镜像源改为国内淘宝的 正式安装hexo由于我预处理是用的方法一 所以我用cnpm cnpm和npm是一样的 相当于双胞胎 用方法二的伙伴把cnpm改为npm就可以了 其他照旧 cnpm install -g hexo-cli 验证hexo是否安装成功 hexo -v 安装成功后进入对Hexo的初始配置 Hexo初始配置 新建文件夹：我这里在E:/hexo下新建文件夹blog cmd下进入blog所在目录下 hexo init 初始化文件夹blog hexo init 初始化成功后，得到如下文件 这里对各个文件夹进行一个简单的说明，毕竟后面有些会用到 - node_modules：是依赖包 - public：存放的是生成的页面 - scaffolds：命令生成文章等的模板 - source：用命令创建的各种文章 - themes：主题 - _config.yml：整个博客的配置 - db.json：source解析所得到的 - package.json：项目所需模块项目的配置信息 安装deployer#安装能够将hexo部署到git page的deployer cnpm install hexo-deployer-git --save 本地查看效果常见hexo命令 1）generate hexo generate 功能：生成静态文件。 参数描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 2）deploy hexo deploy 功能：部署网站。 参数描述 -g, --generate 部署网站前，需要预先生成静态文件 3)server hexo server 功能：启动服务器。 参数描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，或覆盖记录格式 #hexo默认会有个Hello-World的博客文件 hexo g hexo s 地址栏 输入：http://localhost:400就可以在本地看到Hello Word文章 上面只是在本地发布成功，要想让更多人看到，需要发布到远程服务器，这里部署到GitHUb 部署博客到Github1）首先自己创建一个Github账户。2）创建一个仓库 命名规范: 用户名.github.io 3）配置SSH密钥只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步 在E:\\hexo\\blog目录下右键 bash here进入git窗口 ssh-keygen -t -C &quot;你GitHub的邮箱&quot; 两次密码直接回车 clip &lt;~&#x2F;ssh&#x2F;id_sra.pub 在GitHub个人账号中进入setting选择SSH and GPG keys添加从bash生成的密钥 测试在E:\\hexo\\blog目录下右键 bash here进入git窗口 输入如下命令 提示如下 输入yes后显示如下，则表示Github的SSH设置正确 配置_config.yml 获得SSH 配置_config.yml 在E:/hexo/blog目录下找到_config.yml配置文件 用notepad++或者vscode打开修改 找到deploy结点，编辑如下： repo为刚刚从GitHub复制来的SSH 粘贴即可 配置 Git 个人信息Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致 cmd下使用下面两条命令 git config --global user.email &quot;邮箱&quot; git config --global user.name &quot;用户名&quot; 到这里为止 git 操作实现本地代码库与 Github 代码库同步 部署到远端Githubhexo g -d 生成静态网页并把它部署到远端输入：https://你的仓库名 就可以访问到了在这里插入图片描述一切都布置好了，只差一杯咖啡，接下来就可以开工慢慢写文章啦3、博客编写（简单一提） 我们会发现发布成功的博客文章放在_posts目录下在这里插入图片描述那么可以使用支持 .md编辑提供Markdown 语法编辑的的编辑器，然后保存文件到 …\\source_posts 文件夹下即可，用CSDN自带的Markdown编辑器和小书匠都可以。这里用前者。 1）Markdown编辑器编辑博客，将生成的.md文件复制到 ..\\source_posts2）然后再hexo g -d 部署到远端GitHub就可以了 结束语文章到这里就结束了，我自己搭建过程中还是有碰到不少坑的，所幸网上用Hexo搭建博客的人比较多，所以一搜基本上都有解决方案。所以也记录一下自己的搭建过程，也希望这篇文章能够帮助那些想用hexo搭建个人博客的小伙伴们少走点弯路。","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/categories/Linux/"},{"name":"工具","slug":"Linux/工具","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B7%A5%E5%85%B7/"},{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/categories/Git/"},{"name":"常见问题","slug":"Git/常见问题","permalink":"https://sun-j-y.github.io/categories/Git/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Docker","slug":"Linux/Docker","permalink":"https://sun-j-y.github.io/categories/Linux/Docker/"},{"name":"常见问题","slug":"Linux/常见问题","permalink":"https://sun-j-y.github.io/categories/Linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sun-j-y.github.io/tags/Linux/"},{"name":"Git","slug":"Git","permalink":"https://sun-j-y.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://sun-j-y.github.io/tags/GitHub/"},{"name":"镜像源","slug":"镜像源","permalink":"https://sun-j-y.github.io/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"},{"name":"Docker","slug":"Docker","permalink":"https://sun-j-y.github.io/tags/Docker/"},{"name":"系统语言","slug":"系统语言","permalink":"https://sun-j-y.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"},{"name":"CentOS","slug":"CentOS","permalink":"https://sun-j-y.github.io/tags/CentOS/"},{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"Vim","slug":"Vim","permalink":"https://sun-j-y.github.io/tags/Vim/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}