{"meta":{"title":"Sun's Blog","subtitle":"CodeSun","description":"这是一段关于这个网站的描述文字","author":"Code Sun","url":"https://sun-j-y.github.io","root":"/"},"pages":[{"title":"","date":"2020-11-06T11:17:47.132Z","updated":"2020-11-06T11:17:47.132Z","comments":true,"path":"404.html","permalink":"https://sun-j-y.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-11-06T11:13:48.917Z","updated":"2020-11-06T11:13:48.917Z","comments":true,"path":"about/index.html","permalink":"https://sun-j-y.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有分类","date":"2020-11-23T04:40:33.962Z","updated":"2020-11-23T04:40:33.962Z","comments":true,"path":"categories/index.html","permalink":"https://sun-j-y.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.824Z","updated":"2020-11-09T04:27:34.824Z","comments":true,"path":"contributors/index.html","permalink":"https://sun-j-y.github.io/contributors/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-09T04:27:34.827Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"examples/index.html","permalink":"https://sun-j-y.github.io/examples/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-11-23T11:07:01.767Z","updated":"2020-11-23T11:07:01.767Z","comments":true,"path":"friends/index.html","permalink":"https://sun-j-y.github.io/friends/index.html","excerpt":"这是这个页面的简介","text":"这是这个页面的简介 交换双方的链接, 请通过邮箱联系请提供: 名称、头像、链接、截图、关键词、描述"},{"title":"","date":"2020-11-09T04:27:36.679Z","updated":"2020-11-09T04:27:34.823Z","comments":true,"path":"faqs/index.html","permalink":"https://sun-j-y.github.io/faqs/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-06T11:15:08.448Z","updated":"2020-11-06T11:15:08.448Z","comments":true,"path":"mylist/index.html","permalink":"https://sun-j-y.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-23T04:49:26.672Z","updated":"2020-11-23T04:49:26.672Z","comments":true,"path":"tags/index.html","permalink":"https://sun-j-y.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"基于Hexo-Github搭建个人博客二：更改博客主题","slug":"基于Hexo-Github搭建个人博客二：更改博客主题","date":"2020-11-23T05:33:16.000Z","updated":"2020-11-23T05:51:44.541Z","comments":true,"path":"2020/11/23/基于Hexo-Github搭建个人博客二：更改博客主题/","link":"","permalink":"https://sun-j-y.github.io/2020/11/23/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C%EF%BC%9A%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"前言 本文所有内容来自于这里， 略有修改 上篇博客讲述了实现把博客推到Github Page，接下来这篇博客就来讲一下更改和优化主题。我使用的是volantis 主题（ Volantis是xaoxuu博主开发的主题），不是官方主题。其实这个主题对我来说难度挺大的，主要是因为主题 作者（我）的参考文档不够（太）详细~~ (菜)。 可我就是谗它好看，没办法。部署博客到远端Github用了一天，优化主题却整了整整三天（手动狗头，太难了）。如何选主题：强烈建议初学者选主题前先查阅一下这一个主题的使用人数多不多，这样出了问题比较好解决。帮助文档够不够详尽，这样可以少踩点坑。一开始还是使用中规中矩的官方主题，魔改的那些除非你比较有精力那就可以尝试。有了感觉之后再去自定义修改，尝试其他一下风格的主题，毕竟上手之后切换主题是分分钟钟的事。可以先看一下：知乎的这篇文章 volantis主题更改1 下载与安装volantis主题本地环境：我博客文件路径是E:\\hexo\\blog 1.1 将主题下载到themes目录下进入你本地放博客文件目录 进入到themes目录下右键git bash here执行命令： git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis themes&#x2F;volantis 执行成功后，themes目录下有volantis文件夹 1.2 修改站点配置文件注意是站点的_config.yml文件不是主题的_config.yml用vscode或notepad++打开_config.yml文件找到themes字段 将默认的lanscape修改为你的主题volantis其实之所以有两个配置文件是有原因的，你想啊。站点（也就是你的博客）的_config.yml用于配置你整个博客，如果你想换个主题，那么只要在站点的_config.yml修改theme就可了，不用大动干戈。想实现主题的一些其他功能如评论系统只要在主题的配置文件_config.ym修改就可以了，由于每个主题都有一个配置我呢见，换主题时也不会互相影响。 1.4 检查并安装依赖安装 Hexo 搜索的依赖包： npm i -S hexo-generator-search hexo-generator-json-content 安装 stylus 渲染器： npm i -S hexo-renderer-stylus 4）将hexo默认主题更换为volantis hexo clean #清除之前部署 hexo g #生成 hexo s# 本地预览 执行完上面操作就可以到 本地4000端口进行博客预览，可以发现主题已变了。准备工作做足了，下面正式进入主题设置。由于主题官网已经对主题的配置做了比较详尽的介绍，我这里就不赘诉了，主要讲一下我的一下理解，和操作的大概流程。一开始我由于没有站点/主题/页面这些概念所以也是比较蒙蔽，无从下手。其实不用看太多的教程，把官方文档看明白意思了，基本的博客框架就搭起来了，后续高级功能再慢慢学习优秀博主的Github源码，最后再自定义。个人觉得这个写文档的人逻辑表述能力不太强、将东西老是乱串的，反正我这个小白级博主是自己摸索之后才逐渐明白官网这样一个教程设置的顺序的。配置文件也鲜有中文注释，英文居多，我觉得这可能是难倒大多数新手的一个原因，遇到英文，不懂就整句百度翻译。 所以想首先对官网进行一下说明和解读。官网顶端导航栏的几个按钮【开始】：是我们volatis主题的下载与安装。 【站点】：是对我们整个博客的一个设置，如链接标签页显示的图标、标题等，所以是在博客的_config.yml下配置的。详细配置可以看hexo官网的官方文档https://hexo.io/zh-cn/docs/中的配置。 【主题】：是有关对我们当前选的这个主题volantis的一个修改配置。你想设置什么功能，如评论系统、搜索功能这些。可以根据自己的需要去配置，这是这篇博客的重点，但不会讲具体怎么操作，因为文档有教，而是讲一些注意事项和我踩到的一些坑。 这里对volantis文件夹下的子文件夹和文件做一些简单的介绍 _config.yml: 为对整个主题的配置文件 layout： 为页面、卡片（widget）、图标等源码和资源 source： 为样式、第三方插件等源码 一些实用功能评论系统gitalk：gitalk，需要依赖github，我试了一下没有成功，而且评论者还需要登录github才可以评论，不好用。因而我选择用valine，一步到位，可匿名评价 。配置详见：这篇博客 去掉封面的搜索框打开layout/_cover/index.ejs 找到如下所示代码，将其注释（如果你决定以后也不会使用这个封面的搜索框了 去掉也可以） &lt;% if (theme.search.enable === true) &#123; %> &lt;div class=\"m_search\"> &lt;form name=\"searchform\" class=\"form u-search-form\"> &lt;input type=\"text\" class=\"input u-search-input\" placeholder=\"&lt;%- theme.cover &amp;&amp; theme.cover.search %>\" /> &lt;i class=\"icon fas fa-search fa-fw\">&lt;/i> &lt;/form> &lt;/div> &lt;% &#125; %> 效果： 修改使手机端观看有外边距打开source/css/_layout/main.styl找到 @media screen and (max-width:$device-tablet)这一行 做如下修改 配置模板文件使用new命令 自动生成模板文件E:\\hexo\\blog\\scaffolds编辑post.md 没有则新建加入如下代码 --- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; comments: true # 是否开启评论 mathjax: false # 是否开启数学公式渲染 toc: true # 是否启用目录 top: false # 是否置顶 #若使用urlname作为永久链接则添加该项 urlname: categories: - [父类,子类] - 同级分类 tags: [标签1,标签2] --- &lt;!-- more --> Q&amp;A1）明明加了标签却无法在文章头部显示出来不是用如下hexo命令new出来的文章标签是无法无法正常显示，即使是复制黏贴了用上面命令生成的文章的fromt-matter，也是不能正常显示的，所以先用hexo命令新建文件，再用markdown编辑器打开编辑。 hexo new ‘文章标题’1 2）引用本地图片无法显示你引用自己的本地图片发布路径写的是本地的路径，服务器无法访问你的本地文件当然无法正常加载啦。解决方法是实用图床生成外链。见博客[]如外链之后引用图片，博客浏览过大或过小，可以先调整好大小再上传，如我遇到的问题就是，没有去查看博客头像预定的大小是多少（可以看别的已经搭好的博主的头像的参数 使用F12审查元素） 未完待续…… 参考文章：Volantis主题DIY笔记volantis官网","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]},{"title":"基于Hexo Github搭建个人博客一：将博客推到Github Page","slug":"基于Hexo-Github搭建个人博客一：将博客推到Github-Page","date":"2020-11-06T08:41:21.000Z","updated":"2020-11-23T05:56:37.507Z","comments":true,"path":"2020/11/06/基于Hexo-Github搭建个人博客一：将博客推到Github-Page/","link":"","permalink":"https://sun-j-y.github.io/2020/11/06/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80%EF%BC%9A%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%88%B0Github-Page/","excerpt":"","text":"前言 本文所有内容来自于Johnny, 略有修改 什么是hexo打开Hexo你会发现醒目的一行字：“Hexo is a fast, simple &amp; powerful blog framework”。其实说白了hexo就是个博客框架。 安装hexo前期准备 安装好 Nodejs 安装好 Git 以及注册一个Github账号 官网下载的Node.js安装包自带npm节点包管理工具，npm从其nmp官网下载对应的插件包到本地，因为该网站的服务器在国外，经常会出现下载缓慢或出现异常，这时便需要找到另外的方法提供稳定的下载。这个方法就是cnpm。阿里巴巴的淘宝团队把nmp官网的插件都同步到了在中国的服务器，提供给我们从这个服务器上稳定下载资源。简单来说就是为了防止因为下载速度过慢而导致失败，我们还要与预先处理一下。 预处理解决上述问题有如下两个方法，我选择的是方法一： 方法一、通过npm下载cnpm命令 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org # 其中-g是全局的意思 检验cnpm有没有安装成功 cnpm #或者 cnpm -v 方法二、修改npm的默认镜像源1）查询当前的npm的源，“http://registry.npmjs.org”为默认的官方源。 npm config get registry 2） 设置npm的淘宝镜像源，“https://registry.npm.taobao.org”为淘宝的镜像源。 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org # 通过这条set命令就可以把npm的镜像源改为国内淘宝的 正式安装hexo由于我预处理是用的方法一 所以我用cnpm cnpm和npm是一样的 相当于双胞胎 用方法二的伙伴把cnpm改为npm就可以了 其他照旧 cnpm install -g hexo-cli 验证hexo是否安装成功 hexo -v 安装成功后进入对Hexo的初始配置 Hexo初始配置 新建文件夹：我这里在E:/hexo下新建文件夹blog cmd下进入blog所在目录下 hexo init 初始化文件夹blog hexo init 初始化成功后，得到如下文件 这里对各个文件夹进行一个简单的说明，毕竟后面有些会用到 - node_modules：是依赖包 - public：存放的是生成的页面 - scaffolds：命令生成文章等的模板 - source：用命令创建的各种文章 - themes：主题 - _config.yml：整个博客的配置 - db.json：source解析所得到的 - package.json：项目所需模块项目的配置信息 安装deployer#安装能够将hexo部署到git page的deployer cnpm install hexo-deployer-git --save 本地查看效果常见hexo命令 1）generate hexo generate 功能：生成静态文件。 参数描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 2）deploy hexo deploy 功能：部署网站。 参数描述 -g, --generate 部署网站前，需要预先生成静态文件 3)server hexo server 功能：启动服务器。 参数描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，或覆盖记录格式 #hexo默认会有个Hello-World的博客文件 hexo g hexo s 地址栏 输入：http://localhost:400就可以在本地看到Hello Word文章 上面只是在本地发布成功，要想让更多人看到，需要发布到远程服务器，这里部署到GitHUb 部署博客到Github1）首先自己创建一个Github账户。2）创建一个仓库 命名规范: 用户名.github.io 3）配置SSH密钥只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步 在E:\\hexo\\blog目录下右键 bash here进入git窗口 ssh-keygen -t -C &quot;你GitHub的邮箱&quot; 两次密码直接回车 clip &lt;~&#x2F;ssh&#x2F;id_sra.pub 在GitHub个人账号中进入setting选择SSH and GPG keys添加从bash生成的密钥 测试在E:\\hexo\\blog目录下右键 bash here进入git窗口 输入如下命令 提示如下 输入yes后显示如下，则表示Github的SSH设置正确 配置_config.yml 获得SSH 配置_config.yml 在E:/hexo/blog目录下找到_config.yml配置文件 用notepad++或者vscode打开修改 找到deploy结点，编辑如下： repo为刚刚从GitHub复制来的SSH 粘贴即可 配置 Git 个人信息Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致 cmd下使用下面两条命令 git config --global user.email &quot;邮箱&quot; git config --global user.name &quot;用户名&quot; 到这里为止 git 操作实现本地代码库与 Github 代码库同步 部署到远端Githubhexo g -d 生成静态网页并把它部署到远端输入：https://你的仓库名 就可以访问到了在这里插入图片描述一切都布置好了，只差一杯咖啡，接下来就可以开工慢慢写文章啦3、博客编写（简单一提） 我们会发现发布成功的博客文章放在_posts目录下在这里插入图片描述那么可以使用支持 .md编辑提供Markdown 语法编辑的的编辑器，然后保存文件到 …\\source_posts 文件夹下即可，用CSDN自带的Markdown编辑器和小书匠都可以。这里用前者。 1）Markdown编辑器编辑博客，将生成的.md文件复制到 ..\\source_posts2）然后再hexo g -d 部署到远端GitHub就可以了 结束语文章到这里就结束了，我自己搭建过程中还是有碰到不少坑的，所幸网上用Hexo搭建博客的人比较多，所以一搜基本上都有解决方案。所以也记录一下自己的搭建过程，也希望这篇文章能够帮助那些想用hexo搭建个人博客的小伙伴们少走点弯路。","categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}],"categories":[{"name":"Hexo搭建博客","slug":"Hexo搭建博客","permalink":"https://sun-j-y.github.io/categories/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://sun-j-y.github.io/tags/hexo/"},{"name":"volantis","slug":"volantis","permalink":"https://sun-j-y.github.io/tags/volantis/"}]}